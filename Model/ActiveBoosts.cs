/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// ActiveBoosts
    /// </summary>
    [DataContract]
    public partial class ActiveBoosts :  IEquatable<ActiveBoosts>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveBoosts" /> class.
        /// </summary>
        /// <param name="FirstWinOfTheDayStartTime">FirstWinOfTheDayStartTime.</param>
        /// <param name="IpBoostEndDate">IpBoostEndDate.</param>
        /// <param name="IpBoostPerWinCount">IpBoostPerWinCount.</param>
        /// <param name="IpLoyaltyBoost">IpLoyaltyBoost.</param>
        /// <param name="SummonerId">SummonerId.</param>
        /// <param name="XpBoostEndDate">XpBoostEndDate.</param>
        /// <param name="XpBoostPerWinCount">XpBoostPerWinCount.</param>
        /// <param name="XpLoyaltyBoost">XpLoyaltyBoost.</param>
        public ActiveBoosts(string FirstWinOfTheDayStartTime = default(string), string IpBoostEndDate = default(string), int? IpBoostPerWinCount = default(int?), int? IpLoyaltyBoost = default(int?), long? SummonerId = default(long?), string XpBoostEndDate = default(string), int? XpBoostPerWinCount = default(int?), int? XpLoyaltyBoost = default(int?))
        {
            this.FirstWinOfTheDayStartTime = FirstWinOfTheDayStartTime;
            this.IpBoostEndDate = IpBoostEndDate;
            this.IpBoostPerWinCount = IpBoostPerWinCount;
            this.IpLoyaltyBoost = IpLoyaltyBoost;
            this.SummonerId = SummonerId;
            this.XpBoostEndDate = XpBoostEndDate;
            this.XpBoostPerWinCount = XpBoostPerWinCount;
            this.XpLoyaltyBoost = XpLoyaltyBoost;
        }
        
        /// <summary>
        /// Gets or Sets FirstWinOfTheDayStartTime
        /// </summary>
        [DataMember(Name="firstWinOfTheDayStartTime", EmitDefaultValue=false)]
        public string FirstWinOfTheDayStartTime { get; set; }

        /// <summary>
        /// Gets or Sets IpBoostEndDate
        /// </summary>
        [DataMember(Name="ipBoostEndDate", EmitDefaultValue=false)]
        public string IpBoostEndDate { get; set; }

        /// <summary>
        /// Gets or Sets IpBoostPerWinCount
        /// </summary>
        [DataMember(Name="ipBoostPerWinCount", EmitDefaultValue=false)]
        public int? IpBoostPerWinCount { get; set; }

        /// <summary>
        /// Gets or Sets IpLoyaltyBoost
        /// </summary>
        [DataMember(Name="ipLoyaltyBoost", EmitDefaultValue=false)]
        public int? IpLoyaltyBoost { get; set; }

        /// <summary>
        /// Gets or Sets SummonerId
        /// </summary>
        [DataMember(Name="summonerId", EmitDefaultValue=false)]
        public long? SummonerId { get; set; }

        /// <summary>
        /// Gets or Sets XpBoostEndDate
        /// </summary>
        [DataMember(Name="xpBoostEndDate", EmitDefaultValue=false)]
        public string XpBoostEndDate { get; set; }

        /// <summary>
        /// Gets or Sets XpBoostPerWinCount
        /// </summary>
        [DataMember(Name="xpBoostPerWinCount", EmitDefaultValue=false)]
        public int? XpBoostPerWinCount { get; set; }

        /// <summary>
        /// Gets or Sets XpLoyaltyBoost
        /// </summary>
        [DataMember(Name="xpLoyaltyBoost", EmitDefaultValue=false)]
        public int? XpLoyaltyBoost { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActiveBoosts {\n");
            sb.Append("  FirstWinOfTheDayStartTime: ").Append(FirstWinOfTheDayStartTime).Append("\n");
            sb.Append("  IpBoostEndDate: ").Append(IpBoostEndDate).Append("\n");
            sb.Append("  IpBoostPerWinCount: ").Append(IpBoostPerWinCount).Append("\n");
            sb.Append("  IpLoyaltyBoost: ").Append(IpLoyaltyBoost).Append("\n");
            sb.Append("  SummonerId: ").Append(SummonerId).Append("\n");
            sb.Append("  XpBoostEndDate: ").Append(XpBoostEndDate).Append("\n");
            sb.Append("  XpBoostPerWinCount: ").Append(XpBoostPerWinCount).Append("\n");
            sb.Append("  XpLoyaltyBoost: ").Append(XpLoyaltyBoost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ActiveBoosts);
        }

        /// <summary>
        /// Returns true if ActiveBoosts instances are equal
        /// </summary>
        /// <param name="other">Instance of ActiveBoosts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActiveBoosts other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FirstWinOfTheDayStartTime == other.FirstWinOfTheDayStartTime ||
                    this.FirstWinOfTheDayStartTime != null &&
                    this.FirstWinOfTheDayStartTime.Equals(other.FirstWinOfTheDayStartTime)
                ) && 
                (
                    this.IpBoostEndDate == other.IpBoostEndDate ||
                    this.IpBoostEndDate != null &&
                    this.IpBoostEndDate.Equals(other.IpBoostEndDate)
                ) && 
                (
                    this.IpBoostPerWinCount == other.IpBoostPerWinCount ||
                    this.IpBoostPerWinCount != null &&
                    this.IpBoostPerWinCount.Equals(other.IpBoostPerWinCount)
                ) && 
                (
                    this.IpLoyaltyBoost == other.IpLoyaltyBoost ||
                    this.IpLoyaltyBoost != null &&
                    this.IpLoyaltyBoost.Equals(other.IpLoyaltyBoost)
                ) && 
                (
                    this.SummonerId == other.SummonerId ||
                    this.SummonerId != null &&
                    this.SummonerId.Equals(other.SummonerId)
                ) && 
                (
                    this.XpBoostEndDate == other.XpBoostEndDate ||
                    this.XpBoostEndDate != null &&
                    this.XpBoostEndDate.Equals(other.XpBoostEndDate)
                ) && 
                (
                    this.XpBoostPerWinCount == other.XpBoostPerWinCount ||
                    this.XpBoostPerWinCount != null &&
                    this.XpBoostPerWinCount.Equals(other.XpBoostPerWinCount)
                ) && 
                (
                    this.XpLoyaltyBoost == other.XpLoyaltyBoost ||
                    this.XpLoyaltyBoost != null &&
                    this.XpLoyaltyBoost.Equals(other.XpLoyaltyBoost)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FirstWinOfTheDayStartTime != null)
                    hash = hash * 59 + this.FirstWinOfTheDayStartTime.GetHashCode();
                if (this.IpBoostEndDate != null)
                    hash = hash * 59 + this.IpBoostEndDate.GetHashCode();
                if (this.IpBoostPerWinCount != null)
                    hash = hash * 59 + this.IpBoostPerWinCount.GetHashCode();
                if (this.IpLoyaltyBoost != null)
                    hash = hash * 59 + this.IpLoyaltyBoost.GetHashCode();
                if (this.SummonerId != null)
                    hash = hash * 59 + this.SummonerId.GetHashCode();
                if (this.XpBoostEndDate != null)
                    hash = hash * 59 + this.XpBoostEndDate.GetHashCode();
                if (this.XpBoostPerWinCount != null)
                    hash = hash * 59 + this.XpBoostPerWinCount.GetHashCode();
                if (this.XpLoyaltyBoost != null)
                    hash = hash * 59 + this.XpLoyaltyBoost.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
