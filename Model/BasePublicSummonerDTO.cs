/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// BasePublicSummonerDTO
    /// </summary>
    [DataContract]
    public partial class BasePublicSummonerDTO :  IEquatable<BasePublicSummonerDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BasePublicSummonerDTO" /> class.
        /// </summary>
        /// <param name="AcctId">AcctId.</param>
        /// <param name="InternalName">InternalName.</param>
        /// <param name="Name">Name.</param>
        /// <param name="PreviousSeasonHighestTier">PreviousSeasonHighestTier.</param>
        /// <param name="ProfileIconId">ProfileIconId.</param>
        /// <param name="Puuid">Puuid.</param>
        /// <param name="SumId">SumId.</param>
        public BasePublicSummonerDTO(long? AcctId = default(long?), string InternalName = default(string), string Name = default(string), string PreviousSeasonHighestTier = default(string), int? ProfileIconId = default(int?), string Puuid = default(string), long? SumId = default(long?))
        {
            this.AcctId = AcctId;
            this.InternalName = InternalName;
            this.Name = Name;
            this.PreviousSeasonHighestTier = PreviousSeasonHighestTier;
            this.ProfileIconId = ProfileIconId;
            this.Puuid = Puuid;
            this.SumId = SumId;
        }
        
        /// <summary>
        /// Gets or Sets AcctId
        /// </summary>
        [DataMember(Name="acctId", EmitDefaultValue=false)]
        public long? AcctId { get; set; }

        /// <summary>
        /// Gets or Sets InternalName
        /// </summary>
        [DataMember(Name="internalName", EmitDefaultValue=false)]
        public string InternalName { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PreviousSeasonHighestTier
        /// </summary>
        [DataMember(Name="previousSeasonHighestTier", EmitDefaultValue=false)]
        public string PreviousSeasonHighestTier { get; set; }

        /// <summary>
        /// Gets or Sets ProfileIconId
        /// </summary>
        [DataMember(Name="profileIconId", EmitDefaultValue=false)]
        public int? ProfileIconId { get; set; }

        /// <summary>
        /// Gets or Sets Puuid
        /// </summary>
        [DataMember(Name="puuid", EmitDefaultValue=false)]
        public string Puuid { get; set; }

        /// <summary>
        /// Gets or Sets SumId
        /// </summary>
        [DataMember(Name="sumId", EmitDefaultValue=false)]
        public long? SumId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BasePublicSummonerDTO {\n");
            sb.Append("  AcctId: ").Append(AcctId).Append("\n");
            sb.Append("  InternalName: ").Append(InternalName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PreviousSeasonHighestTier: ").Append(PreviousSeasonHighestTier).Append("\n");
            sb.Append("  ProfileIconId: ").Append(ProfileIconId).Append("\n");
            sb.Append("  Puuid: ").Append(Puuid).Append("\n");
            sb.Append("  SumId: ").Append(SumId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BasePublicSummonerDTO);
        }

        /// <summary>
        /// Returns true if BasePublicSummonerDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of BasePublicSummonerDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BasePublicSummonerDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AcctId == other.AcctId ||
                    this.AcctId != null &&
                    this.AcctId.Equals(other.AcctId)
                ) && 
                (
                    this.InternalName == other.InternalName ||
                    this.InternalName != null &&
                    this.InternalName.Equals(other.InternalName)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.PreviousSeasonHighestTier == other.PreviousSeasonHighestTier ||
                    this.PreviousSeasonHighestTier != null &&
                    this.PreviousSeasonHighestTier.Equals(other.PreviousSeasonHighestTier)
                ) && 
                (
                    this.ProfileIconId == other.ProfileIconId ||
                    this.ProfileIconId != null &&
                    this.ProfileIconId.Equals(other.ProfileIconId)
                ) && 
                (
                    this.Puuid == other.Puuid ||
                    this.Puuid != null &&
                    this.Puuid.Equals(other.Puuid)
                ) && 
                (
                    this.SumId == other.SumId ||
                    this.SumId != null &&
                    this.SumId.Equals(other.SumId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AcctId != null)
                    hash = hash * 59 + this.AcctId.GetHashCode();
                if (this.InternalName != null)
                    hash = hash * 59 + this.InternalName.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.PreviousSeasonHighestTier != null)
                    hash = hash * 59 + this.PreviousSeasonHighestTier.GetHashCode();
                if (this.ProfileIconId != null)
                    hash = hash * 59 + this.ProfileIconId.GetHashCode();
                if (this.Puuid != null)
                    hash = hash * 59 + this.Puuid.GetHashCode();
                if (this.SumId != null)
                    hash = hash * 59 + this.SumId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
