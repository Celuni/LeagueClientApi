/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// User Experience Settings Operating System Information
    /// </summary>
    [DataContract]
    public partial class BasicOperatingSystemInfo :  IEquatable<BasicOperatingSystemInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BasicOperatingSystemInfo" /> class.
        /// </summary>
        /// <param name="Edition">Edition.</param>
        /// <param name="Platform">Platform.</param>
        /// <param name="VersionMajor">VersionMajor.</param>
        /// <param name="VersionMinor">VersionMinor.</param>
        public BasicOperatingSystemInfo(string Edition = default(string), string Platform = default(string), string VersionMajor = default(string), string VersionMinor = default(string))
        {
            this.Edition = Edition;
            this.Platform = Platform;
            this.VersionMajor = VersionMajor;
            this.VersionMinor = VersionMinor;
        }
        
        /// <summary>
        /// Gets or Sets Edition
        /// </summary>
        [DataMember(Name="edition", EmitDefaultValue=false)]
        public string Edition { get; set; }

        /// <summary>
        /// Gets or Sets Platform
        /// </summary>
        [DataMember(Name="platform", EmitDefaultValue=false)]
        public string Platform { get; set; }

        /// <summary>
        /// Gets or Sets VersionMajor
        /// </summary>
        [DataMember(Name="versionMajor", EmitDefaultValue=false)]
        public string VersionMajor { get; set; }

        /// <summary>
        /// Gets or Sets VersionMinor
        /// </summary>
        [DataMember(Name="versionMinor", EmitDefaultValue=false)]
        public string VersionMinor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BasicOperatingSystemInfo {\n");
            sb.Append("  Edition: ").Append(Edition).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  VersionMajor: ").Append(VersionMajor).Append("\n");
            sb.Append("  VersionMinor: ").Append(VersionMinor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BasicOperatingSystemInfo);
        }

        /// <summary>
        /// Returns true if BasicOperatingSystemInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of BasicOperatingSystemInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BasicOperatingSystemInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Edition == other.Edition ||
                    this.Edition != null &&
                    this.Edition.Equals(other.Edition)
                ) && 
                (
                    this.Platform == other.Platform ||
                    this.Platform != null &&
                    this.Platform.Equals(other.Platform)
                ) && 
                (
                    this.VersionMajor == other.VersionMajor ||
                    this.VersionMajor != null &&
                    this.VersionMajor.Equals(other.VersionMajor)
                ) && 
                (
                    this.VersionMinor == other.VersionMinor ||
                    this.VersionMinor != null &&
                    this.VersionMinor.Equals(other.VersionMinor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Edition != null)
                    hash = hash * 59 + this.Edition.GetHashCode();
                if (this.Platform != null)
                    hash = hash * 59 + this.Platform.GetHashCode();
                if (this.VersionMajor != null)
                    hash = hash * 59 + this.VersionMajor.GetHashCode();
                if (this.VersionMinor != null)
                    hash = hash * 59 + this.VersionMinor.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
