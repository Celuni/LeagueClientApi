/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// Describes the exposed native API.
    /// </summary>
    [DataContract]
    public partial class BindingFullApiHelp :  IEquatable<BindingFullApiHelp>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BindingFullApiHelp" /> class.
        /// </summary>
        /// <param name="Events">Events.</param>
        /// <param name="Functions">Functions.</param>
        /// <param name="Types">Types.</param>
        public BindingFullApiHelp(List<BindingFullEventHelp> Events = default(List<BindingFullEventHelp>), List<BindingFullFunctionHelp> Functions = default(List<BindingFullFunctionHelp>), List<BindingFullTypeHelp> Types = default(List<BindingFullTypeHelp>))
        {
            this.Events = Events;
            this.Functions = Functions;
            this.Types = Types;
        }
        
        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [DataMember(Name="events", EmitDefaultValue=false)]
        public List<BindingFullEventHelp> Events { get; set; }

        /// <summary>
        /// Gets or Sets Functions
        /// </summary>
        [DataMember(Name="functions", EmitDefaultValue=false)]
        public List<BindingFullFunctionHelp> Functions { get; set; }

        /// <summary>
        /// Gets or Sets Types
        /// </summary>
        [DataMember(Name="types", EmitDefaultValue=false)]
        public List<BindingFullTypeHelp> Types { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BindingFullApiHelp {\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  Functions: ").Append(Functions).Append("\n");
            sb.Append("  Types: ").Append(Types).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BindingFullApiHelp);
        }

        /// <summary>
        /// Returns true if BindingFullApiHelp instances are equal
        /// </summary>
        /// <param name="other">Instance of BindingFullApiHelp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BindingFullApiHelp other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Events == other.Events ||
                    this.Events != null &&
                    this.Events.SequenceEqual(other.Events)
                ) && 
                (
                    this.Functions == other.Functions ||
                    this.Functions != null &&
                    this.Functions.SequenceEqual(other.Functions)
                ) && 
                (
                    this.Types == other.Types ||
                    this.Types != null &&
                    this.Types.SequenceEqual(other.Types)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Events != null)
                    hash = hash * 59 + this.Events.GetHashCode();
                if (this.Functions != null)
                    hash = hash * 59 + this.Functions.GetHashCode();
                if (this.Types != null)
                    hash = hash * 59 + this.Types.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
