/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// BuildInfo
    /// </summary>
    [DataContract]
    public partial class BuildInfo :  IEquatable<BuildInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildInfo" /> class.
        /// </summary>
        /// <param name="Branch">Branch.</param>
        /// <param name="BranchFull">BranchFull.</param>
        /// <param name="CodeBuildId">CodeBuildId.</param>
        /// <param name="ContentBuildId">ContentBuildId.</param>
        /// <param name="GameBranch">GameBranch.</param>
        /// <param name="GameBranchFull">GameBranchFull.</param>
        /// <param name="GameDataBuildId">GameDataBuildId.</param>
        /// <param name="Patchline">Patchline.</param>
        /// <param name="PatchlineVisibleName">PatchlineVisibleName.</param>
        /// <param name="Version">Version.</param>
        public BuildInfo(string Branch = default(string), string BranchFull = default(string), int? CodeBuildId = default(int?), int? ContentBuildId = default(int?), string GameBranch = default(string), string GameBranchFull = default(string), int? GameDataBuildId = default(int?), string Patchline = default(string), string PatchlineVisibleName = default(string), string Version = default(string))
        {
            this.Branch = Branch;
            this.BranchFull = BranchFull;
            this.CodeBuildId = CodeBuildId;
            this.ContentBuildId = ContentBuildId;
            this.GameBranch = GameBranch;
            this.GameBranchFull = GameBranchFull;
            this.GameDataBuildId = GameDataBuildId;
            this.Patchline = Patchline;
            this.PatchlineVisibleName = PatchlineVisibleName;
            this.Version = Version;
        }
        
        /// <summary>
        /// Gets or Sets Branch
        /// </summary>
        [DataMember(Name="branch", EmitDefaultValue=false)]
        public string Branch { get; set; }

        /// <summary>
        /// Gets or Sets BranchFull
        /// </summary>
        [DataMember(Name="branchFull", EmitDefaultValue=false)]
        public string BranchFull { get; set; }

        /// <summary>
        /// Gets or Sets CodeBuildId
        /// </summary>
        [DataMember(Name="codeBuildId", EmitDefaultValue=false)]
        public int? CodeBuildId { get; set; }

        /// <summary>
        /// Gets or Sets ContentBuildId
        /// </summary>
        [DataMember(Name="contentBuildId", EmitDefaultValue=false)]
        public int? ContentBuildId { get; set; }

        /// <summary>
        /// Gets or Sets GameBranch
        /// </summary>
        [DataMember(Name="gameBranch", EmitDefaultValue=false)]
        public string GameBranch { get; set; }

        /// <summary>
        /// Gets or Sets GameBranchFull
        /// </summary>
        [DataMember(Name="gameBranchFull", EmitDefaultValue=false)]
        public string GameBranchFull { get; set; }

        /// <summary>
        /// Gets or Sets GameDataBuildId
        /// </summary>
        [DataMember(Name="gameDataBuildId", EmitDefaultValue=false)]
        public int? GameDataBuildId { get; set; }

        /// <summary>
        /// Gets or Sets Patchline
        /// </summary>
        [DataMember(Name="patchline", EmitDefaultValue=false)]
        public string Patchline { get; set; }

        /// <summary>
        /// Gets or Sets PatchlineVisibleName
        /// </summary>
        [DataMember(Name="patchlineVisibleName", EmitDefaultValue=false)]
        public string PatchlineVisibleName { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuildInfo {\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  BranchFull: ").Append(BranchFull).Append("\n");
            sb.Append("  CodeBuildId: ").Append(CodeBuildId).Append("\n");
            sb.Append("  ContentBuildId: ").Append(ContentBuildId).Append("\n");
            sb.Append("  GameBranch: ").Append(GameBranch).Append("\n");
            sb.Append("  GameBranchFull: ").Append(GameBranchFull).Append("\n");
            sb.Append("  GameDataBuildId: ").Append(GameDataBuildId).Append("\n");
            sb.Append("  Patchline: ").Append(Patchline).Append("\n");
            sb.Append("  PatchlineVisibleName: ").Append(PatchlineVisibleName).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BuildInfo);
        }

        /// <summary>
        /// Returns true if BuildInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of BuildInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Branch == other.Branch ||
                    this.Branch != null &&
                    this.Branch.Equals(other.Branch)
                ) && 
                (
                    this.BranchFull == other.BranchFull ||
                    this.BranchFull != null &&
                    this.BranchFull.Equals(other.BranchFull)
                ) && 
                (
                    this.CodeBuildId == other.CodeBuildId ||
                    this.CodeBuildId != null &&
                    this.CodeBuildId.Equals(other.CodeBuildId)
                ) && 
                (
                    this.ContentBuildId == other.ContentBuildId ||
                    this.ContentBuildId != null &&
                    this.ContentBuildId.Equals(other.ContentBuildId)
                ) && 
                (
                    this.GameBranch == other.GameBranch ||
                    this.GameBranch != null &&
                    this.GameBranch.Equals(other.GameBranch)
                ) && 
                (
                    this.GameBranchFull == other.GameBranchFull ||
                    this.GameBranchFull != null &&
                    this.GameBranchFull.Equals(other.GameBranchFull)
                ) && 
                (
                    this.GameDataBuildId == other.GameDataBuildId ||
                    this.GameDataBuildId != null &&
                    this.GameDataBuildId.Equals(other.GameDataBuildId)
                ) && 
                (
                    this.Patchline == other.Patchline ||
                    this.Patchline != null &&
                    this.Patchline.Equals(other.Patchline)
                ) && 
                (
                    this.PatchlineVisibleName == other.PatchlineVisibleName ||
                    this.PatchlineVisibleName != null &&
                    this.PatchlineVisibleName.Equals(other.PatchlineVisibleName)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Branch != null)
                    hash = hash * 59 + this.Branch.GetHashCode();
                if (this.BranchFull != null)
                    hash = hash * 59 + this.BranchFull.GetHashCode();
                if (this.CodeBuildId != null)
                    hash = hash * 59 + this.CodeBuildId.GetHashCode();
                if (this.ContentBuildId != null)
                    hash = hash * 59 + this.ContentBuildId.GetHashCode();
                if (this.GameBranch != null)
                    hash = hash * 59 + this.GameBranch.GetHashCode();
                if (this.GameBranchFull != null)
                    hash = hash * 59 + this.GameBranchFull.GetHashCode();
                if (this.GameDataBuildId != null)
                    hash = hash * 59 + this.GameDataBuildId.GetHashCode();
                if (this.Patchline != null)
                    hash = hash * 59 + this.Patchline.GetHashCode();
                if (this.PatchlineVisibleName != null)
                    hash = hash * 59 + this.PatchlineVisibleName.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
