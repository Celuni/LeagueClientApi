/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// ChampSelectLcdsGameDTO
    /// </summary>
    [DataContract]
    public partial class ChampSelectLcdsGameDTO :  IEquatable<ChampSelectLcdsGameDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChampSelectLcdsGameDTO" /> class.
        /// </summary>
        /// <param name="BannedChampions">BannedChampions.</param>
        /// <param name="GameMutators">GameMutators.</param>
        /// <param name="GameState">GameState.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Name">Name.</param>
        /// <param name="OptimisticLock">OptimisticLock.</param>
        /// <param name="PickTurn">PickTurn.</param>
        /// <param name="PlayerChampionSelections">PlayerChampionSelections.</param>
        /// <param name="QueueTypeName">QueueTypeName.</param>
        /// <param name="RoomName">RoomName.</param>
        /// <param name="RoomPassword">RoomPassword.</param>
        /// <param name="SpectatorDelay">SpectatorDelay.</param>
        /// <param name="StatusOfParticipants">StatusOfParticipants.</param>
        /// <param name="TeamOne">TeamOne.</param>
        /// <param name="TeamTwo">TeamTwo.</param>
        public ChampSelectLcdsGameDTO(List<BannedChampion> BannedChampions = default(List<BannedChampion>), List<string> GameMutators = default(List<string>), string GameState = default(string), long? Id = default(long?), string Name = default(string), long? OptimisticLock = default(long?), int? PickTurn = default(int?), List<ChampSelectLcdsPlayerChampionSelectionDTO> PlayerChampionSelections = default(List<ChampSelectLcdsPlayerChampionSelectionDTO>), string QueueTypeName = default(string), string RoomName = default(string), string RoomPassword = default(string), long? SpectatorDelay = default(long?), string StatusOfParticipants = default(string), List<Object> TeamOne = default(List<Object>), List<Object> TeamTwo = default(List<Object>))
        {
            this.BannedChampions = BannedChampions;
            this.GameMutators = GameMutators;
            this.GameState = GameState;
            this.Id = Id;
            this.Name = Name;
            this.OptimisticLock = OptimisticLock;
            this.PickTurn = PickTurn;
            this.PlayerChampionSelections = PlayerChampionSelections;
            this.QueueTypeName = QueueTypeName;
            this.RoomName = RoomName;
            this.RoomPassword = RoomPassword;
            this.SpectatorDelay = SpectatorDelay;
            this.StatusOfParticipants = StatusOfParticipants;
            this.TeamOne = TeamOne;
            this.TeamTwo = TeamTwo;
        }
        
        /// <summary>
        /// Gets or Sets BannedChampions
        /// </summary>
        [DataMember(Name="bannedChampions", EmitDefaultValue=false)]
        public List<BannedChampion> BannedChampions { get; set; }

        /// <summary>
        /// Gets or Sets GameMutators
        /// </summary>
        [DataMember(Name="gameMutators", EmitDefaultValue=false)]
        public List<string> GameMutators { get; set; }

        /// <summary>
        /// Gets or Sets GameState
        /// </summary>
        [DataMember(Name="gameState", EmitDefaultValue=false)]
        public string GameState { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OptimisticLock
        /// </summary>
        [DataMember(Name="optimisticLock", EmitDefaultValue=false)]
        public long? OptimisticLock { get; set; }

        /// <summary>
        /// Gets or Sets PickTurn
        /// </summary>
        [DataMember(Name="pickTurn", EmitDefaultValue=false)]
        public int? PickTurn { get; set; }

        /// <summary>
        /// Gets or Sets PlayerChampionSelections
        /// </summary>
        [DataMember(Name="playerChampionSelections", EmitDefaultValue=false)]
        public List<ChampSelectLcdsPlayerChampionSelectionDTO> PlayerChampionSelections { get; set; }

        /// <summary>
        /// Gets or Sets QueueTypeName
        /// </summary>
        [DataMember(Name="queueTypeName", EmitDefaultValue=false)]
        public string QueueTypeName { get; set; }

        /// <summary>
        /// Gets or Sets RoomName
        /// </summary>
        [DataMember(Name="roomName", EmitDefaultValue=false)]
        public string RoomName { get; set; }

        /// <summary>
        /// Gets or Sets RoomPassword
        /// </summary>
        [DataMember(Name="roomPassword", EmitDefaultValue=false)]
        public string RoomPassword { get; set; }

        /// <summary>
        /// Gets or Sets SpectatorDelay
        /// </summary>
        [DataMember(Name="spectatorDelay", EmitDefaultValue=false)]
        public long? SpectatorDelay { get; set; }

        /// <summary>
        /// Gets or Sets StatusOfParticipants
        /// </summary>
        [DataMember(Name="statusOfParticipants", EmitDefaultValue=false)]
        public string StatusOfParticipants { get; set; }

        /// <summary>
        /// Gets or Sets TeamOne
        /// </summary>
        [DataMember(Name="teamOne", EmitDefaultValue=false)]
        public List<Object> TeamOne { get; set; }

        /// <summary>
        /// Gets or Sets TeamTwo
        /// </summary>
        [DataMember(Name="teamTwo", EmitDefaultValue=false)]
        public List<Object> TeamTwo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChampSelectLcdsGameDTO {\n");
            sb.Append("  BannedChampions: ").Append(BannedChampions).Append("\n");
            sb.Append("  GameMutators: ").Append(GameMutators).Append("\n");
            sb.Append("  GameState: ").Append(GameState).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OptimisticLock: ").Append(OptimisticLock).Append("\n");
            sb.Append("  PickTurn: ").Append(PickTurn).Append("\n");
            sb.Append("  PlayerChampionSelections: ").Append(PlayerChampionSelections).Append("\n");
            sb.Append("  QueueTypeName: ").Append(QueueTypeName).Append("\n");
            sb.Append("  RoomName: ").Append(RoomName).Append("\n");
            sb.Append("  RoomPassword: ").Append(RoomPassword).Append("\n");
            sb.Append("  SpectatorDelay: ").Append(SpectatorDelay).Append("\n");
            sb.Append("  StatusOfParticipants: ").Append(StatusOfParticipants).Append("\n");
            sb.Append("  TeamOne: ").Append(TeamOne).Append("\n");
            sb.Append("  TeamTwo: ").Append(TeamTwo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ChampSelectLcdsGameDTO);
        }

        /// <summary>
        /// Returns true if ChampSelectLcdsGameDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of ChampSelectLcdsGameDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChampSelectLcdsGameDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BannedChampions == other.BannedChampions ||
                    this.BannedChampions != null &&
                    this.BannedChampions.SequenceEqual(other.BannedChampions)
                ) && 
                (
                    this.GameMutators == other.GameMutators ||
                    this.GameMutators != null &&
                    this.GameMutators.SequenceEqual(other.GameMutators)
                ) && 
                (
                    this.GameState == other.GameState ||
                    this.GameState != null &&
                    this.GameState.Equals(other.GameState)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.OptimisticLock == other.OptimisticLock ||
                    this.OptimisticLock != null &&
                    this.OptimisticLock.Equals(other.OptimisticLock)
                ) && 
                (
                    this.PickTurn == other.PickTurn ||
                    this.PickTurn != null &&
                    this.PickTurn.Equals(other.PickTurn)
                ) && 
                (
                    this.PlayerChampionSelections == other.PlayerChampionSelections ||
                    this.PlayerChampionSelections != null &&
                    this.PlayerChampionSelections.SequenceEqual(other.PlayerChampionSelections)
                ) && 
                (
                    this.QueueTypeName == other.QueueTypeName ||
                    this.QueueTypeName != null &&
                    this.QueueTypeName.Equals(other.QueueTypeName)
                ) && 
                (
                    this.RoomName == other.RoomName ||
                    this.RoomName != null &&
                    this.RoomName.Equals(other.RoomName)
                ) && 
                (
                    this.RoomPassword == other.RoomPassword ||
                    this.RoomPassword != null &&
                    this.RoomPassword.Equals(other.RoomPassword)
                ) && 
                (
                    this.SpectatorDelay == other.SpectatorDelay ||
                    this.SpectatorDelay != null &&
                    this.SpectatorDelay.Equals(other.SpectatorDelay)
                ) && 
                (
                    this.StatusOfParticipants == other.StatusOfParticipants ||
                    this.StatusOfParticipants != null &&
                    this.StatusOfParticipants.Equals(other.StatusOfParticipants)
                ) && 
                (
                    this.TeamOne == other.TeamOne ||
                    this.TeamOne != null &&
                    this.TeamOne.SequenceEqual(other.TeamOne)
                ) && 
                (
                    this.TeamTwo == other.TeamTwo ||
                    this.TeamTwo != null &&
                    this.TeamTwo.SequenceEqual(other.TeamTwo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BannedChampions != null)
                    hash = hash * 59 + this.BannedChampions.GetHashCode();
                if (this.GameMutators != null)
                    hash = hash * 59 + this.GameMutators.GetHashCode();
                if (this.GameState != null)
                    hash = hash * 59 + this.GameState.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.OptimisticLock != null)
                    hash = hash * 59 + this.OptimisticLock.GetHashCode();
                if (this.PickTurn != null)
                    hash = hash * 59 + this.PickTurn.GetHashCode();
                if (this.PlayerChampionSelections != null)
                    hash = hash * 59 + this.PlayerChampionSelections.GetHashCode();
                if (this.QueueTypeName != null)
                    hash = hash * 59 + this.QueueTypeName.GetHashCode();
                if (this.RoomName != null)
                    hash = hash * 59 + this.RoomName.GetHashCode();
                if (this.RoomPassword != null)
                    hash = hash * 59 + this.RoomPassword.GetHashCode();
                if (this.SpectatorDelay != null)
                    hash = hash * 59 + this.SpectatorDelay.GetHashCode();
                if (this.StatusOfParticipants != null)
                    hash = hash * 59 + this.StatusOfParticipants.GetHashCode();
                if (this.TeamOne != null)
                    hash = hash * 59 + this.TeamOne.GetHashCode();
                if (this.TeamTwo != null)
                    hash = hash * 59 + this.TeamTwo.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
