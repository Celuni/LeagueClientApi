/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// ChampSelectLcdsPointSummary
    /// </summary>
    [DataContract]
    public partial class ChampSelectLcdsPointSummary :  IEquatable<ChampSelectLcdsPointSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChampSelectLcdsPointSummary" /> class.
        /// </summary>
        /// <param name="CurrentPoints">CurrentPoints.</param>
        /// <param name="MaxRolls">MaxRolls.</param>
        /// <param name="NumberOfRolls">NumberOfRolls.</param>
        /// <param name="PointsCostToRoll">PointsCostToRoll.</param>
        /// <param name="PointsToNextRoll">PointsToNextRoll.</param>
        public ChampSelectLcdsPointSummary(int? CurrentPoints = default(int?), int? MaxRolls = default(int?), int? NumberOfRolls = default(int?), int? PointsCostToRoll = default(int?), int? PointsToNextRoll = default(int?))
        {
            this.CurrentPoints = CurrentPoints;
            this.MaxRolls = MaxRolls;
            this.NumberOfRolls = NumberOfRolls;
            this.PointsCostToRoll = PointsCostToRoll;
            this.PointsToNextRoll = PointsToNextRoll;
        }
        
        /// <summary>
        /// Gets or Sets CurrentPoints
        /// </summary>
        [DataMember(Name="currentPoints", EmitDefaultValue=false)]
        public int? CurrentPoints { get; set; }

        /// <summary>
        /// Gets or Sets MaxRolls
        /// </summary>
        [DataMember(Name="maxRolls", EmitDefaultValue=false)]
        public int? MaxRolls { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfRolls
        /// </summary>
        [DataMember(Name="numberOfRolls", EmitDefaultValue=false)]
        public int? NumberOfRolls { get; set; }

        /// <summary>
        /// Gets or Sets PointsCostToRoll
        /// </summary>
        [DataMember(Name="pointsCostToRoll", EmitDefaultValue=false)]
        public int? PointsCostToRoll { get; set; }

        /// <summary>
        /// Gets or Sets PointsToNextRoll
        /// </summary>
        [DataMember(Name="pointsToNextRoll", EmitDefaultValue=false)]
        public int? PointsToNextRoll { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChampSelectLcdsPointSummary {\n");
            sb.Append("  CurrentPoints: ").Append(CurrentPoints).Append("\n");
            sb.Append("  MaxRolls: ").Append(MaxRolls).Append("\n");
            sb.Append("  NumberOfRolls: ").Append(NumberOfRolls).Append("\n");
            sb.Append("  PointsCostToRoll: ").Append(PointsCostToRoll).Append("\n");
            sb.Append("  PointsToNextRoll: ").Append(PointsToNextRoll).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ChampSelectLcdsPointSummary);
        }

        /// <summary>
        /// Returns true if ChampSelectLcdsPointSummary instances are equal
        /// </summary>
        /// <param name="other">Instance of ChampSelectLcdsPointSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChampSelectLcdsPointSummary other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CurrentPoints == other.CurrentPoints ||
                    this.CurrentPoints != null &&
                    this.CurrentPoints.Equals(other.CurrentPoints)
                ) && 
                (
                    this.MaxRolls == other.MaxRolls ||
                    this.MaxRolls != null &&
                    this.MaxRolls.Equals(other.MaxRolls)
                ) && 
                (
                    this.NumberOfRolls == other.NumberOfRolls ||
                    this.NumberOfRolls != null &&
                    this.NumberOfRolls.Equals(other.NumberOfRolls)
                ) && 
                (
                    this.PointsCostToRoll == other.PointsCostToRoll ||
                    this.PointsCostToRoll != null &&
                    this.PointsCostToRoll.Equals(other.PointsCostToRoll)
                ) && 
                (
                    this.PointsToNextRoll == other.PointsToNextRoll ||
                    this.PointsToNextRoll != null &&
                    this.PointsToNextRoll.Equals(other.PointsToNextRoll)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CurrentPoints != null)
                    hash = hash * 59 + this.CurrentPoints.GetHashCode();
                if (this.MaxRolls != null)
                    hash = hash * 59 + this.MaxRolls.GetHashCode();
                if (this.NumberOfRolls != null)
                    hash = hash * 59 + this.NumberOfRolls.GetHashCode();
                if (this.PointsCostToRoll != null)
                    hash = hash * 59 + this.PointsCostToRoll.GetHashCode();
                if (this.PointsToNextRoll != null)
                    hash = hash * 59 + this.PointsToNextRoll.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
