/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// ClashEventData
    /// </summary>
    [DataContract]
    public partial class ClashEventData :  IEquatable<ClashEventData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClashEventData" /> class.
        /// </summary>
        /// <param name="Bracket">Bracket.</param>
        /// <param name="EarnedDate">EarnedDate.</param>
        /// <param name="PlayerUUIDs">PlayerUUIDs.</param>
        /// <param name="RewardSpec">RewardSpec.</param>
        /// <param name="RewardType">RewardType.</param>
        /// <param name="SeasonId">SeasonId.</param>
        /// <param name="TeamLogoChromaId">TeamLogoChromaId.</param>
        /// <param name="TeamLogoName">TeamLogoName.</param>
        /// <param name="TeamName">TeamName.</param>
        /// <param name="Theme">Theme.</param>
        /// <param name="Tier">Tier.</param>
        /// <param name="TournamentId">TournamentId.</param>
        /// <param name="TournamentName">TournamentName.</param>
        public ClashEventData(int? Bracket = default(int?), string EarnedDate = default(string), List<string> PlayerUUIDs = default(List<string>), ClashRewardSpec RewardSpec = default(ClashRewardSpec), string RewardType = default(string), int? SeasonId = default(int?), string TeamLogoChromaId = default(string), string TeamLogoName = default(string), string TeamName = default(string), string Theme = default(string), string Tier = default(string), long? TournamentId = default(long?), string TournamentName = default(string))
        {
            this.Bracket = Bracket;
            this.EarnedDate = EarnedDate;
            this.PlayerUUIDs = PlayerUUIDs;
            this.RewardSpec = RewardSpec;
            this.RewardType = RewardType;
            this.SeasonId = SeasonId;
            this.TeamLogoChromaId = TeamLogoChromaId;
            this.TeamLogoName = TeamLogoName;
            this.TeamName = TeamName;
            this.Theme = Theme;
            this.Tier = Tier;
            this.TournamentId = TournamentId;
            this.TournamentName = TournamentName;
        }
        
        /// <summary>
        /// Gets or Sets Bracket
        /// </summary>
        [DataMember(Name="bracket", EmitDefaultValue=false)]
        public int? Bracket { get; set; }

        /// <summary>
        /// Gets or Sets EarnedDate
        /// </summary>
        [DataMember(Name="earnedDate", EmitDefaultValue=false)]
        public string EarnedDate { get; set; }

        /// <summary>
        /// Gets or Sets PlayerUUIDs
        /// </summary>
        [DataMember(Name="playerUUIDs", EmitDefaultValue=false)]
        public List<string> PlayerUUIDs { get; set; }

        /// <summary>
        /// Gets or Sets RewardSpec
        /// </summary>
        [DataMember(Name="rewardSpec", EmitDefaultValue=false)]
        public ClashRewardSpec RewardSpec { get; set; }

        /// <summary>
        /// Gets or Sets RewardType
        /// </summary>
        [DataMember(Name="rewardType", EmitDefaultValue=false)]
        public string RewardType { get; set; }

        /// <summary>
        /// Gets or Sets SeasonId
        /// </summary>
        [DataMember(Name="seasonId", EmitDefaultValue=false)]
        public int? SeasonId { get; set; }

        /// <summary>
        /// Gets or Sets TeamLogoChromaId
        /// </summary>
        [DataMember(Name="teamLogoChromaId", EmitDefaultValue=false)]
        public string TeamLogoChromaId { get; set; }

        /// <summary>
        /// Gets or Sets TeamLogoName
        /// </summary>
        [DataMember(Name="teamLogoName", EmitDefaultValue=false)]
        public string TeamLogoName { get; set; }

        /// <summary>
        /// Gets or Sets TeamName
        /// </summary>
        [DataMember(Name="teamName", EmitDefaultValue=false)]
        public string TeamName { get; set; }

        /// <summary>
        /// Gets or Sets Theme
        /// </summary>
        [DataMember(Name="theme", EmitDefaultValue=false)]
        public string Theme { get; set; }

        /// <summary>
        /// Gets or Sets Tier
        /// </summary>
        [DataMember(Name="tier", EmitDefaultValue=false)]
        public string Tier { get; set; }

        /// <summary>
        /// Gets or Sets TournamentId
        /// </summary>
        [DataMember(Name="tournamentId", EmitDefaultValue=false)]
        public long? TournamentId { get; set; }

        /// <summary>
        /// Gets or Sets TournamentName
        /// </summary>
        [DataMember(Name="tournamentName", EmitDefaultValue=false)]
        public string TournamentName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClashEventData {\n");
            sb.Append("  Bracket: ").Append(Bracket).Append("\n");
            sb.Append("  EarnedDate: ").Append(EarnedDate).Append("\n");
            sb.Append("  PlayerUUIDs: ").Append(PlayerUUIDs).Append("\n");
            sb.Append("  RewardSpec: ").Append(RewardSpec).Append("\n");
            sb.Append("  RewardType: ").Append(RewardType).Append("\n");
            sb.Append("  SeasonId: ").Append(SeasonId).Append("\n");
            sb.Append("  TeamLogoChromaId: ").Append(TeamLogoChromaId).Append("\n");
            sb.Append("  TeamLogoName: ").Append(TeamLogoName).Append("\n");
            sb.Append("  TeamName: ").Append(TeamName).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  TournamentId: ").Append(TournamentId).Append("\n");
            sb.Append("  TournamentName: ").Append(TournamentName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ClashEventData);
        }

        /// <summary>
        /// Returns true if ClashEventData instances are equal
        /// </summary>
        /// <param name="other">Instance of ClashEventData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClashEventData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Bracket == other.Bracket ||
                    this.Bracket != null &&
                    this.Bracket.Equals(other.Bracket)
                ) && 
                (
                    this.EarnedDate == other.EarnedDate ||
                    this.EarnedDate != null &&
                    this.EarnedDate.Equals(other.EarnedDate)
                ) && 
                (
                    this.PlayerUUIDs == other.PlayerUUIDs ||
                    this.PlayerUUIDs != null &&
                    this.PlayerUUIDs.SequenceEqual(other.PlayerUUIDs)
                ) && 
                (
                    this.RewardSpec == other.RewardSpec ||
                    this.RewardSpec != null &&
                    this.RewardSpec.Equals(other.RewardSpec)
                ) && 
                (
                    this.RewardType == other.RewardType ||
                    this.RewardType != null &&
                    this.RewardType.Equals(other.RewardType)
                ) && 
                (
                    this.SeasonId == other.SeasonId ||
                    this.SeasonId != null &&
                    this.SeasonId.Equals(other.SeasonId)
                ) && 
                (
                    this.TeamLogoChromaId == other.TeamLogoChromaId ||
                    this.TeamLogoChromaId != null &&
                    this.TeamLogoChromaId.Equals(other.TeamLogoChromaId)
                ) && 
                (
                    this.TeamLogoName == other.TeamLogoName ||
                    this.TeamLogoName != null &&
                    this.TeamLogoName.Equals(other.TeamLogoName)
                ) && 
                (
                    this.TeamName == other.TeamName ||
                    this.TeamName != null &&
                    this.TeamName.Equals(other.TeamName)
                ) && 
                (
                    this.Theme == other.Theme ||
                    this.Theme != null &&
                    this.Theme.Equals(other.Theme)
                ) && 
                (
                    this.Tier == other.Tier ||
                    this.Tier != null &&
                    this.Tier.Equals(other.Tier)
                ) && 
                (
                    this.TournamentId == other.TournamentId ||
                    this.TournamentId != null &&
                    this.TournamentId.Equals(other.TournamentId)
                ) && 
                (
                    this.TournamentName == other.TournamentName ||
                    this.TournamentName != null &&
                    this.TournamentName.Equals(other.TournamentName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Bracket != null)
                    hash = hash * 59 + this.Bracket.GetHashCode();
                if (this.EarnedDate != null)
                    hash = hash * 59 + this.EarnedDate.GetHashCode();
                if (this.PlayerUUIDs != null)
                    hash = hash * 59 + this.PlayerUUIDs.GetHashCode();
                if (this.RewardSpec != null)
                    hash = hash * 59 + this.RewardSpec.GetHashCode();
                if (this.RewardType != null)
                    hash = hash * 59 + this.RewardType.GetHashCode();
                if (this.SeasonId != null)
                    hash = hash * 59 + this.SeasonId.GetHashCode();
                if (this.TeamLogoChromaId != null)
                    hash = hash * 59 + this.TeamLogoChromaId.GetHashCode();
                if (this.TeamLogoName != null)
                    hash = hash * 59 + this.TeamLogoName.GetHashCode();
                if (this.TeamName != null)
                    hash = hash * 59 + this.TeamName.GetHashCode();
                if (this.Theme != null)
                    hash = hash * 59 + this.Theme.GetHashCode();
                if (this.Tier != null)
                    hash = hash * 59 + this.Tier.GetHashCode();
                if (this.TournamentId != null)
                    hash = hash * 59 + this.TournamentId.GetHashCode();
                if (this.TournamentName != null)
                    hash = hash * 59 + this.TournamentName.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
