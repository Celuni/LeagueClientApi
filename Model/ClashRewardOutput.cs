/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// ClashRewardOutput
    /// </summary>
    [DataContract]
    public partial class ClashRewardOutput :  IEquatable<ClashRewardOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClashRewardOutput" /> class.
        /// </summary>
        /// <param name="Alternative">Alternative.</param>
        /// <param name="Grant">Grant.</param>
        /// <param name="Primary">Primary.</param>
        /// <param name="Show">Show.</param>
        public ClashRewardOutput(ClashRewardDefinition Alternative = default(ClashRewardDefinition), ClashRewardTime Grant = default(ClashRewardTime), ClashRewardDefinition Primary = default(ClashRewardDefinition), ClashRewardTime Show = default(ClashRewardTime))
        {
            this.Alternative = Alternative;
            this.Grant = Grant;
            this.Primary = Primary;
            this.Show = Show;
        }
        
        /// <summary>
        /// Gets or Sets Alternative
        /// </summary>
        [DataMember(Name="alternative", EmitDefaultValue=false)]
        public ClashRewardDefinition Alternative { get; set; }

        /// <summary>
        /// Gets or Sets Grant
        /// </summary>
        [DataMember(Name="grant", EmitDefaultValue=false)]
        public ClashRewardTime Grant { get; set; }

        /// <summary>
        /// Gets or Sets Primary
        /// </summary>
        [DataMember(Name="primary", EmitDefaultValue=false)]
        public ClashRewardDefinition Primary { get; set; }

        /// <summary>
        /// Gets or Sets Show
        /// </summary>
        [DataMember(Name="show", EmitDefaultValue=false)]
        public ClashRewardTime Show { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClashRewardOutput {\n");
            sb.Append("  Alternative: ").Append(Alternative).Append("\n");
            sb.Append("  Grant: ").Append(Grant).Append("\n");
            sb.Append("  Primary: ").Append(Primary).Append("\n");
            sb.Append("  Show: ").Append(Show).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ClashRewardOutput);
        }

        /// <summary>
        /// Returns true if ClashRewardOutput instances are equal
        /// </summary>
        /// <param name="other">Instance of ClashRewardOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClashRewardOutput other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Alternative == other.Alternative ||
                    this.Alternative != null &&
                    this.Alternative.Equals(other.Alternative)
                ) && 
                (
                    this.Grant == other.Grant ||
                    this.Grant != null &&
                    this.Grant.Equals(other.Grant)
                ) && 
                (
                    this.Primary == other.Primary ||
                    this.Primary != null &&
                    this.Primary.Equals(other.Primary)
                ) && 
                (
                    this.Show == other.Show ||
                    this.Show != null &&
                    this.Show.Equals(other.Show)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Alternative != null)
                    hash = hash * 59 + this.Alternative.GetHashCode();
                if (this.Grant != null)
                    hash = hash * 59 + this.Grant.GetHashCode();
                if (this.Primary != null)
                    hash = hash * 59 + this.Primary.GetHashCode();
                if (this.Show != null)
                    hash = hash * 59 + this.Show.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
