/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// ClashRewardSpec
    /// </summary>
    [DataContract]
    public partial class ClashRewardSpec :  IEquatable<ClashRewardSpec>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClashRewardSpec" /> class.
        /// </summary>
        /// <param name="Bracket">Bracket.</param>
        /// <param name="Cup">Cup.</param>
        /// <param name="Gem">Gem.</param>
        /// <param name="Level">Level.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Pedestal">Pedestal.</param>
        /// <param name="Quantity">Quantity.</param>
        /// <param name="SeasonId">SeasonId.</param>
        /// <param name="Theme">Theme.</param>
        /// <param name="Tier">Tier.</param>
        public ClashRewardSpec(string Bracket = default(string), string Cup = default(string), string Gem = default(string), string Level = default(string), string Name = default(string), string Pedestal = default(string), string Quantity = default(string), string SeasonId = default(string), string Theme = default(string), string Tier = default(string))
        {
            this.Bracket = Bracket;
            this.Cup = Cup;
            this.Gem = Gem;
            this.Level = Level;
            this.Name = Name;
            this.Pedestal = Pedestal;
            this.Quantity = Quantity;
            this.SeasonId = SeasonId;
            this.Theme = Theme;
            this.Tier = Tier;
        }
        
        /// <summary>
        /// Gets or Sets Bracket
        /// </summary>
        [DataMember(Name="bracket", EmitDefaultValue=false)]
        public string Bracket { get; set; }

        /// <summary>
        /// Gets or Sets Cup
        /// </summary>
        [DataMember(Name="cup", EmitDefaultValue=false)]
        public string Cup { get; set; }

        /// <summary>
        /// Gets or Sets Gem
        /// </summary>
        [DataMember(Name="gem", EmitDefaultValue=false)]
        public string Gem { get; set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name="level", EmitDefaultValue=false)]
        public string Level { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Pedestal
        /// </summary>
        [DataMember(Name="pedestal", EmitDefaultValue=false)]
        public string Pedestal { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public string Quantity { get; set; }

        /// <summary>
        /// Gets or Sets SeasonId
        /// </summary>
        [DataMember(Name="seasonId", EmitDefaultValue=false)]
        public string SeasonId { get; set; }

        /// <summary>
        /// Gets or Sets Theme
        /// </summary>
        [DataMember(Name="theme", EmitDefaultValue=false)]
        public string Theme { get; set; }

        /// <summary>
        /// Gets or Sets Tier
        /// </summary>
        [DataMember(Name="tier", EmitDefaultValue=false)]
        public string Tier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClashRewardSpec {\n");
            sb.Append("  Bracket: ").Append(Bracket).Append("\n");
            sb.Append("  Cup: ").Append(Cup).Append("\n");
            sb.Append("  Gem: ").Append(Gem).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Pedestal: ").Append(Pedestal).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  SeasonId: ").Append(SeasonId).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ClashRewardSpec);
        }

        /// <summary>
        /// Returns true if ClashRewardSpec instances are equal
        /// </summary>
        /// <param name="other">Instance of ClashRewardSpec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClashRewardSpec other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Bracket == other.Bracket ||
                    this.Bracket != null &&
                    this.Bracket.Equals(other.Bracket)
                ) && 
                (
                    this.Cup == other.Cup ||
                    this.Cup != null &&
                    this.Cup.Equals(other.Cup)
                ) && 
                (
                    this.Gem == other.Gem ||
                    this.Gem != null &&
                    this.Gem.Equals(other.Gem)
                ) && 
                (
                    this.Level == other.Level ||
                    this.Level != null &&
                    this.Level.Equals(other.Level)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Pedestal == other.Pedestal ||
                    this.Pedestal != null &&
                    this.Pedestal.Equals(other.Pedestal)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                ) && 
                (
                    this.SeasonId == other.SeasonId ||
                    this.SeasonId != null &&
                    this.SeasonId.Equals(other.SeasonId)
                ) && 
                (
                    this.Theme == other.Theme ||
                    this.Theme != null &&
                    this.Theme.Equals(other.Theme)
                ) && 
                (
                    this.Tier == other.Tier ||
                    this.Tier != null &&
                    this.Tier.Equals(other.Tier)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Bracket != null)
                    hash = hash * 59 + this.Bracket.GetHashCode();
                if (this.Cup != null)
                    hash = hash * 59 + this.Cup.GetHashCode();
                if (this.Gem != null)
                    hash = hash * 59 + this.Gem.GetHashCode();
                if (this.Level != null)
                    hash = hash * 59 + this.Level.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Pedestal != null)
                    hash = hash * 59 + this.Pedestal.GetHashCode();
                if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                if (this.SeasonId != null)
                    hash = hash * 59 + this.SeasonId.GetHashCode();
                if (this.Theme != null)
                    hash = hash * 59 + this.Theme.GetHashCode();
                if (this.Tier != null)
                    hash = hash * 59 + this.Tier.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
