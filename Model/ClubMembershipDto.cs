/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// ClubMembershipDto
    /// </summary>
    [DataContract]
    public partial class ClubMembershipDto :  IEquatable<ClubMembershipDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClubMembershipDto" /> class.
        /// </summary>
        /// <param name="ActiveMembers">ActiveMembers.</param>
        /// <param name="ClubKey">ClubKey.</param>
        /// <param name="InvitedMembers">InvitedMembers.</param>
        /// <param name="NominatedMembers">NominatedMembers.</param>
        /// <param name="RemovedMembers">RemovedMembers.</param>
        public ClubMembershipDto(List<MemberSinceDto> ActiveMembers = default(List<MemberSinceDto>), string ClubKey = default(string), List<MemberSinceDto> InvitedMembers = default(List<MemberSinceDto>), List<MemberSinceDto> NominatedMembers = default(List<MemberSinceDto>), List<MemberSinceDto> RemovedMembers = default(List<MemberSinceDto>))
        {
            this.ActiveMembers = ActiveMembers;
            this.ClubKey = ClubKey;
            this.InvitedMembers = InvitedMembers;
            this.NominatedMembers = NominatedMembers;
            this.RemovedMembers = RemovedMembers;
        }
        
        /// <summary>
        /// Gets or Sets ActiveMembers
        /// </summary>
        [DataMember(Name="activeMembers", EmitDefaultValue=false)]
        public List<MemberSinceDto> ActiveMembers { get; set; }

        /// <summary>
        /// Gets or Sets ClubKey
        /// </summary>
        [DataMember(Name="clubKey", EmitDefaultValue=false)]
        public string ClubKey { get; set; }

        /// <summary>
        /// Gets or Sets InvitedMembers
        /// </summary>
        [DataMember(Name="invitedMembers", EmitDefaultValue=false)]
        public List<MemberSinceDto> InvitedMembers { get; set; }

        /// <summary>
        /// Gets or Sets NominatedMembers
        /// </summary>
        [DataMember(Name="nominatedMembers", EmitDefaultValue=false)]
        public List<MemberSinceDto> NominatedMembers { get; set; }

        /// <summary>
        /// Gets or Sets RemovedMembers
        /// </summary>
        [DataMember(Name="removedMembers", EmitDefaultValue=false)]
        public List<MemberSinceDto> RemovedMembers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClubMembershipDto {\n");
            sb.Append("  ActiveMembers: ").Append(ActiveMembers).Append("\n");
            sb.Append("  ClubKey: ").Append(ClubKey).Append("\n");
            sb.Append("  InvitedMembers: ").Append(InvitedMembers).Append("\n");
            sb.Append("  NominatedMembers: ").Append(NominatedMembers).Append("\n");
            sb.Append("  RemovedMembers: ").Append(RemovedMembers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ClubMembershipDto);
        }

        /// <summary>
        /// Returns true if ClubMembershipDto instances are equal
        /// </summary>
        /// <param name="other">Instance of ClubMembershipDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClubMembershipDto other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ActiveMembers == other.ActiveMembers ||
                    this.ActiveMembers != null &&
                    this.ActiveMembers.SequenceEqual(other.ActiveMembers)
                ) && 
                (
                    this.ClubKey == other.ClubKey ||
                    this.ClubKey != null &&
                    this.ClubKey.Equals(other.ClubKey)
                ) && 
                (
                    this.InvitedMembers == other.InvitedMembers ||
                    this.InvitedMembers != null &&
                    this.InvitedMembers.SequenceEqual(other.InvitedMembers)
                ) && 
                (
                    this.NominatedMembers == other.NominatedMembers ||
                    this.NominatedMembers != null &&
                    this.NominatedMembers.SequenceEqual(other.NominatedMembers)
                ) && 
                (
                    this.RemovedMembers == other.RemovedMembers ||
                    this.RemovedMembers != null &&
                    this.RemovedMembers.SequenceEqual(other.RemovedMembers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ActiveMembers != null)
                    hash = hash * 59 + this.ActiveMembers.GetHashCode();
                if (this.ClubKey != null)
                    hash = hash * 59 + this.ClubKey.GetHashCode();
                if (this.InvitedMembers != null)
                    hash = hash * 59 + this.InvitedMembers.GetHashCode();
                if (this.NominatedMembers != null)
                    hash = hash * 59 + this.NominatedMembers.GetHashCode();
                if (this.RemovedMembers != null)
                    hash = hash * 59 + this.RemovedMembers.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
