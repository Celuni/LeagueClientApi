/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// ClubPermissions
    /// </summary>
    [DataContract]
    public partial class ClubPermissions :  IEquatable<ClubPermissions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClubPermissions" /> class.
        /// </summary>
        /// <param name="ADMIN">ADMIN.</param>
        /// <param name="INVITEE">INVITEE.</param>
        /// <param name="MEMBER">MEMBER.</param>
        /// <param name="OFFICER">OFFICER.</param>
        /// <param name="OWNER">OWNER.</param>
        /// <param name="UNKNOWN">UNKNOWN.</param>
        public ClubPermissions(List<string> ADMIN = default(List<string>), List<string> INVITEE = default(List<string>), List<string> MEMBER = default(List<string>), List<string> OFFICER = default(List<string>), List<string> OWNER = default(List<string>), List<string> UNKNOWN = default(List<string>))
        {
            this.ADMIN = ADMIN;
            this.INVITEE = INVITEE;
            this.MEMBER = MEMBER;
            this.OFFICER = OFFICER;
            this.OWNER = OWNER;
            this.UNKNOWN = UNKNOWN;
        }
        
        /// <summary>
        /// Gets or Sets ADMIN
        /// </summary>
        [DataMember(Name="ADMIN", EmitDefaultValue=false)]
        public List<string> ADMIN { get; set; }

        /// <summary>
        /// Gets or Sets INVITEE
        /// </summary>
        [DataMember(Name="INVITEE", EmitDefaultValue=false)]
        public List<string> INVITEE { get; set; }

        /// <summary>
        /// Gets or Sets MEMBER
        /// </summary>
        [DataMember(Name="MEMBER", EmitDefaultValue=false)]
        public List<string> MEMBER { get; set; }

        /// <summary>
        /// Gets or Sets OFFICER
        /// </summary>
        [DataMember(Name="OFFICER", EmitDefaultValue=false)]
        public List<string> OFFICER { get; set; }

        /// <summary>
        /// Gets or Sets OWNER
        /// </summary>
        [DataMember(Name="OWNER", EmitDefaultValue=false)]
        public List<string> OWNER { get; set; }

        /// <summary>
        /// Gets or Sets UNKNOWN
        /// </summary>
        [DataMember(Name="UNKNOWN", EmitDefaultValue=false)]
        public List<string> UNKNOWN { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClubPermissions {\n");
            sb.Append("  ADMIN: ").Append(ADMIN).Append("\n");
            sb.Append("  INVITEE: ").Append(INVITEE).Append("\n");
            sb.Append("  MEMBER: ").Append(MEMBER).Append("\n");
            sb.Append("  OFFICER: ").Append(OFFICER).Append("\n");
            sb.Append("  OWNER: ").Append(OWNER).Append("\n");
            sb.Append("  UNKNOWN: ").Append(UNKNOWN).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ClubPermissions);
        }

        /// <summary>
        /// Returns true if ClubPermissions instances are equal
        /// </summary>
        /// <param name="other">Instance of ClubPermissions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClubPermissions other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ADMIN == other.ADMIN ||
                    this.ADMIN != null &&
                    this.ADMIN.SequenceEqual(other.ADMIN)
                ) && 
                (
                    this.INVITEE == other.INVITEE ||
                    this.INVITEE != null &&
                    this.INVITEE.SequenceEqual(other.INVITEE)
                ) && 
                (
                    this.MEMBER == other.MEMBER ||
                    this.MEMBER != null &&
                    this.MEMBER.SequenceEqual(other.MEMBER)
                ) && 
                (
                    this.OFFICER == other.OFFICER ||
                    this.OFFICER != null &&
                    this.OFFICER.SequenceEqual(other.OFFICER)
                ) && 
                (
                    this.OWNER == other.OWNER ||
                    this.OWNER != null &&
                    this.OWNER.SequenceEqual(other.OWNER)
                ) && 
                (
                    this.UNKNOWN == other.UNKNOWN ||
                    this.UNKNOWN != null &&
                    this.UNKNOWN.SequenceEqual(other.UNKNOWN)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ADMIN != null)
                    hash = hash * 59 + this.ADMIN.GetHashCode();
                if (this.INVITEE != null)
                    hash = hash * 59 + this.INVITEE.GetHashCode();
                if (this.MEMBER != null)
                    hash = hash * 59 + this.MEMBER.GetHashCode();
                if (this.OFFICER != null)
                    hash = hash * 59 + this.OFFICER.GetHashCode();
                if (this.OWNER != null)
                    hash = hash * 59 + this.OWNER.GetHashCode();
                if (this.UNKNOWN != null)
                    hash = hash * 59 + this.UNKNOWN.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
