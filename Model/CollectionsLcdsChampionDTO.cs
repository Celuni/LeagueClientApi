/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// CollectionsLcdsChampionDTO
    /// </summary>
    [DataContract]
    public partial class CollectionsLcdsChampionDTO :  IEquatable<CollectionsLcdsChampionDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsLcdsChampionDTO" /> class.
        /// </summary>
        /// <param name="Active">Active.</param>
        /// <param name="BotEnabled">BotEnabled.</param>
        /// <param name="ChampionId">ChampionId.</param>
        /// <param name="ChampionSkins">ChampionSkins.</param>
        /// <param name="EndDate">EndDate.</param>
        /// <param name="FreeToPlay">FreeToPlay.</param>
        /// <param name="FreeToPlayReward">FreeToPlayReward.</param>
        /// <param name="Owned">Owned.</param>
        /// <param name="PurchaseDate">PurchaseDate.</param>
        /// <param name="Purchased">Purchased.</param>
        /// <param name="RankedPlayEnabled">RankedPlayEnabled.</param>
        /// <param name="Sources">Sources.</param>
        /// <param name="WinCountRemaining">WinCountRemaining.</param>
        public CollectionsLcdsChampionDTO(bool? Active = default(bool?), bool? BotEnabled = default(bool?), int? ChampionId = default(int?), List<CollectionsLcdsChampionSkinDTO> ChampionSkins = default(List<CollectionsLcdsChampionSkinDTO>), long? EndDate = default(long?), bool? FreeToPlay = default(bool?), bool? FreeToPlayReward = default(bool?), bool? Owned = default(bool?), long? PurchaseDate = default(long?), long? Purchased = default(long?), bool? RankedPlayEnabled = default(bool?), List<string> Sources = default(List<string>), int? WinCountRemaining = default(int?))
        {
            this.Active = Active;
            this.BotEnabled = BotEnabled;
            this.ChampionId = ChampionId;
            this.ChampionSkins = ChampionSkins;
            this.EndDate = EndDate;
            this.FreeToPlay = FreeToPlay;
            this.FreeToPlayReward = FreeToPlayReward;
            this.Owned = Owned;
            this.PurchaseDate = PurchaseDate;
            this.Purchased = Purchased;
            this.RankedPlayEnabled = RankedPlayEnabled;
            this.Sources = Sources;
            this.WinCountRemaining = WinCountRemaining;
        }
        
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or Sets BotEnabled
        /// </summary>
        [DataMember(Name="botEnabled", EmitDefaultValue=false)]
        public bool? BotEnabled { get; set; }

        /// <summary>
        /// Gets or Sets ChampionId
        /// </summary>
        [DataMember(Name="championId", EmitDefaultValue=false)]
        public int? ChampionId { get; set; }

        /// <summary>
        /// Gets or Sets ChampionSkins
        /// </summary>
        [DataMember(Name="championSkins", EmitDefaultValue=false)]
        public List<CollectionsLcdsChampionSkinDTO> ChampionSkins { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public long? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets FreeToPlay
        /// </summary>
        [DataMember(Name="freeToPlay", EmitDefaultValue=false)]
        public bool? FreeToPlay { get; set; }

        /// <summary>
        /// Gets or Sets FreeToPlayReward
        /// </summary>
        [DataMember(Name="freeToPlayReward", EmitDefaultValue=false)]
        public bool? FreeToPlayReward { get; set; }

        /// <summary>
        /// Gets or Sets Owned
        /// </summary>
        [DataMember(Name="owned", EmitDefaultValue=false)]
        public bool? Owned { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseDate
        /// </summary>
        [DataMember(Name="purchaseDate", EmitDefaultValue=false)]
        public long? PurchaseDate { get; set; }

        /// <summary>
        /// Gets or Sets Purchased
        /// </summary>
        [DataMember(Name="purchased", EmitDefaultValue=false)]
        public long? Purchased { get; set; }

        /// <summary>
        /// Gets or Sets RankedPlayEnabled
        /// </summary>
        [DataMember(Name="rankedPlayEnabled", EmitDefaultValue=false)]
        public bool? RankedPlayEnabled { get; set; }

        /// <summary>
        /// Gets or Sets Sources
        /// </summary>
        [DataMember(Name="sources", EmitDefaultValue=false)]
        public List<string> Sources { get; set; }

        /// <summary>
        /// Gets or Sets WinCountRemaining
        /// </summary>
        [DataMember(Name="winCountRemaining", EmitDefaultValue=false)]
        public int? WinCountRemaining { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CollectionsLcdsChampionDTO {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  BotEnabled: ").Append(BotEnabled).Append("\n");
            sb.Append("  ChampionId: ").Append(ChampionId).Append("\n");
            sb.Append("  ChampionSkins: ").Append(ChampionSkins).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  FreeToPlay: ").Append(FreeToPlay).Append("\n");
            sb.Append("  FreeToPlayReward: ").Append(FreeToPlayReward).Append("\n");
            sb.Append("  Owned: ").Append(Owned).Append("\n");
            sb.Append("  PurchaseDate: ").Append(PurchaseDate).Append("\n");
            sb.Append("  Purchased: ").Append(Purchased).Append("\n");
            sb.Append("  RankedPlayEnabled: ").Append(RankedPlayEnabled).Append("\n");
            sb.Append("  Sources: ").Append(Sources).Append("\n");
            sb.Append("  WinCountRemaining: ").Append(WinCountRemaining).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CollectionsLcdsChampionDTO);
        }

        /// <summary>
        /// Returns true if CollectionsLcdsChampionDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of CollectionsLcdsChampionDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CollectionsLcdsChampionDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Active == other.Active ||
                    this.Active != null &&
                    this.Active.Equals(other.Active)
                ) && 
                (
                    this.BotEnabled == other.BotEnabled ||
                    this.BotEnabled != null &&
                    this.BotEnabled.Equals(other.BotEnabled)
                ) && 
                (
                    this.ChampionId == other.ChampionId ||
                    this.ChampionId != null &&
                    this.ChampionId.Equals(other.ChampionId)
                ) && 
                (
                    this.ChampionSkins == other.ChampionSkins ||
                    this.ChampionSkins != null &&
                    this.ChampionSkins.SequenceEqual(other.ChampionSkins)
                ) && 
                (
                    this.EndDate == other.EndDate ||
                    this.EndDate != null &&
                    this.EndDate.Equals(other.EndDate)
                ) && 
                (
                    this.FreeToPlay == other.FreeToPlay ||
                    this.FreeToPlay != null &&
                    this.FreeToPlay.Equals(other.FreeToPlay)
                ) && 
                (
                    this.FreeToPlayReward == other.FreeToPlayReward ||
                    this.FreeToPlayReward != null &&
                    this.FreeToPlayReward.Equals(other.FreeToPlayReward)
                ) && 
                (
                    this.Owned == other.Owned ||
                    this.Owned != null &&
                    this.Owned.Equals(other.Owned)
                ) && 
                (
                    this.PurchaseDate == other.PurchaseDate ||
                    this.PurchaseDate != null &&
                    this.PurchaseDate.Equals(other.PurchaseDate)
                ) && 
                (
                    this.Purchased == other.Purchased ||
                    this.Purchased != null &&
                    this.Purchased.Equals(other.Purchased)
                ) && 
                (
                    this.RankedPlayEnabled == other.RankedPlayEnabled ||
                    this.RankedPlayEnabled != null &&
                    this.RankedPlayEnabled.Equals(other.RankedPlayEnabled)
                ) && 
                (
                    this.Sources == other.Sources ||
                    this.Sources != null &&
                    this.Sources.SequenceEqual(other.Sources)
                ) && 
                (
                    this.WinCountRemaining == other.WinCountRemaining ||
                    this.WinCountRemaining != null &&
                    this.WinCountRemaining.Equals(other.WinCountRemaining)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Active != null)
                    hash = hash * 59 + this.Active.GetHashCode();
                if (this.BotEnabled != null)
                    hash = hash * 59 + this.BotEnabled.GetHashCode();
                if (this.ChampionId != null)
                    hash = hash * 59 + this.ChampionId.GetHashCode();
                if (this.ChampionSkins != null)
                    hash = hash * 59 + this.ChampionSkins.GetHashCode();
                if (this.EndDate != null)
                    hash = hash * 59 + this.EndDate.GetHashCode();
                if (this.FreeToPlay != null)
                    hash = hash * 59 + this.FreeToPlay.GetHashCode();
                if (this.FreeToPlayReward != null)
                    hash = hash * 59 + this.FreeToPlayReward.GetHashCode();
                if (this.Owned != null)
                    hash = hash * 59 + this.Owned.GetHashCode();
                if (this.PurchaseDate != null)
                    hash = hash * 59 + this.PurchaseDate.GetHashCode();
                if (this.Purchased != null)
                    hash = hash * 59 + this.Purchased.GetHashCode();
                if (this.RankedPlayEnabled != null)
                    hash = hash * 59 + this.RankedPlayEnabled.GetHashCode();
                if (this.Sources != null)
                    hash = hash * 59 + this.Sources.GetHashCode();
                if (this.WinCountRemaining != null)
                    hash = hash * 59 + this.WinCountRemaining.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
