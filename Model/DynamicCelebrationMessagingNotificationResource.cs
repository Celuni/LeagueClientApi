/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// DynamicCelebrationMessagingNotificationResource
    /// </summary>
    [DataContract]
    public partial class DynamicCelebrationMessagingNotificationResource :  IEquatable<DynamicCelebrationMessagingNotificationResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicCelebrationMessagingNotificationResource" /> class.
        /// </summary>
        /// <param name="CelebrationBody">CelebrationBody.</param>
        /// <param name="CelebrationMessage">CelebrationMessage.</param>
        /// <param name="CelebrationTitle">CelebrationTitle.</param>
        /// <param name="CelebrationType">CelebrationType.</param>
        /// <param name="Id">Id.</param>
        /// <param name="InventoryType">InventoryType.</param>
        /// <param name="ItemId">ItemId.</param>
        /// <param name="ItemQuantity">ItemQuantity.</param>
        /// <param name="MsgId">MsgId.</param>
        /// <param name="Status">Status.</param>
        public DynamicCelebrationMessagingNotificationResource(string CelebrationBody = default(string), string CelebrationMessage = default(string), string CelebrationTitle = default(string), string CelebrationType = default(string), int? Id = default(int?), string InventoryType = default(string), string ItemId = default(string), string ItemQuantity = default(string), string MsgId = default(string), int? Status = default(int?))
        {
            this.CelebrationBody = CelebrationBody;
            this.CelebrationMessage = CelebrationMessage;
            this.CelebrationTitle = CelebrationTitle;
            this.CelebrationType = CelebrationType;
            this.Id = Id;
            this.InventoryType = InventoryType;
            this.ItemId = ItemId;
            this.ItemQuantity = ItemQuantity;
            this.MsgId = MsgId;
            this.Status = Status;
        }
        
        /// <summary>
        /// Gets or Sets CelebrationBody
        /// </summary>
        [DataMember(Name="celebrationBody", EmitDefaultValue=false)]
        public string CelebrationBody { get; set; }

        /// <summary>
        /// Gets or Sets CelebrationMessage
        /// </summary>
        [DataMember(Name="celebrationMessage", EmitDefaultValue=false)]
        public string CelebrationMessage { get; set; }

        /// <summary>
        /// Gets or Sets CelebrationTitle
        /// </summary>
        [DataMember(Name="celebrationTitle", EmitDefaultValue=false)]
        public string CelebrationTitle { get; set; }

        /// <summary>
        /// Gets or Sets CelebrationType
        /// </summary>
        [DataMember(Name="celebrationType", EmitDefaultValue=false)]
        public string CelebrationType { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets InventoryType
        /// </summary>
        [DataMember(Name="inventoryType", EmitDefaultValue=false)]
        public string InventoryType { get; set; }

        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name="itemId", EmitDefaultValue=false)]
        public string ItemId { get; set; }

        /// <summary>
        /// Gets or Sets ItemQuantity
        /// </summary>
        [DataMember(Name="itemQuantity", EmitDefaultValue=false)]
        public string ItemQuantity { get; set; }

        /// <summary>
        /// Gets or Sets MsgId
        /// </summary>
        [DataMember(Name="msgId", EmitDefaultValue=false)]
        public string MsgId { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DynamicCelebrationMessagingNotificationResource {\n");
            sb.Append("  CelebrationBody: ").Append(CelebrationBody).Append("\n");
            sb.Append("  CelebrationMessage: ").Append(CelebrationMessage).Append("\n");
            sb.Append("  CelebrationTitle: ").Append(CelebrationTitle).Append("\n");
            sb.Append("  CelebrationType: ").Append(CelebrationType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InventoryType: ").Append(InventoryType).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  ItemQuantity: ").Append(ItemQuantity).Append("\n");
            sb.Append("  MsgId: ").Append(MsgId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DynamicCelebrationMessagingNotificationResource);
        }

        /// <summary>
        /// Returns true if DynamicCelebrationMessagingNotificationResource instances are equal
        /// </summary>
        /// <param name="other">Instance of DynamicCelebrationMessagingNotificationResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DynamicCelebrationMessagingNotificationResource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CelebrationBody == other.CelebrationBody ||
                    this.CelebrationBody != null &&
                    this.CelebrationBody.Equals(other.CelebrationBody)
                ) && 
                (
                    this.CelebrationMessage == other.CelebrationMessage ||
                    this.CelebrationMessage != null &&
                    this.CelebrationMessage.Equals(other.CelebrationMessage)
                ) && 
                (
                    this.CelebrationTitle == other.CelebrationTitle ||
                    this.CelebrationTitle != null &&
                    this.CelebrationTitle.Equals(other.CelebrationTitle)
                ) && 
                (
                    this.CelebrationType == other.CelebrationType ||
                    this.CelebrationType != null &&
                    this.CelebrationType.Equals(other.CelebrationType)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.InventoryType == other.InventoryType ||
                    this.InventoryType != null &&
                    this.InventoryType.Equals(other.InventoryType)
                ) && 
                (
                    this.ItemId == other.ItemId ||
                    this.ItemId != null &&
                    this.ItemId.Equals(other.ItemId)
                ) && 
                (
                    this.ItemQuantity == other.ItemQuantity ||
                    this.ItemQuantity != null &&
                    this.ItemQuantity.Equals(other.ItemQuantity)
                ) && 
                (
                    this.MsgId == other.MsgId ||
                    this.MsgId != null &&
                    this.MsgId.Equals(other.MsgId)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CelebrationBody != null)
                    hash = hash * 59 + this.CelebrationBody.GetHashCode();
                if (this.CelebrationMessage != null)
                    hash = hash * 59 + this.CelebrationMessage.GetHashCode();
                if (this.CelebrationTitle != null)
                    hash = hash * 59 + this.CelebrationTitle.GetHashCode();
                if (this.CelebrationType != null)
                    hash = hash * 59 + this.CelebrationType.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.InventoryType != null)
                    hash = hash * 59 + this.InventoryType.GetHashCode();
                if (this.ItemId != null)
                    hash = hash * 59 + this.ItemId.GetHashCode();
                if (this.ItemQuantity != null)
                    hash = hash * 59 + this.ItemQuantity.GetHashCode();
                if (this.MsgId != null)
                    hash = hash * 59 + this.MsgId.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
