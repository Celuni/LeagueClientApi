/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// EndOfGameLcdsClientReportV1
    /// </summary>
    [DataContract]
    public partial class EndOfGameLcdsClientReportV1 :  IEquatable<EndOfGameLcdsClientReportV1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EndOfGameLcdsClientReportV1" /> class.
        /// </summary>
        /// <param name="Comments">Comments.</param>
        /// <param name="GameId">GameId.</param>
        /// <param name="OffenderSummonerId">OffenderSummonerId.</param>
        /// <param name="Offenses">Offenses.</param>
        public EndOfGameLcdsClientReportV1(string Comments = default(string), long? GameId = default(long?), long? OffenderSummonerId = default(long?), string Offenses = default(string))
        {
            this.Comments = Comments;
            this.GameId = GameId;
            this.OffenderSummonerId = OffenderSummonerId;
            this.Offenses = Offenses;
        }
        
        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets GameId
        /// </summary>
        [DataMember(Name="gameId", EmitDefaultValue=false)]
        public long? GameId { get; set; }

        /// <summary>
        /// Gets or Sets OffenderSummonerId
        /// </summary>
        [DataMember(Name="offenderSummonerId", EmitDefaultValue=false)]
        public long? OffenderSummonerId { get; set; }

        /// <summary>
        /// Gets or Sets Offenses
        /// </summary>
        [DataMember(Name="offenses", EmitDefaultValue=false)]
        public string Offenses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EndOfGameLcdsClientReportV1 {\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  OffenderSummonerId: ").Append(OffenderSummonerId).Append("\n");
            sb.Append("  Offenses: ").Append(Offenses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as EndOfGameLcdsClientReportV1);
        }

        /// <summary>
        /// Returns true if EndOfGameLcdsClientReportV1 instances are equal
        /// </summary>
        /// <param name="other">Instance of EndOfGameLcdsClientReportV1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EndOfGameLcdsClientReportV1 other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Comments == other.Comments ||
                    this.Comments != null &&
                    this.Comments.Equals(other.Comments)
                ) && 
                (
                    this.GameId == other.GameId ||
                    this.GameId != null &&
                    this.GameId.Equals(other.GameId)
                ) && 
                (
                    this.OffenderSummonerId == other.OffenderSummonerId ||
                    this.OffenderSummonerId != null &&
                    this.OffenderSummonerId.Equals(other.OffenderSummonerId)
                ) && 
                (
                    this.Offenses == other.Offenses ||
                    this.Offenses != null &&
                    this.Offenses.Equals(other.Offenses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Comments != null)
                    hash = hash * 59 + this.Comments.GetHashCode();
                if (this.GameId != null)
                    hash = hash * 59 + this.GameId.GetHashCode();
                if (this.OffenderSummonerId != null)
                    hash = hash * 59 + this.OffenderSummonerId.GetHashCode();
                if (this.Offenses != null)
                    hash = hash * 59 + this.Offenses.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
