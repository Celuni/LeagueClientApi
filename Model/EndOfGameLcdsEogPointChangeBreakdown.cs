/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// EndOfGameLcdsEogPointChangeBreakdown
    /// </summary>
    [DataContract]
    public partial class EndOfGameLcdsEogPointChangeBreakdown :  IEquatable<EndOfGameLcdsEogPointChangeBreakdown>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EndOfGameLcdsEogPointChangeBreakdown" /> class.
        /// </summary>
        /// <param name="EndPoints">EndPoints.</param>
        /// <param name="PointChangeFromChampionsOwned">PointChangeFromChampionsOwned.</param>
        /// <param name="PointChangeFromGameplay">PointChangeFromGameplay.</param>
        /// <param name="PointsUsed">PointsUsed.</param>
        /// <param name="PreviousPoints">PreviousPoints.</param>
        public EndOfGameLcdsEogPointChangeBreakdown(int? EndPoints = default(int?), int? PointChangeFromChampionsOwned = default(int?), int? PointChangeFromGameplay = default(int?), int? PointsUsed = default(int?), int? PreviousPoints = default(int?))
        {
            this.EndPoints = EndPoints;
            this.PointChangeFromChampionsOwned = PointChangeFromChampionsOwned;
            this.PointChangeFromGameplay = PointChangeFromGameplay;
            this.PointsUsed = PointsUsed;
            this.PreviousPoints = PreviousPoints;
        }
        
        /// <summary>
        /// Gets or Sets EndPoints
        /// </summary>
        [DataMember(Name="endPoints", EmitDefaultValue=false)]
        public int? EndPoints { get; set; }

        /// <summary>
        /// Gets or Sets PointChangeFromChampionsOwned
        /// </summary>
        [DataMember(Name="pointChangeFromChampionsOwned", EmitDefaultValue=false)]
        public int? PointChangeFromChampionsOwned { get; set; }

        /// <summary>
        /// Gets or Sets PointChangeFromGameplay
        /// </summary>
        [DataMember(Name="pointChangeFromGameplay", EmitDefaultValue=false)]
        public int? PointChangeFromGameplay { get; set; }

        /// <summary>
        /// Gets or Sets PointsUsed
        /// </summary>
        [DataMember(Name="pointsUsed", EmitDefaultValue=false)]
        public int? PointsUsed { get; set; }

        /// <summary>
        /// Gets or Sets PreviousPoints
        /// </summary>
        [DataMember(Name="previousPoints", EmitDefaultValue=false)]
        public int? PreviousPoints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EndOfGameLcdsEogPointChangeBreakdown {\n");
            sb.Append("  EndPoints: ").Append(EndPoints).Append("\n");
            sb.Append("  PointChangeFromChampionsOwned: ").Append(PointChangeFromChampionsOwned).Append("\n");
            sb.Append("  PointChangeFromGameplay: ").Append(PointChangeFromGameplay).Append("\n");
            sb.Append("  PointsUsed: ").Append(PointsUsed).Append("\n");
            sb.Append("  PreviousPoints: ").Append(PreviousPoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as EndOfGameLcdsEogPointChangeBreakdown);
        }

        /// <summary>
        /// Returns true if EndOfGameLcdsEogPointChangeBreakdown instances are equal
        /// </summary>
        /// <param name="other">Instance of EndOfGameLcdsEogPointChangeBreakdown to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EndOfGameLcdsEogPointChangeBreakdown other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.EndPoints == other.EndPoints ||
                    this.EndPoints != null &&
                    this.EndPoints.Equals(other.EndPoints)
                ) && 
                (
                    this.PointChangeFromChampionsOwned == other.PointChangeFromChampionsOwned ||
                    this.PointChangeFromChampionsOwned != null &&
                    this.PointChangeFromChampionsOwned.Equals(other.PointChangeFromChampionsOwned)
                ) && 
                (
                    this.PointChangeFromGameplay == other.PointChangeFromGameplay ||
                    this.PointChangeFromGameplay != null &&
                    this.PointChangeFromGameplay.Equals(other.PointChangeFromGameplay)
                ) && 
                (
                    this.PointsUsed == other.PointsUsed ||
                    this.PointsUsed != null &&
                    this.PointsUsed.Equals(other.PointsUsed)
                ) && 
                (
                    this.PreviousPoints == other.PreviousPoints ||
                    this.PreviousPoints != null &&
                    this.PreviousPoints.Equals(other.PreviousPoints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.EndPoints != null)
                    hash = hash * 59 + this.EndPoints.GetHashCode();
                if (this.PointChangeFromChampionsOwned != null)
                    hash = hash * 59 + this.PointChangeFromChampionsOwned.GetHashCode();
                if (this.PointChangeFromGameplay != null)
                    hash = hash * 59 + this.PointChangeFromGameplay.GetHashCode();
                if (this.PointsUsed != null)
                    hash = hash * 59 + this.PointsUsed.GetHashCode();
                if (this.PreviousPoints != null)
                    hash = hash * 59 + this.PreviousPoints.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
