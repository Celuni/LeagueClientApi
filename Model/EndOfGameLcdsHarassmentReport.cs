/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// EndOfGameLcdsHarassmentReport
    /// </summary>
    [DataContract]
    public partial class EndOfGameLcdsHarassmentReport :  IEquatable<EndOfGameLcdsHarassmentReport>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EndOfGameLcdsHarassmentReport" /> class.
        /// </summary>
        /// <param name="Comment">Comment.</param>
        /// <param name="GameId">GameId.</param>
        /// <param name="Offense">Offense.</param>
        /// <param name="ReportSource">ReportSource.</param>
        /// <param name="ReportedSummonerId">ReportedSummonerId.</param>
        /// <param name="ReportingSummonerId">ReportingSummonerId.</param>
        public EndOfGameLcdsHarassmentReport(string Comment = default(string), long? GameId = default(long?), string Offense = default(string), string ReportSource = default(string), long? ReportedSummonerId = default(long?), long? ReportingSummonerId = default(long?))
        {
            this.Comment = Comment;
            this.GameId = GameId;
            this.Offense = Offense;
            this.ReportSource = ReportSource;
            this.ReportedSummonerId = ReportedSummonerId;
            this.ReportingSummonerId = ReportingSummonerId;
        }
        
        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets GameId
        /// </summary>
        [DataMember(Name="gameId", EmitDefaultValue=false)]
        public long? GameId { get; set; }

        /// <summary>
        /// Gets or Sets Offense
        /// </summary>
        [DataMember(Name="offense", EmitDefaultValue=false)]
        public string Offense { get; set; }

        /// <summary>
        /// Gets or Sets ReportSource
        /// </summary>
        [DataMember(Name="reportSource", EmitDefaultValue=false)]
        public string ReportSource { get; set; }

        /// <summary>
        /// Gets or Sets ReportedSummonerId
        /// </summary>
        [DataMember(Name="reportedSummonerId", EmitDefaultValue=false)]
        public long? ReportedSummonerId { get; set; }

        /// <summary>
        /// Gets or Sets ReportingSummonerId
        /// </summary>
        [DataMember(Name="reportingSummonerId", EmitDefaultValue=false)]
        public long? ReportingSummonerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EndOfGameLcdsHarassmentReport {\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  Offense: ").Append(Offense).Append("\n");
            sb.Append("  ReportSource: ").Append(ReportSource).Append("\n");
            sb.Append("  ReportedSummonerId: ").Append(ReportedSummonerId).Append("\n");
            sb.Append("  ReportingSummonerId: ").Append(ReportingSummonerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as EndOfGameLcdsHarassmentReport);
        }

        /// <summary>
        /// Returns true if EndOfGameLcdsHarassmentReport instances are equal
        /// </summary>
        /// <param name="other">Instance of EndOfGameLcdsHarassmentReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EndOfGameLcdsHarassmentReport other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Comment == other.Comment ||
                    this.Comment != null &&
                    this.Comment.Equals(other.Comment)
                ) && 
                (
                    this.GameId == other.GameId ||
                    this.GameId != null &&
                    this.GameId.Equals(other.GameId)
                ) && 
                (
                    this.Offense == other.Offense ||
                    this.Offense != null &&
                    this.Offense.Equals(other.Offense)
                ) && 
                (
                    this.ReportSource == other.ReportSource ||
                    this.ReportSource != null &&
                    this.ReportSource.Equals(other.ReportSource)
                ) && 
                (
                    this.ReportedSummonerId == other.ReportedSummonerId ||
                    this.ReportedSummonerId != null &&
                    this.ReportedSummonerId.Equals(other.ReportedSummonerId)
                ) && 
                (
                    this.ReportingSummonerId == other.ReportingSummonerId ||
                    this.ReportingSummonerId != null &&
                    this.ReportingSummonerId.Equals(other.ReportingSummonerId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Comment != null)
                    hash = hash * 59 + this.Comment.GetHashCode();
                if (this.GameId != null)
                    hash = hash * 59 + this.GameId.GetHashCode();
                if (this.Offense != null)
                    hash = hash * 59 + this.Offense.GetHashCode();
                if (this.ReportSource != null)
                    hash = hash * 59 + this.ReportSource.GetHashCode();
                if (this.ReportedSummonerId != null)
                    hash = hash * 59 + this.ReportedSummonerId.GetHashCode();
                if (this.ReportingSummonerId != null)
                    hash = hash * 59 + this.ReportingSummonerId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
