/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// EogLcdsGameDTO
    /// </summary>
    [DataContract]
    public partial class EogLcdsGameDTO :  IEquatable<EogLcdsGameDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EogLcdsGameDTO" /> class.
        /// </summary>
        /// <param name="BannedChampions">BannedChampions.</param>
        /// <param name="GameState">GameState.</param>
        /// <param name="Id">Id.</param>
        /// <param name="TeamOne">TeamOne.</param>
        /// <param name="TeamTwo">TeamTwo.</param>
        public EogLcdsGameDTO(List<BannedChampion> BannedChampions = default(List<BannedChampion>), string GameState = default(string), long? Id = default(long?), List<PlayerParticipant> TeamOne = default(List<PlayerParticipant>), List<PlayerParticipant> TeamTwo = default(List<PlayerParticipant>))
        {
            this.BannedChampions = BannedChampions;
            this.GameState = GameState;
            this.Id = Id;
            this.TeamOne = TeamOne;
            this.TeamTwo = TeamTwo;
        }
        
        /// <summary>
        /// Gets or Sets BannedChampions
        /// </summary>
        [DataMember(Name="bannedChampions", EmitDefaultValue=false)]
        public List<BannedChampion> BannedChampions { get; set; }

        /// <summary>
        /// Gets or Sets GameState
        /// </summary>
        [DataMember(Name="gameState", EmitDefaultValue=false)]
        public string GameState { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets TeamOne
        /// </summary>
        [DataMember(Name="teamOne", EmitDefaultValue=false)]
        public List<PlayerParticipant> TeamOne { get; set; }

        /// <summary>
        /// Gets or Sets TeamTwo
        /// </summary>
        [DataMember(Name="teamTwo", EmitDefaultValue=false)]
        public List<PlayerParticipant> TeamTwo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EogLcdsGameDTO {\n");
            sb.Append("  BannedChampions: ").Append(BannedChampions).Append("\n");
            sb.Append("  GameState: ").Append(GameState).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TeamOne: ").Append(TeamOne).Append("\n");
            sb.Append("  TeamTwo: ").Append(TeamTwo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as EogLcdsGameDTO);
        }

        /// <summary>
        /// Returns true if EogLcdsGameDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of EogLcdsGameDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EogLcdsGameDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BannedChampions == other.BannedChampions ||
                    this.BannedChampions != null &&
                    this.BannedChampions.SequenceEqual(other.BannedChampions)
                ) && 
                (
                    this.GameState == other.GameState ||
                    this.GameState != null &&
                    this.GameState.Equals(other.GameState)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.TeamOne == other.TeamOne ||
                    this.TeamOne != null &&
                    this.TeamOne.SequenceEqual(other.TeamOne)
                ) && 
                (
                    this.TeamTwo == other.TeamTwo ||
                    this.TeamTwo != null &&
                    this.TeamTwo.SequenceEqual(other.TeamTwo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BannedChampions != null)
                    hash = hash * 59 + this.BannedChampions.GetHashCode();
                if (this.GameState != null)
                    hash = hash * 59 + this.GameState.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.TeamOne != null)
                    hash = hash * 59 + this.TeamOne.GetHashCode();
                if (this.TeamTwo != null)
                    hash = hash * 59 + this.TeamTwo.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
