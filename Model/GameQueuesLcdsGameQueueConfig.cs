/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// GameQueuesLcdsGameQueueConfig
    /// </summary>
    [DataContract]
    public partial class GameQueuesLcdsGameQueueConfig :  IEquatable<GameQueuesLcdsGameQueueConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GameQueuesLcdsGameQueueConfig" /> class.
        /// </summary>
        /// <param name="BlockedMinutesThreshold">BlockedMinutesThreshold.</param>
        /// <param name="BotsCanSpawnOnBlueSide">BotsCanSpawnOnBlueSide.</param>
        /// <param name="CacheName">CacheName.</param>
        /// <param name="DisallowFreeChampions">DisallowFreeChampions.</param>
        /// <param name="GameMode">GameMode.</param>
        /// <param name="GameMutators">GameMutators.</param>
        /// <param name="GameTypeConfigId">GameTypeConfigId.</param>
        /// <param name="Id">Id.</param>
        /// <param name="LastToggledOffTime">LastToggledOffTime.</param>
        /// <param name="LastToggledOnTime">LastToggledOnTime.</param>
        /// <param name="MapSelectionAlgorithm">MapSelectionAlgorithm.</param>
        /// <param name="MatchingThrottleConfig">MatchingThrottleConfig.</param>
        /// <param name="MaxLevel">MaxLevel.</param>
        /// <param name="MaxSummonerLevelForFirstWinOfTheDay">MaxSummonerLevelForFirstWinOfTheDay.</param>
        /// <param name="MaximumParticipantListSize">MaximumParticipantListSize.</param>
        /// <param name="MinLevel">MinLevel.</param>
        /// <param name="MinimumParticipantListSize">MinimumParticipantListSize.</param>
        /// <param name="MinimumQueueDodgeDelayTime">MinimumQueueDodgeDelayTime.</param>
        /// <param name="NumPlayersPerTeam">NumPlayersPerTeam.</param>
        /// <param name="PointsConfigKey">PointsConfigKey.</param>
        /// <param name="QueueBonusKey">QueueBonusKey.</param>
        /// <param name="QueueState">QueueState.</param>
        /// <param name="QueueStateString">QueueStateString.</param>
        /// <param name="RandomizeTeamSizes">RandomizeTeamSizes.</param>
        /// <param name="Ranked">Ranked.</param>
        /// <param name="SupportedMapIds">SupportedMapIds.</param>
        /// <param name="TeamOnly">TeamOnly.</param>
        /// <param name="ThresholdEnabled">ThresholdEnabled.</param>
        /// <param name="ThresholdSize">ThresholdSize.</param>
        /// <param name="Type">Type.</param>
        /// <param name="TypeString">TypeString.</param>
        public GameQueuesLcdsGameQueueConfig(int? BlockedMinutesThreshold = default(int?), bool? BotsCanSpawnOnBlueSide = default(bool?), string CacheName = default(string), bool? DisallowFreeChampions = default(bool?), string GameMode = default(string), List<string> GameMutators = default(List<string>), int? GameTypeConfigId = default(int?), int? Id = default(int?), long? LastToggledOffTime = default(long?), long? LastToggledOnTime = default(long?), string MapSelectionAlgorithm = default(string), GameQueuesLcdsMatchingThrottleConfig MatchingThrottleConfig = default(GameQueuesLcdsMatchingThrottleConfig), int? MaxLevel = default(int?), int? MaxSummonerLevelForFirstWinOfTheDay = default(int?), int? MaximumParticipantListSize = default(int?), int? MinLevel = default(int?), int? MinimumParticipantListSize = default(int?), int? MinimumQueueDodgeDelayTime = default(int?), int? NumPlayersPerTeam = default(int?), string PointsConfigKey = default(string), string QueueBonusKey = default(string), string QueueState = default(string), string QueueStateString = default(string), bool? RandomizeTeamSizes = default(bool?), bool? Ranked = default(bool?), List<int?> SupportedMapIds = default(List<int?>), bool? TeamOnly = default(bool?), bool? ThresholdEnabled = default(bool?), long? ThresholdSize = default(long?), string Type = default(string), string TypeString = default(string))
        {
            this.BlockedMinutesThreshold = BlockedMinutesThreshold;
            this.BotsCanSpawnOnBlueSide = BotsCanSpawnOnBlueSide;
            this.CacheName = CacheName;
            this.DisallowFreeChampions = DisallowFreeChampions;
            this.GameMode = GameMode;
            this.GameMutators = GameMutators;
            this.GameTypeConfigId = GameTypeConfigId;
            this.Id = Id;
            this.LastToggledOffTime = LastToggledOffTime;
            this.LastToggledOnTime = LastToggledOnTime;
            this.MapSelectionAlgorithm = MapSelectionAlgorithm;
            this.MatchingThrottleConfig = MatchingThrottleConfig;
            this.MaxLevel = MaxLevel;
            this.MaxSummonerLevelForFirstWinOfTheDay = MaxSummonerLevelForFirstWinOfTheDay;
            this.MaximumParticipantListSize = MaximumParticipantListSize;
            this.MinLevel = MinLevel;
            this.MinimumParticipantListSize = MinimumParticipantListSize;
            this.MinimumQueueDodgeDelayTime = MinimumQueueDodgeDelayTime;
            this.NumPlayersPerTeam = NumPlayersPerTeam;
            this.PointsConfigKey = PointsConfigKey;
            this.QueueBonusKey = QueueBonusKey;
            this.QueueState = QueueState;
            this.QueueStateString = QueueStateString;
            this.RandomizeTeamSizes = RandomizeTeamSizes;
            this.Ranked = Ranked;
            this.SupportedMapIds = SupportedMapIds;
            this.TeamOnly = TeamOnly;
            this.ThresholdEnabled = ThresholdEnabled;
            this.ThresholdSize = ThresholdSize;
            this.Type = Type;
            this.TypeString = TypeString;
        }
        
        /// <summary>
        /// Gets or Sets BlockedMinutesThreshold
        /// </summary>
        [DataMember(Name="blockedMinutesThreshold", EmitDefaultValue=false)]
        public int? BlockedMinutesThreshold { get; set; }

        /// <summary>
        /// Gets or Sets BotsCanSpawnOnBlueSide
        /// </summary>
        [DataMember(Name="botsCanSpawnOnBlueSide", EmitDefaultValue=false)]
        public bool? BotsCanSpawnOnBlueSide { get; set; }

        /// <summary>
        /// Gets or Sets CacheName
        /// </summary>
        [DataMember(Name="cacheName", EmitDefaultValue=false)]
        public string CacheName { get; set; }

        /// <summary>
        /// Gets or Sets DisallowFreeChampions
        /// </summary>
        [DataMember(Name="disallowFreeChampions", EmitDefaultValue=false)]
        public bool? DisallowFreeChampions { get; set; }

        /// <summary>
        /// Gets or Sets GameMode
        /// </summary>
        [DataMember(Name="gameMode", EmitDefaultValue=false)]
        public string GameMode { get; set; }

        /// <summary>
        /// Gets or Sets GameMutators
        /// </summary>
        [DataMember(Name="gameMutators", EmitDefaultValue=false)]
        public List<string> GameMutators { get; set; }

        /// <summary>
        /// Gets or Sets GameTypeConfigId
        /// </summary>
        [DataMember(Name="gameTypeConfigId", EmitDefaultValue=false)]
        public int? GameTypeConfigId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets LastToggledOffTime
        /// </summary>
        [DataMember(Name="lastToggledOffTime", EmitDefaultValue=false)]
        public long? LastToggledOffTime { get; set; }

        /// <summary>
        /// Gets or Sets LastToggledOnTime
        /// </summary>
        [DataMember(Name="lastToggledOnTime", EmitDefaultValue=false)]
        public long? LastToggledOnTime { get; set; }

        /// <summary>
        /// Gets or Sets MapSelectionAlgorithm
        /// </summary>
        [DataMember(Name="mapSelectionAlgorithm", EmitDefaultValue=false)]
        public string MapSelectionAlgorithm { get; set; }

        /// <summary>
        /// Gets or Sets MatchingThrottleConfig
        /// </summary>
        [DataMember(Name="matchingThrottleConfig", EmitDefaultValue=false)]
        public GameQueuesLcdsMatchingThrottleConfig MatchingThrottleConfig { get; set; }

        /// <summary>
        /// Gets or Sets MaxLevel
        /// </summary>
        [DataMember(Name="maxLevel", EmitDefaultValue=false)]
        public int? MaxLevel { get; set; }

        /// <summary>
        /// Gets or Sets MaxSummonerLevelForFirstWinOfTheDay
        /// </summary>
        [DataMember(Name="maxSummonerLevelForFirstWinOfTheDay", EmitDefaultValue=false)]
        public int? MaxSummonerLevelForFirstWinOfTheDay { get; set; }

        /// <summary>
        /// Gets or Sets MaximumParticipantListSize
        /// </summary>
        [DataMember(Name="maximumParticipantListSize", EmitDefaultValue=false)]
        public int? MaximumParticipantListSize { get; set; }

        /// <summary>
        /// Gets or Sets MinLevel
        /// </summary>
        [DataMember(Name="minLevel", EmitDefaultValue=false)]
        public int? MinLevel { get; set; }

        /// <summary>
        /// Gets or Sets MinimumParticipantListSize
        /// </summary>
        [DataMember(Name="minimumParticipantListSize", EmitDefaultValue=false)]
        public int? MinimumParticipantListSize { get; set; }

        /// <summary>
        /// Gets or Sets MinimumQueueDodgeDelayTime
        /// </summary>
        [DataMember(Name="minimumQueueDodgeDelayTime", EmitDefaultValue=false)]
        public int? MinimumQueueDodgeDelayTime { get; set; }

        /// <summary>
        /// Gets or Sets NumPlayersPerTeam
        /// </summary>
        [DataMember(Name="numPlayersPerTeam", EmitDefaultValue=false)]
        public int? NumPlayersPerTeam { get; set; }

        /// <summary>
        /// Gets or Sets PointsConfigKey
        /// </summary>
        [DataMember(Name="pointsConfigKey", EmitDefaultValue=false)]
        public string PointsConfigKey { get; set; }

        /// <summary>
        /// Gets or Sets QueueBonusKey
        /// </summary>
        [DataMember(Name="queueBonusKey", EmitDefaultValue=false)]
        public string QueueBonusKey { get; set; }

        /// <summary>
        /// Gets or Sets QueueState
        /// </summary>
        [DataMember(Name="queueState", EmitDefaultValue=false)]
        public string QueueState { get; set; }

        /// <summary>
        /// Gets or Sets QueueStateString
        /// </summary>
        [DataMember(Name="queueStateString", EmitDefaultValue=false)]
        public string QueueStateString { get; set; }

        /// <summary>
        /// Gets or Sets RandomizeTeamSizes
        /// </summary>
        [DataMember(Name="randomizeTeamSizes", EmitDefaultValue=false)]
        public bool? RandomizeTeamSizes { get; set; }

        /// <summary>
        /// Gets or Sets Ranked
        /// </summary>
        [DataMember(Name="ranked", EmitDefaultValue=false)]
        public bool? Ranked { get; set; }

        /// <summary>
        /// Gets or Sets SupportedMapIds
        /// </summary>
        [DataMember(Name="supportedMapIds", EmitDefaultValue=false)]
        public List<int?> SupportedMapIds { get; set; }

        /// <summary>
        /// Gets or Sets TeamOnly
        /// </summary>
        [DataMember(Name="teamOnly", EmitDefaultValue=false)]
        public bool? TeamOnly { get; set; }

        /// <summary>
        /// Gets or Sets ThresholdEnabled
        /// </summary>
        [DataMember(Name="thresholdEnabled", EmitDefaultValue=false)]
        public bool? ThresholdEnabled { get; set; }

        /// <summary>
        /// Gets or Sets ThresholdSize
        /// </summary>
        [DataMember(Name="thresholdSize", EmitDefaultValue=false)]
        public long? ThresholdSize { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets TypeString
        /// </summary>
        [DataMember(Name="typeString", EmitDefaultValue=false)]
        public string TypeString { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GameQueuesLcdsGameQueueConfig {\n");
            sb.Append("  BlockedMinutesThreshold: ").Append(BlockedMinutesThreshold).Append("\n");
            sb.Append("  BotsCanSpawnOnBlueSide: ").Append(BotsCanSpawnOnBlueSide).Append("\n");
            sb.Append("  CacheName: ").Append(CacheName).Append("\n");
            sb.Append("  DisallowFreeChampions: ").Append(DisallowFreeChampions).Append("\n");
            sb.Append("  GameMode: ").Append(GameMode).Append("\n");
            sb.Append("  GameMutators: ").Append(GameMutators).Append("\n");
            sb.Append("  GameTypeConfigId: ").Append(GameTypeConfigId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastToggledOffTime: ").Append(LastToggledOffTime).Append("\n");
            sb.Append("  LastToggledOnTime: ").Append(LastToggledOnTime).Append("\n");
            sb.Append("  MapSelectionAlgorithm: ").Append(MapSelectionAlgorithm).Append("\n");
            sb.Append("  MatchingThrottleConfig: ").Append(MatchingThrottleConfig).Append("\n");
            sb.Append("  MaxLevel: ").Append(MaxLevel).Append("\n");
            sb.Append("  MaxSummonerLevelForFirstWinOfTheDay: ").Append(MaxSummonerLevelForFirstWinOfTheDay).Append("\n");
            sb.Append("  MaximumParticipantListSize: ").Append(MaximumParticipantListSize).Append("\n");
            sb.Append("  MinLevel: ").Append(MinLevel).Append("\n");
            sb.Append("  MinimumParticipantListSize: ").Append(MinimumParticipantListSize).Append("\n");
            sb.Append("  MinimumQueueDodgeDelayTime: ").Append(MinimumQueueDodgeDelayTime).Append("\n");
            sb.Append("  NumPlayersPerTeam: ").Append(NumPlayersPerTeam).Append("\n");
            sb.Append("  PointsConfigKey: ").Append(PointsConfigKey).Append("\n");
            sb.Append("  QueueBonusKey: ").Append(QueueBonusKey).Append("\n");
            sb.Append("  QueueState: ").Append(QueueState).Append("\n");
            sb.Append("  QueueStateString: ").Append(QueueStateString).Append("\n");
            sb.Append("  RandomizeTeamSizes: ").Append(RandomizeTeamSizes).Append("\n");
            sb.Append("  Ranked: ").Append(Ranked).Append("\n");
            sb.Append("  SupportedMapIds: ").Append(SupportedMapIds).Append("\n");
            sb.Append("  TeamOnly: ").Append(TeamOnly).Append("\n");
            sb.Append("  ThresholdEnabled: ").Append(ThresholdEnabled).Append("\n");
            sb.Append("  ThresholdSize: ").Append(ThresholdSize).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TypeString: ").Append(TypeString).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GameQueuesLcdsGameQueueConfig);
        }

        /// <summary>
        /// Returns true if GameQueuesLcdsGameQueueConfig instances are equal
        /// </summary>
        /// <param name="other">Instance of GameQueuesLcdsGameQueueConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GameQueuesLcdsGameQueueConfig other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BlockedMinutesThreshold == other.BlockedMinutesThreshold ||
                    this.BlockedMinutesThreshold != null &&
                    this.BlockedMinutesThreshold.Equals(other.BlockedMinutesThreshold)
                ) && 
                (
                    this.BotsCanSpawnOnBlueSide == other.BotsCanSpawnOnBlueSide ||
                    this.BotsCanSpawnOnBlueSide != null &&
                    this.BotsCanSpawnOnBlueSide.Equals(other.BotsCanSpawnOnBlueSide)
                ) && 
                (
                    this.CacheName == other.CacheName ||
                    this.CacheName != null &&
                    this.CacheName.Equals(other.CacheName)
                ) && 
                (
                    this.DisallowFreeChampions == other.DisallowFreeChampions ||
                    this.DisallowFreeChampions != null &&
                    this.DisallowFreeChampions.Equals(other.DisallowFreeChampions)
                ) && 
                (
                    this.GameMode == other.GameMode ||
                    this.GameMode != null &&
                    this.GameMode.Equals(other.GameMode)
                ) && 
                (
                    this.GameMutators == other.GameMutators ||
                    this.GameMutators != null &&
                    this.GameMutators.SequenceEqual(other.GameMutators)
                ) && 
                (
                    this.GameTypeConfigId == other.GameTypeConfigId ||
                    this.GameTypeConfigId != null &&
                    this.GameTypeConfigId.Equals(other.GameTypeConfigId)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.LastToggledOffTime == other.LastToggledOffTime ||
                    this.LastToggledOffTime != null &&
                    this.LastToggledOffTime.Equals(other.LastToggledOffTime)
                ) && 
                (
                    this.LastToggledOnTime == other.LastToggledOnTime ||
                    this.LastToggledOnTime != null &&
                    this.LastToggledOnTime.Equals(other.LastToggledOnTime)
                ) && 
                (
                    this.MapSelectionAlgorithm == other.MapSelectionAlgorithm ||
                    this.MapSelectionAlgorithm != null &&
                    this.MapSelectionAlgorithm.Equals(other.MapSelectionAlgorithm)
                ) && 
                (
                    this.MatchingThrottleConfig == other.MatchingThrottleConfig ||
                    this.MatchingThrottleConfig != null &&
                    this.MatchingThrottleConfig.Equals(other.MatchingThrottleConfig)
                ) && 
                (
                    this.MaxLevel == other.MaxLevel ||
                    this.MaxLevel != null &&
                    this.MaxLevel.Equals(other.MaxLevel)
                ) && 
                (
                    this.MaxSummonerLevelForFirstWinOfTheDay == other.MaxSummonerLevelForFirstWinOfTheDay ||
                    this.MaxSummonerLevelForFirstWinOfTheDay != null &&
                    this.MaxSummonerLevelForFirstWinOfTheDay.Equals(other.MaxSummonerLevelForFirstWinOfTheDay)
                ) && 
                (
                    this.MaximumParticipantListSize == other.MaximumParticipantListSize ||
                    this.MaximumParticipantListSize != null &&
                    this.MaximumParticipantListSize.Equals(other.MaximumParticipantListSize)
                ) && 
                (
                    this.MinLevel == other.MinLevel ||
                    this.MinLevel != null &&
                    this.MinLevel.Equals(other.MinLevel)
                ) && 
                (
                    this.MinimumParticipantListSize == other.MinimumParticipantListSize ||
                    this.MinimumParticipantListSize != null &&
                    this.MinimumParticipantListSize.Equals(other.MinimumParticipantListSize)
                ) && 
                (
                    this.MinimumQueueDodgeDelayTime == other.MinimumQueueDodgeDelayTime ||
                    this.MinimumQueueDodgeDelayTime != null &&
                    this.MinimumQueueDodgeDelayTime.Equals(other.MinimumQueueDodgeDelayTime)
                ) && 
                (
                    this.NumPlayersPerTeam == other.NumPlayersPerTeam ||
                    this.NumPlayersPerTeam != null &&
                    this.NumPlayersPerTeam.Equals(other.NumPlayersPerTeam)
                ) && 
                (
                    this.PointsConfigKey == other.PointsConfigKey ||
                    this.PointsConfigKey != null &&
                    this.PointsConfigKey.Equals(other.PointsConfigKey)
                ) && 
                (
                    this.QueueBonusKey == other.QueueBonusKey ||
                    this.QueueBonusKey != null &&
                    this.QueueBonusKey.Equals(other.QueueBonusKey)
                ) && 
                (
                    this.QueueState == other.QueueState ||
                    this.QueueState != null &&
                    this.QueueState.Equals(other.QueueState)
                ) && 
                (
                    this.QueueStateString == other.QueueStateString ||
                    this.QueueStateString != null &&
                    this.QueueStateString.Equals(other.QueueStateString)
                ) && 
                (
                    this.RandomizeTeamSizes == other.RandomizeTeamSizes ||
                    this.RandomizeTeamSizes != null &&
                    this.RandomizeTeamSizes.Equals(other.RandomizeTeamSizes)
                ) && 
                (
                    this.Ranked == other.Ranked ||
                    this.Ranked != null &&
                    this.Ranked.Equals(other.Ranked)
                ) && 
                (
                    this.SupportedMapIds == other.SupportedMapIds ||
                    this.SupportedMapIds != null &&
                    this.SupportedMapIds.SequenceEqual(other.SupportedMapIds)
                ) && 
                (
                    this.TeamOnly == other.TeamOnly ||
                    this.TeamOnly != null &&
                    this.TeamOnly.Equals(other.TeamOnly)
                ) && 
                (
                    this.ThresholdEnabled == other.ThresholdEnabled ||
                    this.ThresholdEnabled != null &&
                    this.ThresholdEnabled.Equals(other.ThresholdEnabled)
                ) && 
                (
                    this.ThresholdSize == other.ThresholdSize ||
                    this.ThresholdSize != null &&
                    this.ThresholdSize.Equals(other.ThresholdSize)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.TypeString == other.TypeString ||
                    this.TypeString != null &&
                    this.TypeString.Equals(other.TypeString)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BlockedMinutesThreshold != null)
                    hash = hash * 59 + this.BlockedMinutesThreshold.GetHashCode();
                if (this.BotsCanSpawnOnBlueSide != null)
                    hash = hash * 59 + this.BotsCanSpawnOnBlueSide.GetHashCode();
                if (this.CacheName != null)
                    hash = hash * 59 + this.CacheName.GetHashCode();
                if (this.DisallowFreeChampions != null)
                    hash = hash * 59 + this.DisallowFreeChampions.GetHashCode();
                if (this.GameMode != null)
                    hash = hash * 59 + this.GameMode.GetHashCode();
                if (this.GameMutators != null)
                    hash = hash * 59 + this.GameMutators.GetHashCode();
                if (this.GameTypeConfigId != null)
                    hash = hash * 59 + this.GameTypeConfigId.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.LastToggledOffTime != null)
                    hash = hash * 59 + this.LastToggledOffTime.GetHashCode();
                if (this.LastToggledOnTime != null)
                    hash = hash * 59 + this.LastToggledOnTime.GetHashCode();
                if (this.MapSelectionAlgorithm != null)
                    hash = hash * 59 + this.MapSelectionAlgorithm.GetHashCode();
                if (this.MatchingThrottleConfig != null)
                    hash = hash * 59 + this.MatchingThrottleConfig.GetHashCode();
                if (this.MaxLevel != null)
                    hash = hash * 59 + this.MaxLevel.GetHashCode();
                if (this.MaxSummonerLevelForFirstWinOfTheDay != null)
                    hash = hash * 59 + this.MaxSummonerLevelForFirstWinOfTheDay.GetHashCode();
                if (this.MaximumParticipantListSize != null)
                    hash = hash * 59 + this.MaximumParticipantListSize.GetHashCode();
                if (this.MinLevel != null)
                    hash = hash * 59 + this.MinLevel.GetHashCode();
                if (this.MinimumParticipantListSize != null)
                    hash = hash * 59 + this.MinimumParticipantListSize.GetHashCode();
                if (this.MinimumQueueDodgeDelayTime != null)
                    hash = hash * 59 + this.MinimumQueueDodgeDelayTime.GetHashCode();
                if (this.NumPlayersPerTeam != null)
                    hash = hash * 59 + this.NumPlayersPerTeam.GetHashCode();
                if (this.PointsConfigKey != null)
                    hash = hash * 59 + this.PointsConfigKey.GetHashCode();
                if (this.QueueBonusKey != null)
                    hash = hash * 59 + this.QueueBonusKey.GetHashCode();
                if (this.QueueState != null)
                    hash = hash * 59 + this.QueueState.GetHashCode();
                if (this.QueueStateString != null)
                    hash = hash * 59 + this.QueueStateString.GetHashCode();
                if (this.RandomizeTeamSizes != null)
                    hash = hash * 59 + this.RandomizeTeamSizes.GetHashCode();
                if (this.Ranked != null)
                    hash = hash * 59 + this.Ranked.GetHashCode();
                if (this.SupportedMapIds != null)
                    hash = hash * 59 + this.SupportedMapIds.GetHashCode();
                if (this.TeamOnly != null)
                    hash = hash * 59 + this.TeamOnly.GetHashCode();
                if (this.ThresholdEnabled != null)
                    hash = hash * 59 + this.ThresholdEnabled.GetHashCode();
                if (this.ThresholdSize != null)
                    hash = hash * 59 + this.ThresholdSize.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.TypeString != null)
                    hash = hash * 59 + this.TypeString.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
