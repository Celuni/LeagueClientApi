/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// GameflowLcdsReconnectInfoDto
    /// </summary>
    [DataContract]
    public partial class GameflowLcdsReconnectInfoDto :  IEquatable<GameflowLcdsReconnectInfoDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GameflowLcdsReconnectInfoDto" /> class.
        /// </summary>
        /// <param name="Game">Game.</param>
        /// <param name="PlayerCredentials">PlayerCredentials.</param>
        /// <param name="ReconnectDelay">ReconnectDelay.</param>
        public GameflowLcdsReconnectInfoDto(GameflowLcdsGameDTO Game = default(GameflowLcdsGameDTO), GameflowLcdsPlayerCredentialsDto PlayerCredentials = default(GameflowLcdsPlayerCredentialsDto), int? ReconnectDelay = default(int?))
        {
            this.Game = Game;
            this.PlayerCredentials = PlayerCredentials;
            this.ReconnectDelay = ReconnectDelay;
        }
        
        /// <summary>
        /// Gets or Sets Game
        /// </summary>
        [DataMember(Name="game", EmitDefaultValue=false)]
        public GameflowLcdsGameDTO Game { get; set; }

        /// <summary>
        /// Gets or Sets PlayerCredentials
        /// </summary>
        [DataMember(Name="playerCredentials", EmitDefaultValue=false)]
        public GameflowLcdsPlayerCredentialsDto PlayerCredentials { get; set; }

        /// <summary>
        /// Gets or Sets ReconnectDelay
        /// </summary>
        [DataMember(Name="reconnectDelay", EmitDefaultValue=false)]
        public int? ReconnectDelay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GameflowLcdsReconnectInfoDto {\n");
            sb.Append("  Game: ").Append(Game).Append("\n");
            sb.Append("  PlayerCredentials: ").Append(PlayerCredentials).Append("\n");
            sb.Append("  ReconnectDelay: ").Append(ReconnectDelay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GameflowLcdsReconnectInfoDto);
        }

        /// <summary>
        /// Returns true if GameflowLcdsReconnectInfoDto instances are equal
        /// </summary>
        /// <param name="other">Instance of GameflowLcdsReconnectInfoDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GameflowLcdsReconnectInfoDto other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Game == other.Game ||
                    this.Game != null &&
                    this.Game.Equals(other.Game)
                ) && 
                (
                    this.PlayerCredentials == other.PlayerCredentials ||
                    this.PlayerCredentials != null &&
                    this.PlayerCredentials.Equals(other.PlayerCredentials)
                ) && 
                (
                    this.ReconnectDelay == other.ReconnectDelay ||
                    this.ReconnectDelay != null &&
                    this.ReconnectDelay.Equals(other.ReconnectDelay)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Game != null)
                    hash = hash * 59 + this.Game.GetHashCode();
                if (this.PlayerCredentials != null)
                    hash = hash * 59 + this.PlayerCredentials.GetHashCode();
                if (this.ReconnectDelay != null)
                    hash = hash * 59 + this.ReconnectDelay.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
