/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// Highlight
    /// </summary>
    [DataContract]
    public partial class Highlight :  IEquatable<Highlight>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Highlight" /> class.
        /// </summary>
        /// <param name="FileSizeBytes">FileSizeBytes.</param>
        /// <param name="Filepath">Filepath.</param>
        /// <param name="Id">Id.</param>
        /// <param name="MtimeIso8601">MtimeIso8601.</param>
        /// <param name="MtimeMsUtc">MtimeMsUtc.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Url">Url.</param>
        public Highlight(long? FileSizeBytes = default(long?), string Filepath = default(string), long? Id = default(long?), string MtimeIso8601 = default(string), long? MtimeMsUtc = default(long?), string Name = default(string), string Url = default(string))
        {
            this.FileSizeBytes = FileSizeBytes;
            this.Filepath = Filepath;
            this.Id = Id;
            this.MtimeIso8601 = MtimeIso8601;
            this.MtimeMsUtc = MtimeMsUtc;
            this.Name = Name;
            this.Url = Url;
        }
        
        /// <summary>
        /// Gets or Sets FileSizeBytes
        /// </summary>
        [DataMember(Name="fileSizeBytes", EmitDefaultValue=false)]
        public long? FileSizeBytes { get; set; }

        /// <summary>
        /// Gets or Sets Filepath
        /// </summary>
        [DataMember(Name="filepath", EmitDefaultValue=false)]
        public string Filepath { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets MtimeIso8601
        /// </summary>
        [DataMember(Name="mtimeIso8601", EmitDefaultValue=false)]
        public string MtimeIso8601 { get; set; }

        /// <summary>
        /// Gets or Sets MtimeMsUtc
        /// </summary>
        [DataMember(Name="mtimeMsUtc", EmitDefaultValue=false)]
        public long? MtimeMsUtc { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Highlight {\n");
            sb.Append("  FileSizeBytes: ").Append(FileSizeBytes).Append("\n");
            sb.Append("  Filepath: ").Append(Filepath).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MtimeIso8601: ").Append(MtimeIso8601).Append("\n");
            sb.Append("  MtimeMsUtc: ").Append(MtimeMsUtc).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Highlight);
        }

        /// <summary>
        /// Returns true if Highlight instances are equal
        /// </summary>
        /// <param name="other">Instance of Highlight to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Highlight other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FileSizeBytes == other.FileSizeBytes ||
                    this.FileSizeBytes != null &&
                    this.FileSizeBytes.Equals(other.FileSizeBytes)
                ) && 
                (
                    this.Filepath == other.Filepath ||
                    this.Filepath != null &&
                    this.Filepath.Equals(other.Filepath)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.MtimeIso8601 == other.MtimeIso8601 ||
                    this.MtimeIso8601 != null &&
                    this.MtimeIso8601.Equals(other.MtimeIso8601)
                ) && 
                (
                    this.MtimeMsUtc == other.MtimeMsUtc ||
                    this.MtimeMsUtc != null &&
                    this.MtimeMsUtc.Equals(other.MtimeMsUtc)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FileSizeBytes != null)
                    hash = hash * 59 + this.FileSizeBytes.GetHashCode();
                if (this.Filepath != null)
                    hash = hash * 59 + this.Filepath.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.MtimeIso8601 != null)
                    hash = hash * 59 + this.MtimeIso8601.GetHashCode();
                if (this.MtimeMsUtc != null)
                    hash = hash * 59 + this.MtimeMsUtc.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
