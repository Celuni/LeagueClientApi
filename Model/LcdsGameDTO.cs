/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LcdsGameDTO
    /// </summary>
    [DataContract]
    public partial class LcdsGameDTO :  IEquatable<LcdsGameDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LcdsGameDTO" /> class.
        /// </summary>
        /// <param name="GameMode">GameMode.</param>
        /// <param name="GameMutators">GameMutators.</param>
        /// <param name="GameState">GameState.</param>
        /// <param name="GameType">GameType.</param>
        /// <param name="GameTypeConfigId">GameTypeConfigId.</param>
        /// <param name="Id">Id.</param>
        /// <param name="MapId">MapId.</param>
        /// <param name="MaxNumPlayers">MaxNumPlayers.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Observers">Observers.</param>
        /// <param name="OptimisticLock">OptimisticLock.</param>
        /// <param name="OwnerSummary">OwnerSummary.</param>
        /// <param name="PassbackDataPacket">PassbackDataPacket.</param>
        /// <param name="PassbackUrl">PassbackUrl.</param>
        /// <param name="PracticeGameRewardsDisabledReasons">PracticeGameRewardsDisabledReasons.</param>
        /// <param name="RoomName">RoomName.</param>
        /// <param name="RoomPassword">RoomPassword.</param>
        /// <param name="SpectatorsAllowed">SpectatorsAllowed.</param>
        /// <param name="TeamOne">TeamOne.</param>
        /// <param name="TeamTwo">TeamTwo.</param>
        public LcdsGameDTO(string GameMode = default(string), List<string> GameMutators = default(List<string>), string GameState = default(string), string GameType = default(string), int? GameTypeConfigId = default(int?), long? Id = default(long?), int? MapId = default(int?), int? MaxNumPlayers = default(int?), string Name = default(string), List<LcdsPlayerParticipant> Observers = default(List<LcdsPlayerParticipant>), long? OptimisticLock = default(long?), LcdsPlayerParticipant OwnerSummary = default(LcdsPlayerParticipant), string PassbackDataPacket = default(string), string PassbackUrl = default(string), List<string> PracticeGameRewardsDisabledReasons = default(List<string>), string RoomName = default(string), string RoomPassword = default(string), string SpectatorsAllowed = default(string), List<LcdsPlayerParticipant> TeamOne = default(List<LcdsPlayerParticipant>), List<LcdsPlayerParticipant> TeamTwo = default(List<LcdsPlayerParticipant>))
        {
            this.GameMode = GameMode;
            this.GameMutators = GameMutators;
            this.GameState = GameState;
            this.GameType = GameType;
            this.GameTypeConfigId = GameTypeConfigId;
            this.Id = Id;
            this.MapId = MapId;
            this.MaxNumPlayers = MaxNumPlayers;
            this.Name = Name;
            this.Observers = Observers;
            this.OptimisticLock = OptimisticLock;
            this.OwnerSummary = OwnerSummary;
            this.PassbackDataPacket = PassbackDataPacket;
            this.PassbackUrl = PassbackUrl;
            this.PracticeGameRewardsDisabledReasons = PracticeGameRewardsDisabledReasons;
            this.RoomName = RoomName;
            this.RoomPassword = RoomPassword;
            this.SpectatorsAllowed = SpectatorsAllowed;
            this.TeamOne = TeamOne;
            this.TeamTwo = TeamTwo;
        }
        
        /// <summary>
        /// Gets or Sets GameMode
        /// </summary>
        [DataMember(Name="gameMode", EmitDefaultValue=false)]
        public string GameMode { get; set; }

        /// <summary>
        /// Gets or Sets GameMutators
        /// </summary>
        [DataMember(Name="gameMutators", EmitDefaultValue=false)]
        public List<string> GameMutators { get; set; }

        /// <summary>
        /// Gets or Sets GameState
        /// </summary>
        [DataMember(Name="gameState", EmitDefaultValue=false)]
        public string GameState { get; set; }

        /// <summary>
        /// Gets or Sets GameType
        /// </summary>
        [DataMember(Name="gameType", EmitDefaultValue=false)]
        public string GameType { get; set; }

        /// <summary>
        /// Gets or Sets GameTypeConfigId
        /// </summary>
        [DataMember(Name="gameTypeConfigId", EmitDefaultValue=false)]
        public int? GameTypeConfigId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets MapId
        /// </summary>
        [DataMember(Name="mapId", EmitDefaultValue=false)]
        public int? MapId { get; set; }

        /// <summary>
        /// Gets or Sets MaxNumPlayers
        /// </summary>
        [DataMember(Name="maxNumPlayers", EmitDefaultValue=false)]
        public int? MaxNumPlayers { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Observers
        /// </summary>
        [DataMember(Name="observers", EmitDefaultValue=false)]
        public List<LcdsPlayerParticipant> Observers { get; set; }

        /// <summary>
        /// Gets or Sets OptimisticLock
        /// </summary>
        [DataMember(Name="optimisticLock", EmitDefaultValue=false)]
        public long? OptimisticLock { get; set; }

        /// <summary>
        /// Gets or Sets OwnerSummary
        /// </summary>
        [DataMember(Name="ownerSummary", EmitDefaultValue=false)]
        public LcdsPlayerParticipant OwnerSummary { get; set; }

        /// <summary>
        /// Gets or Sets PassbackDataPacket
        /// </summary>
        [DataMember(Name="passbackDataPacket", EmitDefaultValue=false)]
        public string PassbackDataPacket { get; set; }

        /// <summary>
        /// Gets or Sets PassbackUrl
        /// </summary>
        [DataMember(Name="passbackUrl", EmitDefaultValue=false)]
        public string PassbackUrl { get; set; }

        /// <summary>
        /// Gets or Sets PracticeGameRewardsDisabledReasons
        /// </summary>
        [DataMember(Name="practiceGameRewardsDisabledReasons", EmitDefaultValue=false)]
        public List<string> PracticeGameRewardsDisabledReasons { get; set; }

        /// <summary>
        /// Gets or Sets RoomName
        /// </summary>
        [DataMember(Name="roomName", EmitDefaultValue=false)]
        public string RoomName { get; set; }

        /// <summary>
        /// Gets or Sets RoomPassword
        /// </summary>
        [DataMember(Name="roomPassword", EmitDefaultValue=false)]
        public string RoomPassword { get; set; }

        /// <summary>
        /// Gets or Sets SpectatorsAllowed
        /// </summary>
        [DataMember(Name="spectatorsAllowed", EmitDefaultValue=false)]
        public string SpectatorsAllowed { get; set; }

        /// <summary>
        /// Gets or Sets TeamOne
        /// </summary>
        [DataMember(Name="teamOne", EmitDefaultValue=false)]
        public List<LcdsPlayerParticipant> TeamOne { get; set; }

        /// <summary>
        /// Gets or Sets TeamTwo
        /// </summary>
        [DataMember(Name="teamTwo", EmitDefaultValue=false)]
        public List<LcdsPlayerParticipant> TeamTwo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LcdsGameDTO {\n");
            sb.Append("  GameMode: ").Append(GameMode).Append("\n");
            sb.Append("  GameMutators: ").Append(GameMutators).Append("\n");
            sb.Append("  GameState: ").Append(GameState).Append("\n");
            sb.Append("  GameType: ").Append(GameType).Append("\n");
            sb.Append("  GameTypeConfigId: ").Append(GameTypeConfigId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MapId: ").Append(MapId).Append("\n");
            sb.Append("  MaxNumPlayers: ").Append(MaxNumPlayers).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Observers: ").Append(Observers).Append("\n");
            sb.Append("  OptimisticLock: ").Append(OptimisticLock).Append("\n");
            sb.Append("  OwnerSummary: ").Append(OwnerSummary).Append("\n");
            sb.Append("  PassbackDataPacket: ").Append(PassbackDataPacket).Append("\n");
            sb.Append("  PassbackUrl: ").Append(PassbackUrl).Append("\n");
            sb.Append("  PracticeGameRewardsDisabledReasons: ").Append(PracticeGameRewardsDisabledReasons).Append("\n");
            sb.Append("  RoomName: ").Append(RoomName).Append("\n");
            sb.Append("  RoomPassword: ").Append(RoomPassword).Append("\n");
            sb.Append("  SpectatorsAllowed: ").Append(SpectatorsAllowed).Append("\n");
            sb.Append("  TeamOne: ").Append(TeamOne).Append("\n");
            sb.Append("  TeamTwo: ").Append(TeamTwo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LcdsGameDTO);
        }

        /// <summary>
        /// Returns true if LcdsGameDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of LcdsGameDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LcdsGameDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.GameMode == other.GameMode ||
                    this.GameMode != null &&
                    this.GameMode.Equals(other.GameMode)
                ) && 
                (
                    this.GameMutators == other.GameMutators ||
                    this.GameMutators != null &&
                    this.GameMutators.SequenceEqual(other.GameMutators)
                ) && 
                (
                    this.GameState == other.GameState ||
                    this.GameState != null &&
                    this.GameState.Equals(other.GameState)
                ) && 
                (
                    this.GameType == other.GameType ||
                    this.GameType != null &&
                    this.GameType.Equals(other.GameType)
                ) && 
                (
                    this.GameTypeConfigId == other.GameTypeConfigId ||
                    this.GameTypeConfigId != null &&
                    this.GameTypeConfigId.Equals(other.GameTypeConfigId)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.MapId == other.MapId ||
                    this.MapId != null &&
                    this.MapId.Equals(other.MapId)
                ) && 
                (
                    this.MaxNumPlayers == other.MaxNumPlayers ||
                    this.MaxNumPlayers != null &&
                    this.MaxNumPlayers.Equals(other.MaxNumPlayers)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Observers == other.Observers ||
                    this.Observers != null &&
                    this.Observers.SequenceEqual(other.Observers)
                ) && 
                (
                    this.OptimisticLock == other.OptimisticLock ||
                    this.OptimisticLock != null &&
                    this.OptimisticLock.Equals(other.OptimisticLock)
                ) && 
                (
                    this.OwnerSummary == other.OwnerSummary ||
                    this.OwnerSummary != null &&
                    this.OwnerSummary.Equals(other.OwnerSummary)
                ) && 
                (
                    this.PassbackDataPacket == other.PassbackDataPacket ||
                    this.PassbackDataPacket != null &&
                    this.PassbackDataPacket.Equals(other.PassbackDataPacket)
                ) && 
                (
                    this.PassbackUrl == other.PassbackUrl ||
                    this.PassbackUrl != null &&
                    this.PassbackUrl.Equals(other.PassbackUrl)
                ) && 
                (
                    this.PracticeGameRewardsDisabledReasons == other.PracticeGameRewardsDisabledReasons ||
                    this.PracticeGameRewardsDisabledReasons != null &&
                    this.PracticeGameRewardsDisabledReasons.SequenceEqual(other.PracticeGameRewardsDisabledReasons)
                ) && 
                (
                    this.RoomName == other.RoomName ||
                    this.RoomName != null &&
                    this.RoomName.Equals(other.RoomName)
                ) && 
                (
                    this.RoomPassword == other.RoomPassword ||
                    this.RoomPassword != null &&
                    this.RoomPassword.Equals(other.RoomPassword)
                ) && 
                (
                    this.SpectatorsAllowed == other.SpectatorsAllowed ||
                    this.SpectatorsAllowed != null &&
                    this.SpectatorsAllowed.Equals(other.SpectatorsAllowed)
                ) && 
                (
                    this.TeamOne == other.TeamOne ||
                    this.TeamOne != null &&
                    this.TeamOne.SequenceEqual(other.TeamOne)
                ) && 
                (
                    this.TeamTwo == other.TeamTwo ||
                    this.TeamTwo != null &&
                    this.TeamTwo.SequenceEqual(other.TeamTwo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.GameMode != null)
                    hash = hash * 59 + this.GameMode.GetHashCode();
                if (this.GameMutators != null)
                    hash = hash * 59 + this.GameMutators.GetHashCode();
                if (this.GameState != null)
                    hash = hash * 59 + this.GameState.GetHashCode();
                if (this.GameType != null)
                    hash = hash * 59 + this.GameType.GetHashCode();
                if (this.GameTypeConfigId != null)
                    hash = hash * 59 + this.GameTypeConfigId.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.MapId != null)
                    hash = hash * 59 + this.MapId.GetHashCode();
                if (this.MaxNumPlayers != null)
                    hash = hash * 59 + this.MaxNumPlayers.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Observers != null)
                    hash = hash * 59 + this.Observers.GetHashCode();
                if (this.OptimisticLock != null)
                    hash = hash * 59 + this.OptimisticLock.GetHashCode();
                if (this.OwnerSummary != null)
                    hash = hash * 59 + this.OwnerSummary.GetHashCode();
                if (this.PassbackDataPacket != null)
                    hash = hash * 59 + this.PassbackDataPacket.GetHashCode();
                if (this.PassbackUrl != null)
                    hash = hash * 59 + this.PassbackUrl.GetHashCode();
                if (this.PracticeGameRewardsDisabledReasons != null)
                    hash = hash * 59 + this.PracticeGameRewardsDisabledReasons.GetHashCode();
                if (this.RoomName != null)
                    hash = hash * 59 + this.RoomName.GetHashCode();
                if (this.RoomPassword != null)
                    hash = hash * 59 + this.RoomPassword.GetHashCode();
                if (this.SpectatorsAllowed != null)
                    hash = hash * 59 + this.SpectatorsAllowed.GetHashCode();
                if (this.TeamOne != null)
                    hash = hash * 59 + this.TeamOne.GetHashCode();
                if (this.TeamTwo != null)
                    hash = hash * 59 + this.TeamTwo.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
