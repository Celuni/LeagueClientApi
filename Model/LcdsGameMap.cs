/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LcdsGameMap
    /// </summary>
    [DataContract]
    public partial class LcdsGameMap :  IEquatable<LcdsGameMap>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LcdsGameMap" /> class.
        /// </summary>
        /// <param name="Description">Description.</param>
        /// <param name="DisplayName">DisplayName.</param>
        /// <param name="MapId">MapId.</param>
        /// <param name="MinCustomPlayers">MinCustomPlayers.</param>
        /// <param name="Name">Name.</param>
        /// <param name="TotalPlayers">TotalPlayers.</param>
        public LcdsGameMap(string Description = default(string), string DisplayName = default(string), int? MapId = default(int?), int? MinCustomPlayers = default(int?), string Name = default(string), int? TotalPlayers = default(int?))
        {
            this.Description = Description;
            this.DisplayName = DisplayName;
            this.MapId = MapId;
            this.MinCustomPlayers = MinCustomPlayers;
            this.Name = Name;
            this.TotalPlayers = TotalPlayers;
        }
        
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets MapId
        /// </summary>
        [DataMember(Name="mapId", EmitDefaultValue=false)]
        public int? MapId { get; set; }

        /// <summary>
        /// Gets or Sets MinCustomPlayers
        /// </summary>
        [DataMember(Name="minCustomPlayers", EmitDefaultValue=false)]
        public int? MinCustomPlayers { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets TotalPlayers
        /// </summary>
        [DataMember(Name="totalPlayers", EmitDefaultValue=false)]
        public int? TotalPlayers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LcdsGameMap {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  MapId: ").Append(MapId).Append("\n");
            sb.Append("  MinCustomPlayers: ").Append(MinCustomPlayers).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TotalPlayers: ").Append(TotalPlayers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LcdsGameMap);
        }

        /// <summary>
        /// Returns true if LcdsGameMap instances are equal
        /// </summary>
        /// <param name="other">Instance of LcdsGameMap to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LcdsGameMap other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.DisplayName == other.DisplayName ||
                    this.DisplayName != null &&
                    this.DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    this.MapId == other.MapId ||
                    this.MapId != null &&
                    this.MapId.Equals(other.MapId)
                ) && 
                (
                    this.MinCustomPlayers == other.MinCustomPlayers ||
                    this.MinCustomPlayers != null &&
                    this.MinCustomPlayers.Equals(other.MinCustomPlayers)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.TotalPlayers == other.TotalPlayers ||
                    this.TotalPlayers != null &&
                    this.TotalPlayers.Equals(other.TotalPlayers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.DisplayName != null)
                    hash = hash * 59 + this.DisplayName.GetHashCode();
                if (this.MapId != null)
                    hash = hash * 59 + this.MapId.GetHashCode();
                if (this.MinCustomPlayers != null)
                    hash = hash * 59 + this.MinCustomPlayers.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.TotalPlayers != null)
                    hash = hash * 59 + this.TotalPlayers.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
