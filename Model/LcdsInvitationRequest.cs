/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LcdsInvitationRequest
    /// </summary>
    [DataContract]
    public partial class LcdsInvitationRequest :  IEquatable<LcdsInvitationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LcdsInvitationRequest" /> class.
        /// </summary>
        /// <param name="GameMetaData">GameMetaData.</param>
        /// <param name="InvitationId">InvitationId.</param>
        /// <param name="InvitationState">InvitationState.</param>
        /// <param name="InvitePayload">InvitePayload.</param>
        /// <param name="InviteType">InviteType.</param>
        /// <param name="Inviter">Inviter.</param>
        /// <param name="Owner">Owner.</param>
        public LcdsInvitationRequest(string GameMetaData = default(string), string InvitationId = default(string), LcdsInvitationState InvitationState = default(LcdsInvitationState), string InvitePayload = default(string), string InviteType = default(string), LcdsInviter Inviter = default(LcdsInviter), LcdsPlayer Owner = default(LcdsPlayer))
        {
            this.GameMetaData = GameMetaData;
            this.InvitationId = InvitationId;
            this.InvitationState = InvitationState;
            this.InvitePayload = InvitePayload;
            this.InviteType = InviteType;
            this.Inviter = Inviter;
            this.Owner = Owner;
        }
        
        /// <summary>
        /// Gets or Sets GameMetaData
        /// </summary>
        [DataMember(Name="gameMetaData", EmitDefaultValue=false)]
        public string GameMetaData { get; set; }

        /// <summary>
        /// Gets or Sets InvitationId
        /// </summary>
        [DataMember(Name="invitationId", EmitDefaultValue=false)]
        public string InvitationId { get; set; }

        /// <summary>
        /// Gets or Sets InvitationState
        /// </summary>
        [DataMember(Name="invitationState", EmitDefaultValue=false)]
        public LcdsInvitationState InvitationState { get; set; }

        /// <summary>
        /// Gets or Sets InvitePayload
        /// </summary>
        [DataMember(Name="invitePayload", EmitDefaultValue=false)]
        public string InvitePayload { get; set; }

        /// <summary>
        /// Gets or Sets InviteType
        /// </summary>
        [DataMember(Name="inviteType", EmitDefaultValue=false)]
        public string InviteType { get; set; }

        /// <summary>
        /// Gets or Sets Inviter
        /// </summary>
        [DataMember(Name="inviter", EmitDefaultValue=false)]
        public LcdsInviter Inviter { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public LcdsPlayer Owner { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LcdsInvitationRequest {\n");
            sb.Append("  GameMetaData: ").Append(GameMetaData).Append("\n");
            sb.Append("  InvitationId: ").Append(InvitationId).Append("\n");
            sb.Append("  InvitationState: ").Append(InvitationState).Append("\n");
            sb.Append("  InvitePayload: ").Append(InvitePayload).Append("\n");
            sb.Append("  InviteType: ").Append(InviteType).Append("\n");
            sb.Append("  Inviter: ").Append(Inviter).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LcdsInvitationRequest);
        }

        /// <summary>
        /// Returns true if LcdsInvitationRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of LcdsInvitationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LcdsInvitationRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.GameMetaData == other.GameMetaData ||
                    this.GameMetaData != null &&
                    this.GameMetaData.Equals(other.GameMetaData)
                ) && 
                (
                    this.InvitationId == other.InvitationId ||
                    this.InvitationId != null &&
                    this.InvitationId.Equals(other.InvitationId)
                ) && 
                (
                    this.InvitationState == other.InvitationState ||
                    this.InvitationState != null &&
                    this.InvitationState.Equals(other.InvitationState)
                ) && 
                (
                    this.InvitePayload == other.InvitePayload ||
                    this.InvitePayload != null &&
                    this.InvitePayload.Equals(other.InvitePayload)
                ) && 
                (
                    this.InviteType == other.InviteType ||
                    this.InviteType != null &&
                    this.InviteType.Equals(other.InviteType)
                ) && 
                (
                    this.Inviter == other.Inviter ||
                    this.Inviter != null &&
                    this.Inviter.Equals(other.Inviter)
                ) && 
                (
                    this.Owner == other.Owner ||
                    this.Owner != null &&
                    this.Owner.Equals(other.Owner)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.GameMetaData != null)
                    hash = hash * 59 + this.GameMetaData.GetHashCode();
                if (this.InvitationId != null)
                    hash = hash * 59 + this.InvitationId.GetHashCode();
                if (this.InvitationState != null)
                    hash = hash * 59 + this.InvitationState.GetHashCode();
                if (this.InvitePayload != null)
                    hash = hash * 59 + this.InvitePayload.GetHashCode();
                if (this.InviteType != null)
                    hash = hash * 59 + this.InviteType.GetHashCode();
                if (this.Inviter != null)
                    hash = hash * 59 + this.Inviter.GetHashCode();
                if (this.Owner != null)
                    hash = hash * 59 + this.Owner.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
