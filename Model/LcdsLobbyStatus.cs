/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LcdsLobbyStatus
    /// </summary>
    [DataContract]
    public partial class LcdsLobbyStatus :  IEquatable<LcdsLobbyStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LcdsLobbyStatus" /> class.
        /// </summary>
        /// <param name="ChatKey">ChatKey.</param>
        /// <param name="GameMetaData">GameMetaData.</param>
        /// <param name="InvitationId">InvitationId.</param>
        /// <param name="Invitees">Invitees.</param>
        /// <param name="Members">Members.</param>
        /// <param name="Owner">Owner.</param>
        public LcdsLobbyStatus(string ChatKey = default(string), string GameMetaData = default(string), string InvitationId = default(string), List<LcdsInvitee> Invitees = default(List<LcdsInvitee>), List<LcdsMember> Members = default(List<LcdsMember>), LcdsPlayer Owner = default(LcdsPlayer))
        {
            this.ChatKey = ChatKey;
            this.GameMetaData = GameMetaData;
            this.InvitationId = InvitationId;
            this.Invitees = Invitees;
            this.Members = Members;
            this.Owner = Owner;
        }
        
        /// <summary>
        /// Gets or Sets ChatKey
        /// </summary>
        [DataMember(Name="chatKey", EmitDefaultValue=false)]
        public string ChatKey { get; set; }

        /// <summary>
        /// Gets or Sets GameMetaData
        /// </summary>
        [DataMember(Name="gameMetaData", EmitDefaultValue=false)]
        public string GameMetaData { get; set; }

        /// <summary>
        /// Gets or Sets InvitationId
        /// </summary>
        [DataMember(Name="invitationId", EmitDefaultValue=false)]
        public string InvitationId { get; set; }

        /// <summary>
        /// Gets or Sets Invitees
        /// </summary>
        [DataMember(Name="invitees", EmitDefaultValue=false)]
        public List<LcdsInvitee> Invitees { get; set; }

        /// <summary>
        /// Gets or Sets Members
        /// </summary>
        [DataMember(Name="members", EmitDefaultValue=false)]
        public List<LcdsMember> Members { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public LcdsPlayer Owner { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LcdsLobbyStatus {\n");
            sb.Append("  ChatKey: ").Append(ChatKey).Append("\n");
            sb.Append("  GameMetaData: ").Append(GameMetaData).Append("\n");
            sb.Append("  InvitationId: ").Append(InvitationId).Append("\n");
            sb.Append("  Invitees: ").Append(Invitees).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LcdsLobbyStatus);
        }

        /// <summary>
        /// Returns true if LcdsLobbyStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of LcdsLobbyStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LcdsLobbyStatus other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ChatKey == other.ChatKey ||
                    this.ChatKey != null &&
                    this.ChatKey.Equals(other.ChatKey)
                ) && 
                (
                    this.GameMetaData == other.GameMetaData ||
                    this.GameMetaData != null &&
                    this.GameMetaData.Equals(other.GameMetaData)
                ) && 
                (
                    this.InvitationId == other.InvitationId ||
                    this.InvitationId != null &&
                    this.InvitationId.Equals(other.InvitationId)
                ) && 
                (
                    this.Invitees == other.Invitees ||
                    this.Invitees != null &&
                    this.Invitees.SequenceEqual(other.Invitees)
                ) && 
                (
                    this.Members == other.Members ||
                    this.Members != null &&
                    this.Members.SequenceEqual(other.Members)
                ) && 
                (
                    this.Owner == other.Owner ||
                    this.Owner != null &&
                    this.Owner.Equals(other.Owner)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ChatKey != null)
                    hash = hash * 59 + this.ChatKey.GetHashCode();
                if (this.GameMetaData != null)
                    hash = hash * 59 + this.GameMetaData.GetHashCode();
                if (this.InvitationId != null)
                    hash = hash * 59 + this.InvitationId.GetHashCode();
                if (this.Invitees != null)
                    hash = hash * 59 + this.Invitees.GetHashCode();
                if (this.Members != null)
                    hash = hash * 59 + this.Members.GetHashCode();
                if (this.Owner != null)
                    hash = hash * 59 + this.Owner.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
