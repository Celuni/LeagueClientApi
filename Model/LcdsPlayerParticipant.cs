/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LcdsPlayerParticipant
    /// </summary>
    [DataContract]
    public partial class LcdsPlayerParticipant :  IEquatable<LcdsPlayerParticipant>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LcdsPlayerParticipant" /> class.
        /// </summary>
        /// <param name="BotSkillLevel">BotSkillLevel.</param>
        /// <param name="SummonerId">SummonerId.</param>
        /// <param name="SummonerInternalName">SummonerInternalName.</param>
        /// <param name="SummonerName">SummonerName.</param>
        public LcdsPlayerParticipant(int? BotSkillLevel = default(int?), long? SummonerId = default(long?), string SummonerInternalName = default(string), string SummonerName = default(string))
        {
            this.BotSkillLevel = BotSkillLevel;
            this.SummonerId = SummonerId;
            this.SummonerInternalName = SummonerInternalName;
            this.SummonerName = SummonerName;
        }
        
        /// <summary>
        /// Gets or Sets BotSkillLevel
        /// </summary>
        [DataMember(Name="botSkillLevel", EmitDefaultValue=false)]
        public int? BotSkillLevel { get; set; }

        /// <summary>
        /// Gets or Sets SummonerId
        /// </summary>
        [DataMember(Name="summonerId", EmitDefaultValue=false)]
        public long? SummonerId { get; set; }

        /// <summary>
        /// Gets or Sets SummonerInternalName
        /// </summary>
        [DataMember(Name="summonerInternalName", EmitDefaultValue=false)]
        public string SummonerInternalName { get; set; }

        /// <summary>
        /// Gets or Sets SummonerName
        /// </summary>
        [DataMember(Name="summonerName", EmitDefaultValue=false)]
        public string SummonerName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LcdsPlayerParticipant {\n");
            sb.Append("  BotSkillLevel: ").Append(BotSkillLevel).Append("\n");
            sb.Append("  SummonerId: ").Append(SummonerId).Append("\n");
            sb.Append("  SummonerInternalName: ").Append(SummonerInternalName).Append("\n");
            sb.Append("  SummonerName: ").Append(SummonerName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LcdsPlayerParticipant);
        }

        /// <summary>
        /// Returns true if LcdsPlayerParticipant instances are equal
        /// </summary>
        /// <param name="other">Instance of LcdsPlayerParticipant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LcdsPlayerParticipant other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BotSkillLevel == other.BotSkillLevel ||
                    this.BotSkillLevel != null &&
                    this.BotSkillLevel.Equals(other.BotSkillLevel)
                ) && 
                (
                    this.SummonerId == other.SummonerId ||
                    this.SummonerId != null &&
                    this.SummonerId.Equals(other.SummonerId)
                ) && 
                (
                    this.SummonerInternalName == other.SummonerInternalName ||
                    this.SummonerInternalName != null &&
                    this.SummonerInternalName.Equals(other.SummonerInternalName)
                ) && 
                (
                    this.SummonerName == other.SummonerName ||
                    this.SummonerName != null &&
                    this.SummonerName.Equals(other.SummonerName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BotSkillLevel != null)
                    hash = hash * 59 + this.BotSkillLevel.GetHashCode();
                if (this.SummonerId != null)
                    hash = hash * 59 + this.SummonerId.GetHashCode();
                if (this.SummonerInternalName != null)
                    hash = hash * 59 + this.SummonerInternalName.GetHashCode();
                if (this.SummonerName != null)
                    hash = hash * 59 + this.SummonerName.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
