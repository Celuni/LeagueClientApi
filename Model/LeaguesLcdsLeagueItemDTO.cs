/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LeaguesLcdsLeagueItemDTO
    /// </summary>
    [DataContract]
    public partial class LeaguesLcdsLeagueItemDTO :  IEquatable<LeaguesLcdsLeagueItemDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LeaguesLcdsLeagueItemDTO" /> class.
        /// </summary>
        /// <param name="ApexDaysUntilDecay">ApexDaysUntilDecay.</param>
        /// <param name="DemotionWarning">DemotionWarning.</param>
        /// <param name="DisplayDecayWarning">DisplayDecayWarning.</param>
        /// <param name="FreshBlood">FreshBlood.</param>
        /// <param name="HotStreak">HotStreak.</param>
        /// <param name="Inactive">Inactive.</param>
        /// <param name="InactivityStatus">InactivityStatus.</param>
        /// <param name="LeaguePoints">LeaguePoints.</param>
        /// <param name="Losses">Losses.</param>
        /// <param name="MiniSeries">MiniSeries.</param>
        /// <param name="PlayerOrTeamId">PlayerOrTeamId.</param>
        /// <param name="PlayerOrTeamName">PlayerOrTeamName.</param>
        /// <param name="PreviousDayLeaguePosition">PreviousDayLeaguePosition.</param>
        /// <param name="QueueType">QueueType.</param>
        /// <param name="Rank">Rank.</param>
        /// <param name="Tier">Tier.</param>
        /// <param name="TimeUntilInactivityStatusChanges">TimeUntilInactivityStatusChanges.</param>
        /// <param name="Veteran">Veteran.</param>
        /// <param name="Wins">Wins.</param>
        public LeaguesLcdsLeagueItemDTO(int? ApexDaysUntilDecay = default(int?), long? DemotionWarning = default(long?), bool? DisplayDecayWarning = default(bool?), bool? FreshBlood = default(bool?), bool? HotStreak = default(bool?), bool? Inactive = default(bool?), string InactivityStatus = default(string), int? LeaguePoints = default(int?), long? Losses = default(long?), LeaguesLcdsMiniSeriesDTO MiniSeries = default(LeaguesLcdsMiniSeriesDTO), string PlayerOrTeamId = default(string), string PlayerOrTeamName = default(string), long? PreviousDayLeaguePosition = default(long?), LeaguesLcdsQueueType QueueType = default(LeaguesLcdsQueueType), LeaguesLcdsLeagueRank Rank = default(LeaguesLcdsLeagueRank), LeaguesLcdsLeagueTier Tier = default(LeaguesLcdsLeagueTier), long? TimeUntilInactivityStatusChanges = default(long?), bool? Veteran = default(bool?), long? Wins = default(long?))
        {
            this.ApexDaysUntilDecay = ApexDaysUntilDecay;
            this.DemotionWarning = DemotionWarning;
            this.DisplayDecayWarning = DisplayDecayWarning;
            this.FreshBlood = FreshBlood;
            this.HotStreak = HotStreak;
            this.Inactive = Inactive;
            this.InactivityStatus = InactivityStatus;
            this.LeaguePoints = LeaguePoints;
            this.Losses = Losses;
            this.MiniSeries = MiniSeries;
            this.PlayerOrTeamId = PlayerOrTeamId;
            this.PlayerOrTeamName = PlayerOrTeamName;
            this.PreviousDayLeaguePosition = PreviousDayLeaguePosition;
            this.QueueType = QueueType;
            this.Rank = Rank;
            this.Tier = Tier;
            this.TimeUntilInactivityStatusChanges = TimeUntilInactivityStatusChanges;
            this.Veteran = Veteran;
            this.Wins = Wins;
        }
        
        /// <summary>
        /// Gets or Sets ApexDaysUntilDecay
        /// </summary>
        [DataMember(Name="apexDaysUntilDecay", EmitDefaultValue=false)]
        public int? ApexDaysUntilDecay { get; set; }

        /// <summary>
        /// Gets or Sets DemotionWarning
        /// </summary>
        [DataMember(Name="demotionWarning", EmitDefaultValue=false)]
        public long? DemotionWarning { get; set; }

        /// <summary>
        /// Gets or Sets DisplayDecayWarning
        /// </summary>
        [DataMember(Name="displayDecayWarning", EmitDefaultValue=false)]
        public bool? DisplayDecayWarning { get; set; }

        /// <summary>
        /// Gets or Sets FreshBlood
        /// </summary>
        [DataMember(Name="freshBlood", EmitDefaultValue=false)]
        public bool? FreshBlood { get; set; }

        /// <summary>
        /// Gets or Sets HotStreak
        /// </summary>
        [DataMember(Name="hotStreak", EmitDefaultValue=false)]
        public bool? HotStreak { get; set; }

        /// <summary>
        /// Gets or Sets Inactive
        /// </summary>
        [DataMember(Name="inactive", EmitDefaultValue=false)]
        public bool? Inactive { get; set; }

        /// <summary>
        /// Gets or Sets InactivityStatus
        /// </summary>
        [DataMember(Name="inactivityStatus", EmitDefaultValue=false)]
        public string InactivityStatus { get; set; }

        /// <summary>
        /// Gets or Sets LeaguePoints
        /// </summary>
        [DataMember(Name="leaguePoints", EmitDefaultValue=false)]
        public int? LeaguePoints { get; set; }

        /// <summary>
        /// Gets or Sets Losses
        /// </summary>
        [DataMember(Name="losses", EmitDefaultValue=false)]
        public long? Losses { get; set; }

        /// <summary>
        /// Gets or Sets MiniSeries
        /// </summary>
        [DataMember(Name="miniSeries", EmitDefaultValue=false)]
        public LeaguesLcdsMiniSeriesDTO MiniSeries { get; set; }

        /// <summary>
        /// Gets or Sets PlayerOrTeamId
        /// </summary>
        [DataMember(Name="playerOrTeamId", EmitDefaultValue=false)]
        public string PlayerOrTeamId { get; set; }

        /// <summary>
        /// Gets or Sets PlayerOrTeamName
        /// </summary>
        [DataMember(Name="playerOrTeamName", EmitDefaultValue=false)]
        public string PlayerOrTeamName { get; set; }

        /// <summary>
        /// Gets or Sets PreviousDayLeaguePosition
        /// </summary>
        [DataMember(Name="previousDayLeaguePosition", EmitDefaultValue=false)]
        public long? PreviousDayLeaguePosition { get; set; }

        /// <summary>
        /// Gets or Sets QueueType
        /// </summary>
        [DataMember(Name="queueType", EmitDefaultValue=false)]
        public LeaguesLcdsQueueType QueueType { get; set; }

        /// <summary>
        /// Gets or Sets Rank
        /// </summary>
        [DataMember(Name="rank", EmitDefaultValue=false)]
        public LeaguesLcdsLeagueRank Rank { get; set; }

        /// <summary>
        /// Gets or Sets Tier
        /// </summary>
        [DataMember(Name="tier", EmitDefaultValue=false)]
        public LeaguesLcdsLeagueTier Tier { get; set; }

        /// <summary>
        /// Gets or Sets TimeUntilInactivityStatusChanges
        /// </summary>
        [DataMember(Name="timeUntilInactivityStatusChanges", EmitDefaultValue=false)]
        public long? TimeUntilInactivityStatusChanges { get; set; }

        /// <summary>
        /// Gets or Sets Veteran
        /// </summary>
        [DataMember(Name="veteran", EmitDefaultValue=false)]
        public bool? Veteran { get; set; }

        /// <summary>
        /// Gets or Sets Wins
        /// </summary>
        [DataMember(Name="wins", EmitDefaultValue=false)]
        public long? Wins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LeaguesLcdsLeagueItemDTO {\n");
            sb.Append("  ApexDaysUntilDecay: ").Append(ApexDaysUntilDecay).Append("\n");
            sb.Append("  DemotionWarning: ").Append(DemotionWarning).Append("\n");
            sb.Append("  DisplayDecayWarning: ").Append(DisplayDecayWarning).Append("\n");
            sb.Append("  FreshBlood: ").Append(FreshBlood).Append("\n");
            sb.Append("  HotStreak: ").Append(HotStreak).Append("\n");
            sb.Append("  Inactive: ").Append(Inactive).Append("\n");
            sb.Append("  InactivityStatus: ").Append(InactivityStatus).Append("\n");
            sb.Append("  LeaguePoints: ").Append(LeaguePoints).Append("\n");
            sb.Append("  Losses: ").Append(Losses).Append("\n");
            sb.Append("  MiniSeries: ").Append(MiniSeries).Append("\n");
            sb.Append("  PlayerOrTeamId: ").Append(PlayerOrTeamId).Append("\n");
            sb.Append("  PlayerOrTeamName: ").Append(PlayerOrTeamName).Append("\n");
            sb.Append("  PreviousDayLeaguePosition: ").Append(PreviousDayLeaguePosition).Append("\n");
            sb.Append("  QueueType: ").Append(QueueType).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  TimeUntilInactivityStatusChanges: ").Append(TimeUntilInactivityStatusChanges).Append("\n");
            sb.Append("  Veteran: ").Append(Veteran).Append("\n");
            sb.Append("  Wins: ").Append(Wins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LeaguesLcdsLeagueItemDTO);
        }

        /// <summary>
        /// Returns true if LeaguesLcdsLeagueItemDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of LeaguesLcdsLeagueItemDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LeaguesLcdsLeagueItemDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ApexDaysUntilDecay == other.ApexDaysUntilDecay ||
                    this.ApexDaysUntilDecay != null &&
                    this.ApexDaysUntilDecay.Equals(other.ApexDaysUntilDecay)
                ) && 
                (
                    this.DemotionWarning == other.DemotionWarning ||
                    this.DemotionWarning != null &&
                    this.DemotionWarning.Equals(other.DemotionWarning)
                ) && 
                (
                    this.DisplayDecayWarning == other.DisplayDecayWarning ||
                    this.DisplayDecayWarning != null &&
                    this.DisplayDecayWarning.Equals(other.DisplayDecayWarning)
                ) && 
                (
                    this.FreshBlood == other.FreshBlood ||
                    this.FreshBlood != null &&
                    this.FreshBlood.Equals(other.FreshBlood)
                ) && 
                (
                    this.HotStreak == other.HotStreak ||
                    this.HotStreak != null &&
                    this.HotStreak.Equals(other.HotStreak)
                ) && 
                (
                    this.Inactive == other.Inactive ||
                    this.Inactive != null &&
                    this.Inactive.Equals(other.Inactive)
                ) && 
                (
                    this.InactivityStatus == other.InactivityStatus ||
                    this.InactivityStatus != null &&
                    this.InactivityStatus.Equals(other.InactivityStatus)
                ) && 
                (
                    this.LeaguePoints == other.LeaguePoints ||
                    this.LeaguePoints != null &&
                    this.LeaguePoints.Equals(other.LeaguePoints)
                ) && 
                (
                    this.Losses == other.Losses ||
                    this.Losses != null &&
                    this.Losses.Equals(other.Losses)
                ) && 
                (
                    this.MiniSeries == other.MiniSeries ||
                    this.MiniSeries != null &&
                    this.MiniSeries.Equals(other.MiniSeries)
                ) && 
                (
                    this.PlayerOrTeamId == other.PlayerOrTeamId ||
                    this.PlayerOrTeamId != null &&
                    this.PlayerOrTeamId.Equals(other.PlayerOrTeamId)
                ) && 
                (
                    this.PlayerOrTeamName == other.PlayerOrTeamName ||
                    this.PlayerOrTeamName != null &&
                    this.PlayerOrTeamName.Equals(other.PlayerOrTeamName)
                ) && 
                (
                    this.PreviousDayLeaguePosition == other.PreviousDayLeaguePosition ||
                    this.PreviousDayLeaguePosition != null &&
                    this.PreviousDayLeaguePosition.Equals(other.PreviousDayLeaguePosition)
                ) && 
                (
                    this.QueueType == other.QueueType ||
                    this.QueueType != null &&
                    this.QueueType.Equals(other.QueueType)
                ) && 
                (
                    this.Rank == other.Rank ||
                    this.Rank != null &&
                    this.Rank.Equals(other.Rank)
                ) && 
                (
                    this.Tier == other.Tier ||
                    this.Tier != null &&
                    this.Tier.Equals(other.Tier)
                ) && 
                (
                    this.TimeUntilInactivityStatusChanges == other.TimeUntilInactivityStatusChanges ||
                    this.TimeUntilInactivityStatusChanges != null &&
                    this.TimeUntilInactivityStatusChanges.Equals(other.TimeUntilInactivityStatusChanges)
                ) && 
                (
                    this.Veteran == other.Veteran ||
                    this.Veteran != null &&
                    this.Veteran.Equals(other.Veteran)
                ) && 
                (
                    this.Wins == other.Wins ||
                    this.Wins != null &&
                    this.Wins.Equals(other.Wins)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ApexDaysUntilDecay != null)
                    hash = hash * 59 + this.ApexDaysUntilDecay.GetHashCode();
                if (this.DemotionWarning != null)
                    hash = hash * 59 + this.DemotionWarning.GetHashCode();
                if (this.DisplayDecayWarning != null)
                    hash = hash * 59 + this.DisplayDecayWarning.GetHashCode();
                if (this.FreshBlood != null)
                    hash = hash * 59 + this.FreshBlood.GetHashCode();
                if (this.HotStreak != null)
                    hash = hash * 59 + this.HotStreak.GetHashCode();
                if (this.Inactive != null)
                    hash = hash * 59 + this.Inactive.GetHashCode();
                if (this.InactivityStatus != null)
                    hash = hash * 59 + this.InactivityStatus.GetHashCode();
                if (this.LeaguePoints != null)
                    hash = hash * 59 + this.LeaguePoints.GetHashCode();
                if (this.Losses != null)
                    hash = hash * 59 + this.Losses.GetHashCode();
                if (this.MiniSeries != null)
                    hash = hash * 59 + this.MiniSeries.GetHashCode();
                if (this.PlayerOrTeamId != null)
                    hash = hash * 59 + this.PlayerOrTeamId.GetHashCode();
                if (this.PlayerOrTeamName != null)
                    hash = hash * 59 + this.PlayerOrTeamName.GetHashCode();
                if (this.PreviousDayLeaguePosition != null)
                    hash = hash * 59 + this.PreviousDayLeaguePosition.GetHashCode();
                if (this.QueueType != null)
                    hash = hash * 59 + this.QueueType.GetHashCode();
                if (this.Rank != null)
                    hash = hash * 59 + this.Rank.GetHashCode();
                if (this.Tier != null)
                    hash = hash * 59 + this.Tier.GetHashCode();
                if (this.TimeUntilInactivityStatusChanges != null)
                    hash = hash * 59 + this.TimeUntilInactivityStatusChanges.GetHashCode();
                if (this.Veteran != null)
                    hash = hash * 59 + this.Veteran.GetHashCode();
                if (this.Wins != null)
                    hash = hash * 59 + this.Wins.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
