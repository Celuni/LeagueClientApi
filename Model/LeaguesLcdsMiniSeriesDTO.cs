/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LeaguesLcdsMiniSeriesDTO
    /// </summary>
    [DataContract]
    public partial class LeaguesLcdsMiniSeriesDTO :  IEquatable<LeaguesLcdsMiniSeriesDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LeaguesLcdsMiniSeriesDTO" /> class.
        /// </summary>
        /// <param name="Losses">Losses.</param>
        /// <param name="Progress">Progress.</param>
        /// <param name="Target">Target.</param>
        /// <param name="TimeLeftToPlayMillis">TimeLeftToPlayMillis.</param>
        /// <param name="Wins">Wins.</param>
        public LeaguesLcdsMiniSeriesDTO(long? Losses = default(long?), string Progress = default(string), long? Target = default(long?), long? TimeLeftToPlayMillis = default(long?), long? Wins = default(long?))
        {
            this.Losses = Losses;
            this.Progress = Progress;
            this.Target = Target;
            this.TimeLeftToPlayMillis = TimeLeftToPlayMillis;
            this.Wins = Wins;
        }
        
        /// <summary>
        /// Gets or Sets Losses
        /// </summary>
        [DataMember(Name="losses", EmitDefaultValue=false)]
        public long? Losses { get; set; }

        /// <summary>
        /// Gets or Sets Progress
        /// </summary>
        [DataMember(Name="progress", EmitDefaultValue=false)]
        public string Progress { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name="target", EmitDefaultValue=false)]
        public long? Target { get; set; }

        /// <summary>
        /// Gets or Sets TimeLeftToPlayMillis
        /// </summary>
        [DataMember(Name="timeLeftToPlayMillis", EmitDefaultValue=false)]
        public long? TimeLeftToPlayMillis { get; set; }

        /// <summary>
        /// Gets or Sets Wins
        /// </summary>
        [DataMember(Name="wins", EmitDefaultValue=false)]
        public long? Wins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LeaguesLcdsMiniSeriesDTO {\n");
            sb.Append("  Losses: ").Append(Losses).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  TimeLeftToPlayMillis: ").Append(TimeLeftToPlayMillis).Append("\n");
            sb.Append("  Wins: ").Append(Wins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LeaguesLcdsMiniSeriesDTO);
        }

        /// <summary>
        /// Returns true if LeaguesLcdsMiniSeriesDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of LeaguesLcdsMiniSeriesDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LeaguesLcdsMiniSeriesDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Losses == other.Losses ||
                    this.Losses != null &&
                    this.Losses.Equals(other.Losses)
                ) && 
                (
                    this.Progress == other.Progress ||
                    this.Progress != null &&
                    this.Progress.Equals(other.Progress)
                ) && 
                (
                    this.Target == other.Target ||
                    this.Target != null &&
                    this.Target.Equals(other.Target)
                ) && 
                (
                    this.TimeLeftToPlayMillis == other.TimeLeftToPlayMillis ||
                    this.TimeLeftToPlayMillis != null &&
                    this.TimeLeftToPlayMillis.Equals(other.TimeLeftToPlayMillis)
                ) && 
                (
                    this.Wins == other.Wins ||
                    this.Wins != null &&
                    this.Wins.Equals(other.Wins)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Losses != null)
                    hash = hash * 59 + this.Losses.GetHashCode();
                if (this.Progress != null)
                    hash = hash * 59 + this.Progress.GetHashCode();
                if (this.Target != null)
                    hash = hash * 59 + this.Target.GetHashCode();
                if (this.TimeLeftToPlayMillis != null)
                    hash = hash * 59 + this.TimeLeftToPlayMillis.GetHashCode();
                if (this.Wins != null)
                    hash = hash * 59 + this.Wins.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
