/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolChampSelectLegacyQueueGameTypeConfig
    /// </summary>
    [DataContract]
    public partial class LolChampSelectLegacyQueueGameTypeConfig :  IEquatable<LolChampSelectLegacyQueueGameTypeConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolChampSelectLegacyQueueGameTypeConfig" /> class.
        /// </summary>
        /// <param name="AllowTrades">AllowTrades.</param>
        /// <param name="BattleBoost">BattleBoost.</param>
        /// <param name="MaxAllowableBans">MaxAllowableBans.</param>
        public LolChampSelectLegacyQueueGameTypeConfig(bool? AllowTrades = default(bool?), bool? BattleBoost = default(bool?), int? MaxAllowableBans = default(int?))
        {
            this.AllowTrades = AllowTrades;
            this.BattleBoost = BattleBoost;
            this.MaxAllowableBans = MaxAllowableBans;
        }
        
        /// <summary>
        /// Gets or Sets AllowTrades
        /// </summary>
        [DataMember(Name="allowTrades", EmitDefaultValue=false)]
        public bool? AllowTrades { get; set; }

        /// <summary>
        /// Gets or Sets BattleBoost
        /// </summary>
        [DataMember(Name="battleBoost", EmitDefaultValue=false)]
        public bool? BattleBoost { get; set; }

        /// <summary>
        /// Gets or Sets MaxAllowableBans
        /// </summary>
        [DataMember(Name="maxAllowableBans", EmitDefaultValue=false)]
        public int? MaxAllowableBans { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolChampSelectLegacyQueueGameTypeConfig {\n");
            sb.Append("  AllowTrades: ").Append(AllowTrades).Append("\n");
            sb.Append("  BattleBoost: ").Append(BattleBoost).Append("\n");
            sb.Append("  MaxAllowableBans: ").Append(MaxAllowableBans).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolChampSelectLegacyQueueGameTypeConfig);
        }

        /// <summary>
        /// Returns true if LolChampSelectLegacyQueueGameTypeConfig instances are equal
        /// </summary>
        /// <param name="other">Instance of LolChampSelectLegacyQueueGameTypeConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolChampSelectLegacyQueueGameTypeConfig other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AllowTrades == other.AllowTrades ||
                    this.AllowTrades != null &&
                    this.AllowTrades.Equals(other.AllowTrades)
                ) && 
                (
                    this.BattleBoost == other.BattleBoost ||
                    this.BattleBoost != null &&
                    this.BattleBoost.Equals(other.BattleBoost)
                ) && 
                (
                    this.MaxAllowableBans == other.MaxAllowableBans ||
                    this.MaxAllowableBans != null &&
                    this.MaxAllowableBans.Equals(other.MaxAllowableBans)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AllowTrades != null)
                    hash = hash * 59 + this.AllowTrades.GetHashCode();
                if (this.BattleBoost != null)
                    hash = hash * 59 + this.BattleBoost.GetHashCode();
                if (this.MaxAllowableBans != null)
                    hash = hash * 59 + this.MaxAllowableBans.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
