/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolChampionsCollectionsChampionMinimal
    /// </summary>
    [DataContract]
    public partial class LolChampionsCollectionsChampionMinimal :  IEquatable<LolChampionsCollectionsChampionMinimal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolChampionsCollectionsChampionMinimal" /> class.
        /// </summary>
        /// <param name="Active">Active.</param>
        /// <param name="Alias">Alias.</param>
        /// <param name="BanVoPath">BanVoPath.</param>
        /// <param name="BotEnabled">BotEnabled.</param>
        /// <param name="ChooseVoPath">ChooseVoPath.</param>
        /// <param name="DisabledQueues">DisabledQueues.</param>
        /// <param name="FreeToPlay">FreeToPlay.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Ownership">Ownership.</param>
        /// <param name="Purchased">Purchased.</param>
        /// <param name="RankedPlayEnabled">RankedPlayEnabled.</param>
        /// <param name="Roles">Roles.</param>
        /// <param name="SquarePortraitPath">SquarePortraitPath.</param>
        /// <param name="StingerSfxPath">StingerSfxPath.</param>
        public LolChampionsCollectionsChampionMinimal(bool? Active = default(bool?), string Alias = default(string), string BanVoPath = default(string), bool? BotEnabled = default(bool?), string ChooseVoPath = default(string), List<string> DisabledQueues = default(List<string>), bool? FreeToPlay = default(bool?), int? Id = default(int?), string Name = default(string), LolChampionsCollectionsOwnership Ownership = default(LolChampionsCollectionsOwnership), long? Purchased = default(long?), bool? RankedPlayEnabled = default(bool?), List<string> Roles = default(List<string>), string SquarePortraitPath = default(string), string StingerSfxPath = default(string))
        {
            this.Active = Active;
            this.Alias = Alias;
            this.BanVoPath = BanVoPath;
            this.BotEnabled = BotEnabled;
            this.ChooseVoPath = ChooseVoPath;
            this.DisabledQueues = DisabledQueues;
            this.FreeToPlay = FreeToPlay;
            this.Id = Id;
            this.Name = Name;
            this.Ownership = Ownership;
            this.Purchased = Purchased;
            this.RankedPlayEnabled = RankedPlayEnabled;
            this.Roles = Roles;
            this.SquarePortraitPath = SquarePortraitPath;
            this.StingerSfxPath = StingerSfxPath;
        }
        
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or Sets Alias
        /// </summary>
        [DataMember(Name="alias", EmitDefaultValue=false)]
        public string Alias { get; set; }

        /// <summary>
        /// Gets or Sets BanVoPath
        /// </summary>
        [DataMember(Name="banVoPath", EmitDefaultValue=false)]
        public string BanVoPath { get; set; }

        /// <summary>
        /// Gets or Sets BotEnabled
        /// </summary>
        [DataMember(Name="botEnabled", EmitDefaultValue=false)]
        public bool? BotEnabled { get; set; }

        /// <summary>
        /// Gets or Sets ChooseVoPath
        /// </summary>
        [DataMember(Name="chooseVoPath", EmitDefaultValue=false)]
        public string ChooseVoPath { get; set; }

        /// <summary>
        /// Gets or Sets DisabledQueues
        /// </summary>
        [DataMember(Name="disabledQueues", EmitDefaultValue=false)]
        public List<string> DisabledQueues { get; set; }

        /// <summary>
        /// Gets or Sets FreeToPlay
        /// </summary>
        [DataMember(Name="freeToPlay", EmitDefaultValue=false)]
        public bool? FreeToPlay { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Ownership
        /// </summary>
        [DataMember(Name="ownership", EmitDefaultValue=false)]
        public LolChampionsCollectionsOwnership Ownership { get; set; }

        /// <summary>
        /// Gets or Sets Purchased
        /// </summary>
        [DataMember(Name="purchased", EmitDefaultValue=false)]
        public long? Purchased { get; set; }

        /// <summary>
        /// Gets or Sets RankedPlayEnabled
        /// </summary>
        [DataMember(Name="rankedPlayEnabled", EmitDefaultValue=false)]
        public bool? RankedPlayEnabled { get; set; }

        /// <summary>
        /// Gets or Sets Roles
        /// </summary>
        [DataMember(Name="roles", EmitDefaultValue=false)]
        public List<string> Roles { get; set; }

        /// <summary>
        /// Gets or Sets SquarePortraitPath
        /// </summary>
        [DataMember(Name="squarePortraitPath", EmitDefaultValue=false)]
        public string SquarePortraitPath { get; set; }

        /// <summary>
        /// Gets or Sets StingerSfxPath
        /// </summary>
        [DataMember(Name="stingerSfxPath", EmitDefaultValue=false)]
        public string StingerSfxPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolChampionsCollectionsChampionMinimal {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  BanVoPath: ").Append(BanVoPath).Append("\n");
            sb.Append("  BotEnabled: ").Append(BotEnabled).Append("\n");
            sb.Append("  ChooseVoPath: ").Append(ChooseVoPath).Append("\n");
            sb.Append("  DisabledQueues: ").Append(DisabledQueues).Append("\n");
            sb.Append("  FreeToPlay: ").Append(FreeToPlay).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Ownership: ").Append(Ownership).Append("\n");
            sb.Append("  Purchased: ").Append(Purchased).Append("\n");
            sb.Append("  RankedPlayEnabled: ").Append(RankedPlayEnabled).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  SquarePortraitPath: ").Append(SquarePortraitPath).Append("\n");
            sb.Append("  StingerSfxPath: ").Append(StingerSfxPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolChampionsCollectionsChampionMinimal);
        }

        /// <summary>
        /// Returns true if LolChampionsCollectionsChampionMinimal instances are equal
        /// </summary>
        /// <param name="other">Instance of LolChampionsCollectionsChampionMinimal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolChampionsCollectionsChampionMinimal other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Active == other.Active ||
                    this.Active != null &&
                    this.Active.Equals(other.Active)
                ) && 
                (
                    this.Alias == other.Alias ||
                    this.Alias != null &&
                    this.Alias.Equals(other.Alias)
                ) && 
                (
                    this.BanVoPath == other.BanVoPath ||
                    this.BanVoPath != null &&
                    this.BanVoPath.Equals(other.BanVoPath)
                ) && 
                (
                    this.BotEnabled == other.BotEnabled ||
                    this.BotEnabled != null &&
                    this.BotEnabled.Equals(other.BotEnabled)
                ) && 
                (
                    this.ChooseVoPath == other.ChooseVoPath ||
                    this.ChooseVoPath != null &&
                    this.ChooseVoPath.Equals(other.ChooseVoPath)
                ) && 
                (
                    this.DisabledQueues == other.DisabledQueues ||
                    this.DisabledQueues != null &&
                    this.DisabledQueues.SequenceEqual(other.DisabledQueues)
                ) && 
                (
                    this.FreeToPlay == other.FreeToPlay ||
                    this.FreeToPlay != null &&
                    this.FreeToPlay.Equals(other.FreeToPlay)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Ownership == other.Ownership ||
                    this.Ownership != null &&
                    this.Ownership.Equals(other.Ownership)
                ) && 
                (
                    this.Purchased == other.Purchased ||
                    this.Purchased != null &&
                    this.Purchased.Equals(other.Purchased)
                ) && 
                (
                    this.RankedPlayEnabled == other.RankedPlayEnabled ||
                    this.RankedPlayEnabled != null &&
                    this.RankedPlayEnabled.Equals(other.RankedPlayEnabled)
                ) && 
                (
                    this.Roles == other.Roles ||
                    this.Roles != null &&
                    this.Roles.SequenceEqual(other.Roles)
                ) && 
                (
                    this.SquarePortraitPath == other.SquarePortraitPath ||
                    this.SquarePortraitPath != null &&
                    this.SquarePortraitPath.Equals(other.SquarePortraitPath)
                ) && 
                (
                    this.StingerSfxPath == other.StingerSfxPath ||
                    this.StingerSfxPath != null &&
                    this.StingerSfxPath.Equals(other.StingerSfxPath)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Active != null)
                    hash = hash * 59 + this.Active.GetHashCode();
                if (this.Alias != null)
                    hash = hash * 59 + this.Alias.GetHashCode();
                if (this.BanVoPath != null)
                    hash = hash * 59 + this.BanVoPath.GetHashCode();
                if (this.BotEnabled != null)
                    hash = hash * 59 + this.BotEnabled.GetHashCode();
                if (this.ChooseVoPath != null)
                    hash = hash * 59 + this.ChooseVoPath.GetHashCode();
                if (this.DisabledQueues != null)
                    hash = hash * 59 + this.DisabledQueues.GetHashCode();
                if (this.FreeToPlay != null)
                    hash = hash * 59 + this.FreeToPlay.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Ownership != null)
                    hash = hash * 59 + this.Ownership.GetHashCode();
                if (this.Purchased != null)
                    hash = hash * 59 + this.Purchased.GetHashCode();
                if (this.RankedPlayEnabled != null)
                    hash = hash * 59 + this.RankedPlayEnabled.GetHashCode();
                if (this.Roles != null)
                    hash = hash * 59 + this.Roles.GetHashCode();
                if (this.SquarePortraitPath != null)
                    hash = hash * 59 + this.SquarePortraitPath.GetHashCode();
                if (this.StingerSfxPath != null)
                    hash = hash * 59 + this.StingerSfxPath.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
