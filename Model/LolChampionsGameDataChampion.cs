/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolChampionsGameDataChampion
    /// </summary>
    [DataContract]
    public partial class LolChampionsGameDataChampion :  IEquatable<LolChampionsGameDataChampion>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolChampionsGameDataChampion" /> class.
        /// </summary>
        /// <param name="Alias">Alias.</param>
        /// <param name="BanVoPath">BanVoPath.</param>
        /// <param name="ChooseVoPath">ChooseVoPath.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Passive">Passive.</param>
        /// <param name="Roles">Roles.</param>
        /// <param name="Skins">Skins.</param>
        /// <param name="Spells">Spells.</param>
        /// <param name="SquarePortraitPath">SquarePortraitPath.</param>
        /// <param name="StingerSfxPath">StingerSfxPath.</param>
        public LolChampionsGameDataChampion(string Alias = default(string), string BanVoPath = default(string), string ChooseVoPath = default(string), int? Id = default(int?), string Name = default(string), LolChampionsGameDataChampionSpell Passive = default(LolChampionsGameDataChampionSpell), List<string> Roles = default(List<string>), List<LolChampionsGameDataChampionSkin> Skins = default(List<LolChampionsGameDataChampionSkin>), List<LolChampionsGameDataChampionSpell> Spells = default(List<LolChampionsGameDataChampionSpell>), string SquarePortraitPath = default(string), string StingerSfxPath = default(string))
        {
            this.Alias = Alias;
            this.BanVoPath = BanVoPath;
            this.ChooseVoPath = ChooseVoPath;
            this.Id = Id;
            this.Name = Name;
            this.Passive = Passive;
            this.Roles = Roles;
            this.Skins = Skins;
            this.Spells = Spells;
            this.SquarePortraitPath = SquarePortraitPath;
            this.StingerSfxPath = StingerSfxPath;
        }
        
        /// <summary>
        /// Gets or Sets Alias
        /// </summary>
        [DataMember(Name="alias", EmitDefaultValue=false)]
        public string Alias { get; set; }

        /// <summary>
        /// Gets or Sets BanVoPath
        /// </summary>
        [DataMember(Name="banVoPath", EmitDefaultValue=false)]
        public string BanVoPath { get; set; }

        /// <summary>
        /// Gets or Sets ChooseVoPath
        /// </summary>
        [DataMember(Name="chooseVoPath", EmitDefaultValue=false)]
        public string ChooseVoPath { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Passive
        /// </summary>
        [DataMember(Name="passive", EmitDefaultValue=false)]
        public LolChampionsGameDataChampionSpell Passive { get; set; }

        /// <summary>
        /// Gets or Sets Roles
        /// </summary>
        [DataMember(Name="roles", EmitDefaultValue=false)]
        public List<string> Roles { get; set; }

        /// <summary>
        /// Gets or Sets Skins
        /// </summary>
        [DataMember(Name="skins", EmitDefaultValue=false)]
        public List<LolChampionsGameDataChampionSkin> Skins { get; set; }

        /// <summary>
        /// Gets or Sets Spells
        /// </summary>
        [DataMember(Name="spells", EmitDefaultValue=false)]
        public List<LolChampionsGameDataChampionSpell> Spells { get; set; }

        /// <summary>
        /// Gets or Sets SquarePortraitPath
        /// </summary>
        [DataMember(Name="squarePortraitPath", EmitDefaultValue=false)]
        public string SquarePortraitPath { get; set; }

        /// <summary>
        /// Gets or Sets StingerSfxPath
        /// </summary>
        [DataMember(Name="stingerSfxPath", EmitDefaultValue=false)]
        public string StingerSfxPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolChampionsGameDataChampion {\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  BanVoPath: ").Append(BanVoPath).Append("\n");
            sb.Append("  ChooseVoPath: ").Append(ChooseVoPath).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Passive: ").Append(Passive).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  Skins: ").Append(Skins).Append("\n");
            sb.Append("  Spells: ").Append(Spells).Append("\n");
            sb.Append("  SquarePortraitPath: ").Append(SquarePortraitPath).Append("\n");
            sb.Append("  StingerSfxPath: ").Append(StingerSfxPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolChampionsGameDataChampion);
        }

        /// <summary>
        /// Returns true if LolChampionsGameDataChampion instances are equal
        /// </summary>
        /// <param name="other">Instance of LolChampionsGameDataChampion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolChampionsGameDataChampion other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Alias == other.Alias ||
                    this.Alias != null &&
                    this.Alias.Equals(other.Alias)
                ) && 
                (
                    this.BanVoPath == other.BanVoPath ||
                    this.BanVoPath != null &&
                    this.BanVoPath.Equals(other.BanVoPath)
                ) && 
                (
                    this.ChooseVoPath == other.ChooseVoPath ||
                    this.ChooseVoPath != null &&
                    this.ChooseVoPath.Equals(other.ChooseVoPath)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Passive == other.Passive ||
                    this.Passive != null &&
                    this.Passive.Equals(other.Passive)
                ) && 
                (
                    this.Roles == other.Roles ||
                    this.Roles != null &&
                    this.Roles.SequenceEqual(other.Roles)
                ) && 
                (
                    this.Skins == other.Skins ||
                    this.Skins != null &&
                    this.Skins.SequenceEqual(other.Skins)
                ) && 
                (
                    this.Spells == other.Spells ||
                    this.Spells != null &&
                    this.Spells.SequenceEqual(other.Spells)
                ) && 
                (
                    this.SquarePortraitPath == other.SquarePortraitPath ||
                    this.SquarePortraitPath != null &&
                    this.SquarePortraitPath.Equals(other.SquarePortraitPath)
                ) && 
                (
                    this.StingerSfxPath == other.StingerSfxPath ||
                    this.StingerSfxPath != null &&
                    this.StingerSfxPath.Equals(other.StingerSfxPath)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Alias != null)
                    hash = hash * 59 + this.Alias.GetHashCode();
                if (this.BanVoPath != null)
                    hash = hash * 59 + this.BanVoPath.GetHashCode();
                if (this.ChooseVoPath != null)
                    hash = hash * 59 + this.ChooseVoPath.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Passive != null)
                    hash = hash * 59 + this.Passive.GetHashCode();
                if (this.Roles != null)
                    hash = hash * 59 + this.Roles.GetHashCode();
                if (this.Skins != null)
                    hash = hash * 59 + this.Skins.GetHashCode();
                if (this.Spells != null)
                    hash = hash * 59 + this.Spells.GetHashCode();
                if (this.SquarePortraitPath != null)
                    hash = hash * 59 + this.SquarePortraitPath.GetHashCode();
                if (this.StingerSfxPath != null)
                    hash = hash * 59 + this.StingerSfxPath.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
