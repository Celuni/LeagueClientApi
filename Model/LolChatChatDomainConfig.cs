/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolChatChatDomainConfig
    /// </summary>
    [DataContract]
    public partial class LolChatChatDomainConfig :  IEquatable<LolChatChatDomainConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolChatChatDomainConfig" /> class.
        /// </summary>
        /// <param name="ChampSelectDomainName">ChampSelectDomainName.</param>
        /// <param name="ClubDomainName">ClubDomainName.</param>
        /// <param name="CustomGameDomainName">CustomGameDomainName.</param>
        /// <param name="CustomTeamDomainName">CustomTeamDomainName.</param>
        /// <param name="P2PDomainName">P2PDomainName.</param>
        /// <param name="PostGameDomainName">PostGameDomainName.</param>
        /// <param name="PrivateDomainName">PrivateDomainName.</param>
        /// <param name="PublicDomainName">PublicDomainName.</param>
        /// <param name="RankedTeamDomainName">RankedTeamDomainName.</param>
        /// <param name="TeamBuilderDomainName">TeamBuilderDomainName.</param>
        public LolChatChatDomainConfig(string ChampSelectDomainName = default(string), string ClubDomainName = default(string), string CustomGameDomainName = default(string), string CustomTeamDomainName = default(string), string P2PDomainName = default(string), string PostGameDomainName = default(string), string PrivateDomainName = default(string), string PublicDomainName = default(string), string RankedTeamDomainName = default(string), string TeamBuilderDomainName = default(string))
        {
            this.ChampSelectDomainName = ChampSelectDomainName;
            this.ClubDomainName = ClubDomainName;
            this.CustomGameDomainName = CustomGameDomainName;
            this.CustomTeamDomainName = CustomTeamDomainName;
            this.P2PDomainName = P2PDomainName;
            this.PostGameDomainName = PostGameDomainName;
            this.PrivateDomainName = PrivateDomainName;
            this.PublicDomainName = PublicDomainName;
            this.RankedTeamDomainName = RankedTeamDomainName;
            this.TeamBuilderDomainName = TeamBuilderDomainName;
        }
        
        /// <summary>
        /// Gets or Sets ChampSelectDomainName
        /// </summary>
        [DataMember(Name="ChampSelectDomainName", EmitDefaultValue=false)]
        public string ChampSelectDomainName { get; set; }

        /// <summary>
        /// Gets or Sets ClubDomainName
        /// </summary>
        [DataMember(Name="ClubDomainName", EmitDefaultValue=false)]
        public string ClubDomainName { get; set; }

        /// <summary>
        /// Gets or Sets CustomGameDomainName
        /// </summary>
        [DataMember(Name="CustomGameDomainName", EmitDefaultValue=false)]
        public string CustomGameDomainName { get; set; }

        /// <summary>
        /// Gets or Sets CustomTeamDomainName
        /// </summary>
        [DataMember(Name="CustomTeamDomainName", EmitDefaultValue=false)]
        public string CustomTeamDomainName { get; set; }

        /// <summary>
        /// Gets or Sets P2PDomainName
        /// </summary>
        [DataMember(Name="P2PDomainName", EmitDefaultValue=false)]
        public string P2PDomainName { get; set; }

        /// <summary>
        /// Gets or Sets PostGameDomainName
        /// </summary>
        [DataMember(Name="PostGameDomainName", EmitDefaultValue=false)]
        public string PostGameDomainName { get; set; }

        /// <summary>
        /// Gets or Sets PrivateDomainName
        /// </summary>
        [DataMember(Name="PrivateDomainName", EmitDefaultValue=false)]
        public string PrivateDomainName { get; set; }

        /// <summary>
        /// Gets or Sets PublicDomainName
        /// </summary>
        [DataMember(Name="PublicDomainName", EmitDefaultValue=false)]
        public string PublicDomainName { get; set; }

        /// <summary>
        /// Gets or Sets RankedTeamDomainName
        /// </summary>
        [DataMember(Name="RankedTeamDomainName", EmitDefaultValue=false)]
        public string RankedTeamDomainName { get; set; }

        /// <summary>
        /// Gets or Sets TeamBuilderDomainName
        /// </summary>
        [DataMember(Name="TeamBuilderDomainName", EmitDefaultValue=false)]
        public string TeamBuilderDomainName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolChatChatDomainConfig {\n");
            sb.Append("  ChampSelectDomainName: ").Append(ChampSelectDomainName).Append("\n");
            sb.Append("  ClubDomainName: ").Append(ClubDomainName).Append("\n");
            sb.Append("  CustomGameDomainName: ").Append(CustomGameDomainName).Append("\n");
            sb.Append("  CustomTeamDomainName: ").Append(CustomTeamDomainName).Append("\n");
            sb.Append("  P2PDomainName: ").Append(P2PDomainName).Append("\n");
            sb.Append("  PostGameDomainName: ").Append(PostGameDomainName).Append("\n");
            sb.Append("  PrivateDomainName: ").Append(PrivateDomainName).Append("\n");
            sb.Append("  PublicDomainName: ").Append(PublicDomainName).Append("\n");
            sb.Append("  RankedTeamDomainName: ").Append(RankedTeamDomainName).Append("\n");
            sb.Append("  TeamBuilderDomainName: ").Append(TeamBuilderDomainName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolChatChatDomainConfig);
        }

        /// <summary>
        /// Returns true if LolChatChatDomainConfig instances are equal
        /// </summary>
        /// <param name="other">Instance of LolChatChatDomainConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolChatChatDomainConfig other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ChampSelectDomainName == other.ChampSelectDomainName ||
                    this.ChampSelectDomainName != null &&
                    this.ChampSelectDomainName.Equals(other.ChampSelectDomainName)
                ) && 
                (
                    this.ClubDomainName == other.ClubDomainName ||
                    this.ClubDomainName != null &&
                    this.ClubDomainName.Equals(other.ClubDomainName)
                ) && 
                (
                    this.CustomGameDomainName == other.CustomGameDomainName ||
                    this.CustomGameDomainName != null &&
                    this.CustomGameDomainName.Equals(other.CustomGameDomainName)
                ) && 
                (
                    this.CustomTeamDomainName == other.CustomTeamDomainName ||
                    this.CustomTeamDomainName != null &&
                    this.CustomTeamDomainName.Equals(other.CustomTeamDomainName)
                ) && 
                (
                    this.P2PDomainName == other.P2PDomainName ||
                    this.P2PDomainName != null &&
                    this.P2PDomainName.Equals(other.P2PDomainName)
                ) && 
                (
                    this.PostGameDomainName == other.PostGameDomainName ||
                    this.PostGameDomainName != null &&
                    this.PostGameDomainName.Equals(other.PostGameDomainName)
                ) && 
                (
                    this.PrivateDomainName == other.PrivateDomainName ||
                    this.PrivateDomainName != null &&
                    this.PrivateDomainName.Equals(other.PrivateDomainName)
                ) && 
                (
                    this.PublicDomainName == other.PublicDomainName ||
                    this.PublicDomainName != null &&
                    this.PublicDomainName.Equals(other.PublicDomainName)
                ) && 
                (
                    this.RankedTeamDomainName == other.RankedTeamDomainName ||
                    this.RankedTeamDomainName != null &&
                    this.RankedTeamDomainName.Equals(other.RankedTeamDomainName)
                ) && 
                (
                    this.TeamBuilderDomainName == other.TeamBuilderDomainName ||
                    this.TeamBuilderDomainName != null &&
                    this.TeamBuilderDomainName.Equals(other.TeamBuilderDomainName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ChampSelectDomainName != null)
                    hash = hash * 59 + this.ChampSelectDomainName.GetHashCode();
                if (this.ClubDomainName != null)
                    hash = hash * 59 + this.ClubDomainName.GetHashCode();
                if (this.CustomGameDomainName != null)
                    hash = hash * 59 + this.CustomGameDomainName.GetHashCode();
                if (this.CustomTeamDomainName != null)
                    hash = hash * 59 + this.CustomTeamDomainName.GetHashCode();
                if (this.P2PDomainName != null)
                    hash = hash * 59 + this.P2PDomainName.GetHashCode();
                if (this.PostGameDomainName != null)
                    hash = hash * 59 + this.PostGameDomainName.GetHashCode();
                if (this.PrivateDomainName != null)
                    hash = hash * 59 + this.PrivateDomainName.GetHashCode();
                if (this.PublicDomainName != null)
                    hash = hash * 59 + this.PublicDomainName.GetHashCode();
                if (this.RankedTeamDomainName != null)
                    hash = hash * 59 + this.RankedTeamDomainName.GetHashCode();
                if (this.TeamBuilderDomainName != null)
                    hash = hash * 59 + this.TeamBuilderDomainName.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
