/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolChatChatPlayerStatSummary
    /// </summary>
    [DataContract]
    public partial class LolChatChatPlayerStatSummary :  IEquatable<LolChatChatPlayerStatSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolChatChatPlayerStatSummary" /> class.
        /// </summary>
        /// <param name="Leaves">Leaves.</param>
        /// <param name="Losses">Losses.</param>
        /// <param name="MaxRating">MaxRating.</param>
        /// <param name="PlayerStatSummaryType">PlayerStatSummaryType.</param>
        /// <param name="Rating">Rating.</param>
        /// <param name="Wins">Wins.</param>
        public LolChatChatPlayerStatSummary(long? Leaves = default(long?), long? Losses = default(long?), long? MaxRating = default(long?), string PlayerStatSummaryType = default(string), long? Rating = default(long?), long? Wins = default(long?))
        {
            this.Leaves = Leaves;
            this.Losses = Losses;
            this.MaxRating = MaxRating;
            this.PlayerStatSummaryType = PlayerStatSummaryType;
            this.Rating = Rating;
            this.Wins = Wins;
        }
        
        /// <summary>
        /// Gets or Sets Leaves
        /// </summary>
        [DataMember(Name="leaves", EmitDefaultValue=false)]
        public long? Leaves { get; set; }

        /// <summary>
        /// Gets or Sets Losses
        /// </summary>
        [DataMember(Name="losses", EmitDefaultValue=false)]
        public long? Losses { get; set; }

        /// <summary>
        /// Gets or Sets MaxRating
        /// </summary>
        [DataMember(Name="maxRating", EmitDefaultValue=false)]
        public long? MaxRating { get; set; }

        /// <summary>
        /// Gets or Sets PlayerStatSummaryType
        /// </summary>
        [DataMember(Name="playerStatSummaryType", EmitDefaultValue=false)]
        public string PlayerStatSummaryType { get; set; }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [DataMember(Name="rating", EmitDefaultValue=false)]
        public long? Rating { get; set; }

        /// <summary>
        /// Gets or Sets Wins
        /// </summary>
        [DataMember(Name="wins", EmitDefaultValue=false)]
        public long? Wins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolChatChatPlayerStatSummary {\n");
            sb.Append("  Leaves: ").Append(Leaves).Append("\n");
            sb.Append("  Losses: ").Append(Losses).Append("\n");
            sb.Append("  MaxRating: ").Append(MaxRating).Append("\n");
            sb.Append("  PlayerStatSummaryType: ").Append(PlayerStatSummaryType).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  Wins: ").Append(Wins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolChatChatPlayerStatSummary);
        }

        /// <summary>
        /// Returns true if LolChatChatPlayerStatSummary instances are equal
        /// </summary>
        /// <param name="other">Instance of LolChatChatPlayerStatSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolChatChatPlayerStatSummary other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Leaves == other.Leaves ||
                    this.Leaves != null &&
                    this.Leaves.Equals(other.Leaves)
                ) && 
                (
                    this.Losses == other.Losses ||
                    this.Losses != null &&
                    this.Losses.Equals(other.Losses)
                ) && 
                (
                    this.MaxRating == other.MaxRating ||
                    this.MaxRating != null &&
                    this.MaxRating.Equals(other.MaxRating)
                ) && 
                (
                    this.PlayerStatSummaryType == other.PlayerStatSummaryType ||
                    this.PlayerStatSummaryType != null &&
                    this.PlayerStatSummaryType.Equals(other.PlayerStatSummaryType)
                ) && 
                (
                    this.Rating == other.Rating ||
                    this.Rating != null &&
                    this.Rating.Equals(other.Rating)
                ) && 
                (
                    this.Wins == other.Wins ||
                    this.Wins != null &&
                    this.Wins.Equals(other.Wins)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Leaves != null)
                    hash = hash * 59 + this.Leaves.GetHashCode();
                if (this.Losses != null)
                    hash = hash * 59 + this.Losses.GetHashCode();
                if (this.MaxRating != null)
                    hash = hash * 59 + this.MaxRating.GetHashCode();
                if (this.PlayerStatSummaryType != null)
                    hash = hash * 59 + this.PlayerStatSummaryType.GetHashCode();
                if (this.Rating != null)
                    hash = hash * 59 + this.Rating.GetHashCode();
                if (this.Wins != null)
                    hash = hash * 59 + this.Wins.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
