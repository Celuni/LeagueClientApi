/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolChatChatRankedEntry
    /// </summary>
    [DataContract]
    public partial class LolChatChatRankedEntry :  IEquatable<LolChatChatRankedEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolChatChatRankedEntry" /> class.
        /// </summary>
        /// <param name="Division">Division.</param>
        /// <param name="Games">Games.</param>
        /// <param name="LeagueName">LeagueName.</param>
        /// <param name="RankedQueue">RankedQueue.</param>
        /// <param name="RankedTier">RankedTier.</param>
        /// <param name="Wins">Wins.</param>
        public LolChatChatRankedEntry(long? Division = default(long?), long? Games = default(long?), string LeagueName = default(string), LolChatChatRankedQueue RankedQueue = default(LolChatChatRankedQueue), LolChatChatRankedTier RankedTier = default(LolChatChatRankedTier), long? Wins = default(long?))
        {
            this.Division = Division;
            this.Games = Games;
            this.LeagueName = LeagueName;
            this.RankedQueue = RankedQueue;
            this.RankedTier = RankedTier;
            this.Wins = Wins;
        }
        
        /// <summary>
        /// Gets or Sets Division
        /// </summary>
        [DataMember(Name="division", EmitDefaultValue=false)]
        public long? Division { get; set; }

        /// <summary>
        /// Gets or Sets Games
        /// </summary>
        [DataMember(Name="games", EmitDefaultValue=false)]
        public long? Games { get; set; }

        /// <summary>
        /// Gets or Sets LeagueName
        /// </summary>
        [DataMember(Name="leagueName", EmitDefaultValue=false)]
        public string LeagueName { get; set; }

        /// <summary>
        /// Gets or Sets RankedQueue
        /// </summary>
        [DataMember(Name="rankedQueue", EmitDefaultValue=false)]
        public LolChatChatRankedQueue RankedQueue { get; set; }

        /// <summary>
        /// Gets or Sets RankedTier
        /// </summary>
        [DataMember(Name="rankedTier", EmitDefaultValue=false)]
        public LolChatChatRankedTier RankedTier { get; set; }

        /// <summary>
        /// Gets or Sets Wins
        /// </summary>
        [DataMember(Name="wins", EmitDefaultValue=false)]
        public long? Wins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolChatChatRankedEntry {\n");
            sb.Append("  Division: ").Append(Division).Append("\n");
            sb.Append("  Games: ").Append(Games).Append("\n");
            sb.Append("  LeagueName: ").Append(LeagueName).Append("\n");
            sb.Append("  RankedQueue: ").Append(RankedQueue).Append("\n");
            sb.Append("  RankedTier: ").Append(RankedTier).Append("\n");
            sb.Append("  Wins: ").Append(Wins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolChatChatRankedEntry);
        }

        /// <summary>
        /// Returns true if LolChatChatRankedEntry instances are equal
        /// </summary>
        /// <param name="other">Instance of LolChatChatRankedEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolChatChatRankedEntry other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Division == other.Division ||
                    this.Division != null &&
                    this.Division.Equals(other.Division)
                ) && 
                (
                    this.Games == other.Games ||
                    this.Games != null &&
                    this.Games.Equals(other.Games)
                ) && 
                (
                    this.LeagueName == other.LeagueName ||
                    this.LeagueName != null &&
                    this.LeagueName.Equals(other.LeagueName)
                ) && 
                (
                    this.RankedQueue == other.RankedQueue ||
                    this.RankedQueue != null &&
                    this.RankedQueue.Equals(other.RankedQueue)
                ) && 
                (
                    this.RankedTier == other.RankedTier ||
                    this.RankedTier != null &&
                    this.RankedTier.Equals(other.RankedTier)
                ) && 
                (
                    this.Wins == other.Wins ||
                    this.Wins != null &&
                    this.Wins.Equals(other.Wins)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Division != null)
                    hash = hash * 59 + this.Division.GetHashCode();
                if (this.Games != null)
                    hash = hash * 59 + this.Games.GetHashCode();
                if (this.LeagueName != null)
                    hash = hash * 59 + this.LeagueName.GetHashCode();
                if (this.RankedQueue != null)
                    hash = hash * 59 + this.RankedQueue.GetHashCode();
                if (this.RankedTier != null)
                    hash = hash * 59 + this.RankedTier.GetHashCode();
                if (this.Wins != null)
                    hash = hash * 59 + this.Wins.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
