/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolChatConversationMessageResource
    /// </summary>
    [DataContract]
    public partial class LolChatConversationMessageResource :  IEquatable<LolChatConversationMessageResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolChatConversationMessageResource" /> class.
        /// </summary>
        /// <param name="Body">Body.</param>
        /// <param name="FromId">FromId.</param>
        /// <param name="Id">Id.</param>
        /// <param name="IsHistorical">IsHistorical.</param>
        /// <param name="Timestamp">Timestamp.</param>
        /// <param name="Type">Type.</param>
        public LolChatConversationMessageResource(string Body = default(string), long? FromId = default(long?), string Id = default(string), bool? IsHistorical = default(bool?), string Timestamp = default(string), string Type = default(string))
        {
            this.Body = Body;
            this.FromId = FromId;
            this.Id = Id;
            this.IsHistorical = IsHistorical;
            this.Timestamp = Timestamp;
            this.Type = Type;
        }
        
        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets FromId
        /// </summary>
        [DataMember(Name="fromId", EmitDefaultValue=false)]
        public long? FromId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsHistorical
        /// </summary>
        [DataMember(Name="isHistorical", EmitDefaultValue=false)]
        public bool? IsHistorical { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolChatConversationMessageResource {\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  FromId: ").Append(FromId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsHistorical: ").Append(IsHistorical).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolChatConversationMessageResource);
        }

        /// <summary>
        /// Returns true if LolChatConversationMessageResource instances are equal
        /// </summary>
        /// <param name="other">Instance of LolChatConversationMessageResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolChatConversationMessageResource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Body == other.Body ||
                    this.Body != null &&
                    this.Body.Equals(other.Body)
                ) && 
                (
                    this.FromId == other.FromId ||
                    this.FromId != null &&
                    this.FromId.Equals(other.FromId)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.IsHistorical == other.IsHistorical ||
                    this.IsHistorical != null &&
                    this.IsHistorical.Equals(other.IsHistorical)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Body != null)
                    hash = hash * 59 + this.Body.GetHashCode();
                if (this.FromId != null)
                    hash = hash * 59 + this.FromId.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.IsHistorical != null)
                    hash = hash * 59 + this.IsHistorical.GetHashCode();
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
