/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolChatConversationResource
    /// </summary>
    [DataContract]
    public partial class LolChatConversationResource :  IEquatable<LolChatConversationResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolChatConversationResource" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="InviterId">InviterId.</param>
        /// <param name="IsMuted">IsMuted.</param>
        /// <param name="LastMessage">LastMessage.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Password">Password.</param>
        /// <param name="Type">Type.</param>
        /// <param name="UnreadMessageCount">UnreadMessageCount.</param>
        public LolChatConversationResource(string Id = default(string), string InviterId = default(string), bool? IsMuted = default(bool?), LolChatConversationMessageResource LastMessage = default(LolChatConversationMessageResource), string Name = default(string), string Password = default(string), string Type = default(string), long? UnreadMessageCount = default(long?))
        {
            this.Id = Id;
            this.InviterId = InviterId;
            this.IsMuted = IsMuted;
            this.LastMessage = LastMessage;
            this.Name = Name;
            this.Password = Password;
            this.Type = Type;
            this.UnreadMessageCount = UnreadMessageCount;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets InviterId
        /// </summary>
        [DataMember(Name="inviterId", EmitDefaultValue=false)]
        public string InviterId { get; set; }

        /// <summary>
        /// Gets or Sets IsMuted
        /// </summary>
        [DataMember(Name="isMuted", EmitDefaultValue=false)]
        public bool? IsMuted { get; set; }

        /// <summary>
        /// Gets or Sets LastMessage
        /// </summary>
        [DataMember(Name="lastMessage", EmitDefaultValue=false)]
        public LolChatConversationMessageResource LastMessage { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets UnreadMessageCount
        /// </summary>
        [DataMember(Name="unreadMessageCount", EmitDefaultValue=false)]
        public long? UnreadMessageCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolChatConversationResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InviterId: ").Append(InviterId).Append("\n");
            sb.Append("  IsMuted: ").Append(IsMuted).Append("\n");
            sb.Append("  LastMessage: ").Append(LastMessage).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UnreadMessageCount: ").Append(UnreadMessageCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolChatConversationResource);
        }

        /// <summary>
        /// Returns true if LolChatConversationResource instances are equal
        /// </summary>
        /// <param name="other">Instance of LolChatConversationResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolChatConversationResource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.InviterId == other.InviterId ||
                    this.InviterId != null &&
                    this.InviterId.Equals(other.InviterId)
                ) && 
                (
                    this.IsMuted == other.IsMuted ||
                    this.IsMuted != null &&
                    this.IsMuted.Equals(other.IsMuted)
                ) && 
                (
                    this.LastMessage == other.LastMessage ||
                    this.LastMessage != null &&
                    this.LastMessage.Equals(other.LastMessage)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Password == other.Password ||
                    this.Password != null &&
                    this.Password.Equals(other.Password)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.UnreadMessageCount == other.UnreadMessageCount ||
                    this.UnreadMessageCount != null &&
                    this.UnreadMessageCount.Equals(other.UnreadMessageCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.InviterId != null)
                    hash = hash * 59 + this.InviterId.GetHashCode();
                if (this.IsMuted != null)
                    hash = hash * 59 + this.IsMuted.GetHashCode();
                if (this.LastMessage != null)
                    hash = hash * 59 + this.LastMessage.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Password != null)
                    hash = hash * 59 + this.Password.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.UnreadMessageCount != null)
                    hash = hash * 59 + this.UnreadMessageCount.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
