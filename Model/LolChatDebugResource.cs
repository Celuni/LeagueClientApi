/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolChatDebugResource
    /// </summary>
    [DataContract]
    public partial class LolChatDebugResource :  IEquatable<LolChatDebugResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolChatDebugResource" /> class.
        /// </summary>
        /// <param name="AsyncWaitInterval">AsyncWaitInterval.</param>
        /// <param name="EnableChatFiltering">EnableChatFiltering.</param>
        /// <param name="FailAllChatLogin">FailAllChatLogin.</param>
        /// <param name="FailNextChatLogin">FailNextChatLogin.</param>
        /// <param name="FailNextChatLogout">FailNextChatLogout.</param>
        /// <param name="FailNextKeepAlive">FailNextKeepAlive.</param>
        /// <param name="IsXMPPLoggingEnabled">IsXMPPLoggingEnabled.</param>
        /// <param name="KeepAliveInterval">KeepAliveInterval.</param>
        /// <param name="MaxReconnectInterval">MaxReconnectInterval.</param>
        /// <param name="MinReconnectInterval">MinReconnectInterval.</param>
        /// <param name="SilenceChatWhileInGame">SilenceChatWhileInGame.</param>
        /// <param name="TriggerChatDisconnect">TriggerChatDisconnect.</param>
        public LolChatDebugResource(int? AsyncWaitInterval = default(int?), bool? EnableChatFiltering = default(bool?), bool? FailAllChatLogin = default(bool?), bool? FailNextChatLogin = default(bool?), bool? FailNextChatLogout = default(bool?), bool? FailNextKeepAlive = default(bool?), bool? IsXMPPLoggingEnabled = default(bool?), int? KeepAliveInterval = default(int?), int? MaxReconnectInterval = default(int?), int? MinReconnectInterval = default(int?), bool? SilenceChatWhileInGame = default(bool?), bool? TriggerChatDisconnect = default(bool?))
        {
            this.AsyncWaitInterval = AsyncWaitInterval;
            this.EnableChatFiltering = EnableChatFiltering;
            this.FailAllChatLogin = FailAllChatLogin;
            this.FailNextChatLogin = FailNextChatLogin;
            this.FailNextChatLogout = FailNextChatLogout;
            this.FailNextKeepAlive = FailNextKeepAlive;
            this.IsXMPPLoggingEnabled = IsXMPPLoggingEnabled;
            this.KeepAliveInterval = KeepAliveInterval;
            this.MaxReconnectInterval = MaxReconnectInterval;
            this.MinReconnectInterval = MinReconnectInterval;
            this.SilenceChatWhileInGame = SilenceChatWhileInGame;
            this.TriggerChatDisconnect = TriggerChatDisconnect;
        }
        
        /// <summary>
        /// Gets or Sets AsyncWaitInterval
        /// </summary>
        [DataMember(Name="asyncWaitInterval", EmitDefaultValue=false)]
        public int? AsyncWaitInterval { get; set; }

        /// <summary>
        /// Gets or Sets EnableChatFiltering
        /// </summary>
        [DataMember(Name="enableChatFiltering", EmitDefaultValue=false)]
        public bool? EnableChatFiltering { get; set; }

        /// <summary>
        /// Gets or Sets FailAllChatLogin
        /// </summary>
        [DataMember(Name="failAllChatLogin", EmitDefaultValue=false)]
        public bool? FailAllChatLogin { get; set; }

        /// <summary>
        /// Gets or Sets FailNextChatLogin
        /// </summary>
        [DataMember(Name="failNextChatLogin", EmitDefaultValue=false)]
        public bool? FailNextChatLogin { get; set; }

        /// <summary>
        /// Gets or Sets FailNextChatLogout
        /// </summary>
        [DataMember(Name="failNextChatLogout", EmitDefaultValue=false)]
        public bool? FailNextChatLogout { get; set; }

        /// <summary>
        /// Gets or Sets FailNextKeepAlive
        /// </summary>
        [DataMember(Name="failNextKeepAlive", EmitDefaultValue=false)]
        public bool? FailNextKeepAlive { get; set; }

        /// <summary>
        /// Gets or Sets IsXMPPLoggingEnabled
        /// </summary>
        [DataMember(Name="isXMPPLoggingEnabled", EmitDefaultValue=false)]
        public bool? IsXMPPLoggingEnabled { get; set; }

        /// <summary>
        /// Gets or Sets KeepAliveInterval
        /// </summary>
        [DataMember(Name="keepAliveInterval", EmitDefaultValue=false)]
        public int? KeepAliveInterval { get; set; }

        /// <summary>
        /// Gets or Sets MaxReconnectInterval
        /// </summary>
        [DataMember(Name="maxReconnectInterval", EmitDefaultValue=false)]
        public int? MaxReconnectInterval { get; set; }

        /// <summary>
        /// Gets or Sets MinReconnectInterval
        /// </summary>
        [DataMember(Name="minReconnectInterval", EmitDefaultValue=false)]
        public int? MinReconnectInterval { get; set; }

        /// <summary>
        /// Gets or Sets SilenceChatWhileInGame
        /// </summary>
        [DataMember(Name="silenceChatWhileInGame", EmitDefaultValue=false)]
        public bool? SilenceChatWhileInGame { get; set; }

        /// <summary>
        /// Gets or Sets TriggerChatDisconnect
        /// </summary>
        [DataMember(Name="triggerChatDisconnect", EmitDefaultValue=false)]
        public bool? TriggerChatDisconnect { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolChatDebugResource {\n");
            sb.Append("  AsyncWaitInterval: ").Append(AsyncWaitInterval).Append("\n");
            sb.Append("  EnableChatFiltering: ").Append(EnableChatFiltering).Append("\n");
            sb.Append("  FailAllChatLogin: ").Append(FailAllChatLogin).Append("\n");
            sb.Append("  FailNextChatLogin: ").Append(FailNextChatLogin).Append("\n");
            sb.Append("  FailNextChatLogout: ").Append(FailNextChatLogout).Append("\n");
            sb.Append("  FailNextKeepAlive: ").Append(FailNextKeepAlive).Append("\n");
            sb.Append("  IsXMPPLoggingEnabled: ").Append(IsXMPPLoggingEnabled).Append("\n");
            sb.Append("  KeepAliveInterval: ").Append(KeepAliveInterval).Append("\n");
            sb.Append("  MaxReconnectInterval: ").Append(MaxReconnectInterval).Append("\n");
            sb.Append("  MinReconnectInterval: ").Append(MinReconnectInterval).Append("\n");
            sb.Append("  SilenceChatWhileInGame: ").Append(SilenceChatWhileInGame).Append("\n");
            sb.Append("  TriggerChatDisconnect: ").Append(TriggerChatDisconnect).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolChatDebugResource);
        }

        /// <summary>
        /// Returns true if LolChatDebugResource instances are equal
        /// </summary>
        /// <param name="other">Instance of LolChatDebugResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolChatDebugResource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AsyncWaitInterval == other.AsyncWaitInterval ||
                    this.AsyncWaitInterval != null &&
                    this.AsyncWaitInterval.Equals(other.AsyncWaitInterval)
                ) && 
                (
                    this.EnableChatFiltering == other.EnableChatFiltering ||
                    this.EnableChatFiltering != null &&
                    this.EnableChatFiltering.Equals(other.EnableChatFiltering)
                ) && 
                (
                    this.FailAllChatLogin == other.FailAllChatLogin ||
                    this.FailAllChatLogin != null &&
                    this.FailAllChatLogin.Equals(other.FailAllChatLogin)
                ) && 
                (
                    this.FailNextChatLogin == other.FailNextChatLogin ||
                    this.FailNextChatLogin != null &&
                    this.FailNextChatLogin.Equals(other.FailNextChatLogin)
                ) && 
                (
                    this.FailNextChatLogout == other.FailNextChatLogout ||
                    this.FailNextChatLogout != null &&
                    this.FailNextChatLogout.Equals(other.FailNextChatLogout)
                ) && 
                (
                    this.FailNextKeepAlive == other.FailNextKeepAlive ||
                    this.FailNextKeepAlive != null &&
                    this.FailNextKeepAlive.Equals(other.FailNextKeepAlive)
                ) && 
                (
                    this.IsXMPPLoggingEnabled == other.IsXMPPLoggingEnabled ||
                    this.IsXMPPLoggingEnabled != null &&
                    this.IsXMPPLoggingEnabled.Equals(other.IsXMPPLoggingEnabled)
                ) && 
                (
                    this.KeepAliveInterval == other.KeepAliveInterval ||
                    this.KeepAliveInterval != null &&
                    this.KeepAliveInterval.Equals(other.KeepAliveInterval)
                ) && 
                (
                    this.MaxReconnectInterval == other.MaxReconnectInterval ||
                    this.MaxReconnectInterval != null &&
                    this.MaxReconnectInterval.Equals(other.MaxReconnectInterval)
                ) && 
                (
                    this.MinReconnectInterval == other.MinReconnectInterval ||
                    this.MinReconnectInterval != null &&
                    this.MinReconnectInterval.Equals(other.MinReconnectInterval)
                ) && 
                (
                    this.SilenceChatWhileInGame == other.SilenceChatWhileInGame ||
                    this.SilenceChatWhileInGame != null &&
                    this.SilenceChatWhileInGame.Equals(other.SilenceChatWhileInGame)
                ) && 
                (
                    this.TriggerChatDisconnect == other.TriggerChatDisconnect ||
                    this.TriggerChatDisconnect != null &&
                    this.TriggerChatDisconnect.Equals(other.TriggerChatDisconnect)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AsyncWaitInterval != null)
                    hash = hash * 59 + this.AsyncWaitInterval.GetHashCode();
                if (this.EnableChatFiltering != null)
                    hash = hash * 59 + this.EnableChatFiltering.GetHashCode();
                if (this.FailAllChatLogin != null)
                    hash = hash * 59 + this.FailAllChatLogin.GetHashCode();
                if (this.FailNextChatLogin != null)
                    hash = hash * 59 + this.FailNextChatLogin.GetHashCode();
                if (this.FailNextChatLogout != null)
                    hash = hash * 59 + this.FailNextChatLogout.GetHashCode();
                if (this.FailNextKeepAlive != null)
                    hash = hash * 59 + this.FailNextKeepAlive.GetHashCode();
                if (this.IsXMPPLoggingEnabled != null)
                    hash = hash * 59 + this.IsXMPPLoggingEnabled.GetHashCode();
                if (this.KeepAliveInterval != null)
                    hash = hash * 59 + this.KeepAliveInterval.GetHashCode();
                if (this.MaxReconnectInterval != null)
                    hash = hash * 59 + this.MaxReconnectInterval.GetHashCode();
                if (this.MinReconnectInterval != null)
                    hash = hash * 59 + this.MinReconnectInterval.GetHashCode();
                if (this.SilenceChatWhileInGame != null)
                    hash = hash * 59 + this.SilenceChatWhileInGame.GetHashCode();
                if (this.TriggerChatDisconnect != null)
                    hash = hash * 59 + this.TriggerChatDisconnect.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
