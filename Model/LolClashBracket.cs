/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolClashBracket
    /// </summary>
    [DataContract]
    public partial class LolClashBracket :  IEquatable<LolClashBracket>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolClashBracket" /> class.
        /// </summary>
        /// <param name="CurrentLoserRound">CurrentLoserRound.</param>
        /// <param name="CurrentRound">CurrentRound.</param>
        /// <param name="Id">Id.</param>
        /// <param name="IsComplete">IsComplete.</param>
        /// <param name="LoserBracketMatches">LoserBracketMatches.</param>
        /// <param name="Matches">Matches.</param>
        /// <param name="Period">Period.</param>
        /// <param name="Rosters">Rosters.</param>
        /// <param name="Size">Size.</param>
        /// <param name="TournamentId">TournamentId.</param>
        public LolClashBracket(int? CurrentLoserRound = default(int?), int? CurrentRound = default(int?), long? Id = default(long?), bool? IsComplete = default(bool?), List<BracketMatch> LoserBracketMatches = default(List<BracketMatch>), List<BracketMatch> Matches = default(List<BracketMatch>), int? Period = default(int?), List<BracketRoster> Rosters = default(List<BracketRoster>), int? Size = default(int?), long? TournamentId = default(long?))
        {
            this.CurrentLoserRound = CurrentLoserRound;
            this.CurrentRound = CurrentRound;
            this.Id = Id;
            this.IsComplete = IsComplete;
            this.LoserBracketMatches = LoserBracketMatches;
            this.Matches = Matches;
            this.Period = Period;
            this.Rosters = Rosters;
            this.Size = Size;
            this.TournamentId = TournamentId;
        }
        
        /// <summary>
        /// Gets or Sets CurrentLoserRound
        /// </summary>
        [DataMember(Name="currentLoserRound", EmitDefaultValue=false)]
        public int? CurrentLoserRound { get; set; }

        /// <summary>
        /// Gets or Sets CurrentRound
        /// </summary>
        [DataMember(Name="currentRound", EmitDefaultValue=false)]
        public int? CurrentRound { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets IsComplete
        /// </summary>
        [DataMember(Name="isComplete", EmitDefaultValue=false)]
        public bool? IsComplete { get; set; }

        /// <summary>
        /// Gets or Sets LoserBracketMatches
        /// </summary>
        [DataMember(Name="loserBracketMatches", EmitDefaultValue=false)]
        public List<BracketMatch> LoserBracketMatches { get; set; }

        /// <summary>
        /// Gets or Sets Matches
        /// </summary>
        [DataMember(Name="matches", EmitDefaultValue=false)]
        public List<BracketMatch> Matches { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="period", EmitDefaultValue=false)]
        public int? Period { get; set; }

        /// <summary>
        /// Gets or Sets Rosters
        /// </summary>
        [DataMember(Name="rosters", EmitDefaultValue=false)]
        public List<BracketRoster> Rosters { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public int? Size { get; set; }

        /// <summary>
        /// Gets or Sets TournamentId
        /// </summary>
        [DataMember(Name="tournamentId", EmitDefaultValue=false)]
        public long? TournamentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolClashBracket {\n");
            sb.Append("  CurrentLoserRound: ").Append(CurrentLoserRound).Append("\n");
            sb.Append("  CurrentRound: ").Append(CurrentRound).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsComplete: ").Append(IsComplete).Append("\n");
            sb.Append("  LoserBracketMatches: ").Append(LoserBracketMatches).Append("\n");
            sb.Append("  Matches: ").Append(Matches).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Rosters: ").Append(Rosters).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  TournamentId: ").Append(TournamentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolClashBracket);
        }

        /// <summary>
        /// Returns true if LolClashBracket instances are equal
        /// </summary>
        /// <param name="other">Instance of LolClashBracket to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolClashBracket other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CurrentLoserRound == other.CurrentLoserRound ||
                    this.CurrentLoserRound != null &&
                    this.CurrentLoserRound.Equals(other.CurrentLoserRound)
                ) && 
                (
                    this.CurrentRound == other.CurrentRound ||
                    this.CurrentRound != null &&
                    this.CurrentRound.Equals(other.CurrentRound)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.IsComplete == other.IsComplete ||
                    this.IsComplete != null &&
                    this.IsComplete.Equals(other.IsComplete)
                ) && 
                (
                    this.LoserBracketMatches == other.LoserBracketMatches ||
                    this.LoserBracketMatches != null &&
                    this.LoserBracketMatches.SequenceEqual(other.LoserBracketMatches)
                ) && 
                (
                    this.Matches == other.Matches ||
                    this.Matches != null &&
                    this.Matches.SequenceEqual(other.Matches)
                ) && 
                (
                    this.Period == other.Period ||
                    this.Period != null &&
                    this.Period.Equals(other.Period)
                ) && 
                (
                    this.Rosters == other.Rosters ||
                    this.Rosters != null &&
                    this.Rosters.SequenceEqual(other.Rosters)
                ) && 
                (
                    this.Size == other.Size ||
                    this.Size != null &&
                    this.Size.Equals(other.Size)
                ) && 
                (
                    this.TournamentId == other.TournamentId ||
                    this.TournamentId != null &&
                    this.TournamentId.Equals(other.TournamentId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CurrentLoserRound != null)
                    hash = hash * 59 + this.CurrentLoserRound.GetHashCode();
                if (this.CurrentRound != null)
                    hash = hash * 59 + this.CurrentRound.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.IsComplete != null)
                    hash = hash * 59 + this.IsComplete.GetHashCode();
                if (this.LoserBracketMatches != null)
                    hash = hash * 59 + this.LoserBracketMatches.GetHashCode();
                if (this.Matches != null)
                    hash = hash * 59 + this.Matches.GetHashCode();
                if (this.Period != null)
                    hash = hash * 59 + this.Period.GetHashCode();
                if (this.Rosters != null)
                    hash = hash * 59 + this.Rosters.GetHashCode();
                if (this.Size != null)
                    hash = hash * 59 + this.Size.GetHashCode();
                if (this.TournamentId != null)
                    hash = hash * 59 + this.TournamentId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
