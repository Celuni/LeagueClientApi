/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolClashPlayerNotificationData
    /// </summary>
    [DataContract]
    public partial class LolClashPlayerNotificationData :  IEquatable<LolClashPlayerNotificationData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolClashPlayerNotificationData" /> class.
        /// </summary>
        /// <param name="Notification">Notification.</param>
        /// <param name="NotifyReason">NotifyReason.</param>
        /// <param name="RosterNotifyReason">RosterNotifyReason.</param>
        /// <param name="SourceSummonerId">SourceSummonerId.</param>
        /// <param name="TargetSummonerId">TargetSummonerId.</param>
        public LolClashPlayerNotificationData(LolClashPlayerNotification Notification = default(LolClashPlayerNotification), LolClashNotifyReason NotifyReason = default(LolClashNotifyReason), LolClashRosterNotifyReason RosterNotifyReason = default(LolClashRosterNotifyReason), long? SourceSummonerId = default(long?), long? TargetSummonerId = default(long?))
        {
            this.Notification = Notification;
            this.NotifyReason = NotifyReason;
            this.RosterNotifyReason = RosterNotifyReason;
            this.SourceSummonerId = SourceSummonerId;
            this.TargetSummonerId = TargetSummonerId;
        }
        
        /// <summary>
        /// Gets or Sets Notification
        /// </summary>
        [DataMember(Name="notification", EmitDefaultValue=false)]
        public LolClashPlayerNotification Notification { get; set; }

        /// <summary>
        /// Gets or Sets NotifyReason
        /// </summary>
        [DataMember(Name="notifyReason", EmitDefaultValue=false)]
        public LolClashNotifyReason NotifyReason { get; set; }

        /// <summary>
        /// Gets or Sets RosterNotifyReason
        /// </summary>
        [DataMember(Name="rosterNotifyReason", EmitDefaultValue=false)]
        public LolClashRosterNotifyReason RosterNotifyReason { get; set; }

        /// <summary>
        /// Gets or Sets SourceSummonerId
        /// </summary>
        [DataMember(Name="sourceSummonerId", EmitDefaultValue=false)]
        public long? SourceSummonerId { get; set; }

        /// <summary>
        /// Gets or Sets TargetSummonerId
        /// </summary>
        [DataMember(Name="targetSummonerId", EmitDefaultValue=false)]
        public long? TargetSummonerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolClashPlayerNotificationData {\n");
            sb.Append("  Notification: ").Append(Notification).Append("\n");
            sb.Append("  NotifyReason: ").Append(NotifyReason).Append("\n");
            sb.Append("  RosterNotifyReason: ").Append(RosterNotifyReason).Append("\n");
            sb.Append("  SourceSummonerId: ").Append(SourceSummonerId).Append("\n");
            sb.Append("  TargetSummonerId: ").Append(TargetSummonerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolClashPlayerNotificationData);
        }

        /// <summary>
        /// Returns true if LolClashPlayerNotificationData instances are equal
        /// </summary>
        /// <param name="other">Instance of LolClashPlayerNotificationData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolClashPlayerNotificationData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Notification == other.Notification ||
                    this.Notification != null &&
                    this.Notification.Equals(other.Notification)
                ) && 
                (
                    this.NotifyReason == other.NotifyReason ||
                    this.NotifyReason != null &&
                    this.NotifyReason.Equals(other.NotifyReason)
                ) && 
                (
                    this.RosterNotifyReason == other.RosterNotifyReason ||
                    this.RosterNotifyReason != null &&
                    this.RosterNotifyReason.Equals(other.RosterNotifyReason)
                ) && 
                (
                    this.SourceSummonerId == other.SourceSummonerId ||
                    this.SourceSummonerId != null &&
                    this.SourceSummonerId.Equals(other.SourceSummonerId)
                ) && 
                (
                    this.TargetSummonerId == other.TargetSummonerId ||
                    this.TargetSummonerId != null &&
                    this.TargetSummonerId.Equals(other.TargetSummonerId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Notification != null)
                    hash = hash * 59 + this.Notification.GetHashCode();
                if (this.NotifyReason != null)
                    hash = hash * 59 + this.NotifyReason.GetHashCode();
                if (this.RosterNotifyReason != null)
                    hash = hash * 59 + this.RosterNotifyReason.GetHashCode();
                if (this.SourceSummonerId != null)
                    hash = hash * 59 + this.SourceSummonerId.GetHashCode();
                if (this.TargetSummonerId != null)
                    hash = hash * 59 + this.TargetSummonerId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
