/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolClashQueueGameTypeConfig
    /// </summary>
    [DataContract]
    public partial class LolClashQueueGameTypeConfig :  IEquatable<LolClashQueueGameTypeConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolClashQueueGameTypeConfig" /> class.
        /// </summary>
        /// <param name="AdvancedLearningQuests">AdvancedLearningQuests.</param>
        /// <param name="AllowTrades">AllowTrades.</param>
        /// <param name="BanMode">BanMode.</param>
        /// <param name="BanTimerDuration">BanTimerDuration.</param>
        /// <param name="BattleBoost">BattleBoost.</param>
        /// <param name="CrossTeamChampionPool">CrossTeamChampionPool.</param>
        /// <param name="DeathMatch">DeathMatch.</param>
        /// <param name="DoNotRemove">DoNotRemove.</param>
        /// <param name="DuplicatePick">DuplicatePick.</param>
        /// <param name="ExclusivePick">ExclusivePick.</param>
        /// <param name="Id">Id.</param>
        /// <param name="LearningQuests">LearningQuests.</param>
        /// <param name="MainPickTimerDuration">MainPickTimerDuration.</param>
        /// <param name="MaxAllowableBans">MaxAllowableBans.</param>
        /// <param name="Name">Name.</param>
        /// <param name="OnboardCoopBeginner">OnboardCoopBeginner.</param>
        /// <param name="PickMode">PickMode.</param>
        /// <param name="PostPickTimerDuration">PostPickTimerDuration.</param>
        /// <param name="Reroll">Reroll.</param>
        /// <param name="TeamChampionPool">TeamChampionPool.</param>
        public LolClashQueueGameTypeConfig(bool? AdvancedLearningQuests = default(bool?), bool? AllowTrades = default(bool?), string BanMode = default(string), int? BanTimerDuration = default(int?), bool? BattleBoost = default(bool?), bool? CrossTeamChampionPool = default(bool?), bool? DeathMatch = default(bool?), bool? DoNotRemove = default(bool?), bool? DuplicatePick = default(bool?), bool? ExclusivePick = default(bool?), long? Id = default(long?), bool? LearningQuests = default(bool?), int? MainPickTimerDuration = default(int?), int? MaxAllowableBans = default(int?), string Name = default(string), bool? OnboardCoopBeginner = default(bool?), string PickMode = default(string), int? PostPickTimerDuration = default(int?), bool? Reroll = default(bool?), bool? TeamChampionPool = default(bool?))
        {
            this.AdvancedLearningQuests = AdvancedLearningQuests;
            this.AllowTrades = AllowTrades;
            this.BanMode = BanMode;
            this.BanTimerDuration = BanTimerDuration;
            this.BattleBoost = BattleBoost;
            this.CrossTeamChampionPool = CrossTeamChampionPool;
            this.DeathMatch = DeathMatch;
            this.DoNotRemove = DoNotRemove;
            this.DuplicatePick = DuplicatePick;
            this.ExclusivePick = ExclusivePick;
            this.Id = Id;
            this.LearningQuests = LearningQuests;
            this.MainPickTimerDuration = MainPickTimerDuration;
            this.MaxAllowableBans = MaxAllowableBans;
            this.Name = Name;
            this.OnboardCoopBeginner = OnboardCoopBeginner;
            this.PickMode = PickMode;
            this.PostPickTimerDuration = PostPickTimerDuration;
            this.Reroll = Reroll;
            this.TeamChampionPool = TeamChampionPool;
        }
        
        /// <summary>
        /// Gets or Sets AdvancedLearningQuests
        /// </summary>
        [DataMember(Name="advancedLearningQuests", EmitDefaultValue=false)]
        public bool? AdvancedLearningQuests { get; set; }

        /// <summary>
        /// Gets or Sets AllowTrades
        /// </summary>
        [DataMember(Name="allowTrades", EmitDefaultValue=false)]
        public bool? AllowTrades { get; set; }

        /// <summary>
        /// Gets or Sets BanMode
        /// </summary>
        [DataMember(Name="banMode", EmitDefaultValue=false)]
        public string BanMode { get; set; }

        /// <summary>
        /// Gets or Sets BanTimerDuration
        /// </summary>
        [DataMember(Name="banTimerDuration", EmitDefaultValue=false)]
        public int? BanTimerDuration { get; set; }

        /// <summary>
        /// Gets or Sets BattleBoost
        /// </summary>
        [DataMember(Name="battleBoost", EmitDefaultValue=false)]
        public bool? BattleBoost { get; set; }

        /// <summary>
        /// Gets or Sets CrossTeamChampionPool
        /// </summary>
        [DataMember(Name="crossTeamChampionPool", EmitDefaultValue=false)]
        public bool? CrossTeamChampionPool { get; set; }

        /// <summary>
        /// Gets or Sets DeathMatch
        /// </summary>
        [DataMember(Name="deathMatch", EmitDefaultValue=false)]
        public bool? DeathMatch { get; set; }

        /// <summary>
        /// Gets or Sets DoNotRemove
        /// </summary>
        [DataMember(Name="doNotRemove", EmitDefaultValue=false)]
        public bool? DoNotRemove { get; set; }

        /// <summary>
        /// Gets or Sets DuplicatePick
        /// </summary>
        [DataMember(Name="duplicatePick", EmitDefaultValue=false)]
        public bool? DuplicatePick { get; set; }

        /// <summary>
        /// Gets or Sets ExclusivePick
        /// </summary>
        [DataMember(Name="exclusivePick", EmitDefaultValue=false)]
        public bool? ExclusivePick { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets LearningQuests
        /// </summary>
        [DataMember(Name="learningQuests", EmitDefaultValue=false)]
        public bool? LearningQuests { get; set; }

        /// <summary>
        /// Gets or Sets MainPickTimerDuration
        /// </summary>
        [DataMember(Name="mainPickTimerDuration", EmitDefaultValue=false)]
        public int? MainPickTimerDuration { get; set; }

        /// <summary>
        /// Gets or Sets MaxAllowableBans
        /// </summary>
        [DataMember(Name="maxAllowableBans", EmitDefaultValue=false)]
        public int? MaxAllowableBans { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OnboardCoopBeginner
        /// </summary>
        [DataMember(Name="onboardCoopBeginner", EmitDefaultValue=false)]
        public bool? OnboardCoopBeginner { get; set; }

        /// <summary>
        /// Gets or Sets PickMode
        /// </summary>
        [DataMember(Name="pickMode", EmitDefaultValue=false)]
        public string PickMode { get; set; }

        /// <summary>
        /// Gets or Sets PostPickTimerDuration
        /// </summary>
        [DataMember(Name="postPickTimerDuration", EmitDefaultValue=false)]
        public int? PostPickTimerDuration { get; set; }

        /// <summary>
        /// Gets or Sets Reroll
        /// </summary>
        [DataMember(Name="reroll", EmitDefaultValue=false)]
        public bool? Reroll { get; set; }

        /// <summary>
        /// Gets or Sets TeamChampionPool
        /// </summary>
        [DataMember(Name="teamChampionPool", EmitDefaultValue=false)]
        public bool? TeamChampionPool { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolClashQueueGameTypeConfig {\n");
            sb.Append("  AdvancedLearningQuests: ").Append(AdvancedLearningQuests).Append("\n");
            sb.Append("  AllowTrades: ").Append(AllowTrades).Append("\n");
            sb.Append("  BanMode: ").Append(BanMode).Append("\n");
            sb.Append("  BanTimerDuration: ").Append(BanTimerDuration).Append("\n");
            sb.Append("  BattleBoost: ").Append(BattleBoost).Append("\n");
            sb.Append("  CrossTeamChampionPool: ").Append(CrossTeamChampionPool).Append("\n");
            sb.Append("  DeathMatch: ").Append(DeathMatch).Append("\n");
            sb.Append("  DoNotRemove: ").Append(DoNotRemove).Append("\n");
            sb.Append("  DuplicatePick: ").Append(DuplicatePick).Append("\n");
            sb.Append("  ExclusivePick: ").Append(ExclusivePick).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LearningQuests: ").Append(LearningQuests).Append("\n");
            sb.Append("  MainPickTimerDuration: ").Append(MainPickTimerDuration).Append("\n");
            sb.Append("  MaxAllowableBans: ").Append(MaxAllowableBans).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OnboardCoopBeginner: ").Append(OnboardCoopBeginner).Append("\n");
            sb.Append("  PickMode: ").Append(PickMode).Append("\n");
            sb.Append("  PostPickTimerDuration: ").Append(PostPickTimerDuration).Append("\n");
            sb.Append("  Reroll: ").Append(Reroll).Append("\n");
            sb.Append("  TeamChampionPool: ").Append(TeamChampionPool).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolClashQueueGameTypeConfig);
        }

        /// <summary>
        /// Returns true if LolClashQueueGameTypeConfig instances are equal
        /// </summary>
        /// <param name="other">Instance of LolClashQueueGameTypeConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolClashQueueGameTypeConfig other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AdvancedLearningQuests == other.AdvancedLearningQuests ||
                    this.AdvancedLearningQuests != null &&
                    this.AdvancedLearningQuests.Equals(other.AdvancedLearningQuests)
                ) && 
                (
                    this.AllowTrades == other.AllowTrades ||
                    this.AllowTrades != null &&
                    this.AllowTrades.Equals(other.AllowTrades)
                ) && 
                (
                    this.BanMode == other.BanMode ||
                    this.BanMode != null &&
                    this.BanMode.Equals(other.BanMode)
                ) && 
                (
                    this.BanTimerDuration == other.BanTimerDuration ||
                    this.BanTimerDuration != null &&
                    this.BanTimerDuration.Equals(other.BanTimerDuration)
                ) && 
                (
                    this.BattleBoost == other.BattleBoost ||
                    this.BattleBoost != null &&
                    this.BattleBoost.Equals(other.BattleBoost)
                ) && 
                (
                    this.CrossTeamChampionPool == other.CrossTeamChampionPool ||
                    this.CrossTeamChampionPool != null &&
                    this.CrossTeamChampionPool.Equals(other.CrossTeamChampionPool)
                ) && 
                (
                    this.DeathMatch == other.DeathMatch ||
                    this.DeathMatch != null &&
                    this.DeathMatch.Equals(other.DeathMatch)
                ) && 
                (
                    this.DoNotRemove == other.DoNotRemove ||
                    this.DoNotRemove != null &&
                    this.DoNotRemove.Equals(other.DoNotRemove)
                ) && 
                (
                    this.DuplicatePick == other.DuplicatePick ||
                    this.DuplicatePick != null &&
                    this.DuplicatePick.Equals(other.DuplicatePick)
                ) && 
                (
                    this.ExclusivePick == other.ExclusivePick ||
                    this.ExclusivePick != null &&
                    this.ExclusivePick.Equals(other.ExclusivePick)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.LearningQuests == other.LearningQuests ||
                    this.LearningQuests != null &&
                    this.LearningQuests.Equals(other.LearningQuests)
                ) && 
                (
                    this.MainPickTimerDuration == other.MainPickTimerDuration ||
                    this.MainPickTimerDuration != null &&
                    this.MainPickTimerDuration.Equals(other.MainPickTimerDuration)
                ) && 
                (
                    this.MaxAllowableBans == other.MaxAllowableBans ||
                    this.MaxAllowableBans != null &&
                    this.MaxAllowableBans.Equals(other.MaxAllowableBans)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.OnboardCoopBeginner == other.OnboardCoopBeginner ||
                    this.OnboardCoopBeginner != null &&
                    this.OnboardCoopBeginner.Equals(other.OnboardCoopBeginner)
                ) && 
                (
                    this.PickMode == other.PickMode ||
                    this.PickMode != null &&
                    this.PickMode.Equals(other.PickMode)
                ) && 
                (
                    this.PostPickTimerDuration == other.PostPickTimerDuration ||
                    this.PostPickTimerDuration != null &&
                    this.PostPickTimerDuration.Equals(other.PostPickTimerDuration)
                ) && 
                (
                    this.Reroll == other.Reroll ||
                    this.Reroll != null &&
                    this.Reroll.Equals(other.Reroll)
                ) && 
                (
                    this.TeamChampionPool == other.TeamChampionPool ||
                    this.TeamChampionPool != null &&
                    this.TeamChampionPool.Equals(other.TeamChampionPool)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AdvancedLearningQuests != null)
                    hash = hash * 59 + this.AdvancedLearningQuests.GetHashCode();
                if (this.AllowTrades != null)
                    hash = hash * 59 + this.AllowTrades.GetHashCode();
                if (this.BanMode != null)
                    hash = hash * 59 + this.BanMode.GetHashCode();
                if (this.BanTimerDuration != null)
                    hash = hash * 59 + this.BanTimerDuration.GetHashCode();
                if (this.BattleBoost != null)
                    hash = hash * 59 + this.BattleBoost.GetHashCode();
                if (this.CrossTeamChampionPool != null)
                    hash = hash * 59 + this.CrossTeamChampionPool.GetHashCode();
                if (this.DeathMatch != null)
                    hash = hash * 59 + this.DeathMatch.GetHashCode();
                if (this.DoNotRemove != null)
                    hash = hash * 59 + this.DoNotRemove.GetHashCode();
                if (this.DuplicatePick != null)
                    hash = hash * 59 + this.DuplicatePick.GetHashCode();
                if (this.ExclusivePick != null)
                    hash = hash * 59 + this.ExclusivePick.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.LearningQuests != null)
                    hash = hash * 59 + this.LearningQuests.GetHashCode();
                if (this.MainPickTimerDuration != null)
                    hash = hash * 59 + this.MainPickTimerDuration.GetHashCode();
                if (this.MaxAllowableBans != null)
                    hash = hash * 59 + this.MaxAllowableBans.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.OnboardCoopBeginner != null)
                    hash = hash * 59 + this.OnboardCoopBeginner.GetHashCode();
                if (this.PickMode != null)
                    hash = hash * 59 + this.PickMode.GetHashCode();
                if (this.PostPickTimerDuration != null)
                    hash = hash * 59 + this.PostPickTimerDuration.GetHashCode();
                if (this.Reroll != null)
                    hash = hash * 59 + this.Reroll.GetHashCode();
                if (this.TeamChampionPool != null)
                    hash = hash * 59 + this.TeamChampionPool.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
