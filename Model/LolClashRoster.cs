/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolClashRoster
    /// </summary>
    [DataContract]
    public partial class LolClashRoster :  IEquatable<LolClashRoster>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolClashRoster" /> class.
        /// </summary>
        /// <param name="AvailableIcons">AvailableIcons.</param>
        /// <param name="CaptainSummonerId">CaptainSummonerId.</param>
        /// <param name="CurrentBracketWins">CurrentBracketWins.</param>
        /// <param name="Eliminated">Eliminated.</param>
        /// <param name="IconColorId">IconColorId.</param>
        /// <param name="IconId">IconId.</param>
        /// <param name="Id">Id.</param>
        /// <param name="IsActiveInCurrentPhase">IsActiveInCurrentPhase.</param>
        /// <param name="IsCurrentBracketComplete">IsCurrentBracketComplete.</param>
        /// <param name="IsRegistered">IsRegistered.</param>
        /// <param name="Losses">Losses.</param>
        /// <param name="Members">Members.</param>
        /// <param name="Name">Name.</param>
        /// <param name="NumCompletedPeriods">NumCompletedPeriods.</param>
        /// <param name="PhaseInfos">PhaseInfos.</param>
        /// <param name="ShortName">ShortName.</param>
        /// <param name="SuggestedInvites">SuggestedInvites.</param>
        /// <param name="Tier">Tier.</param>
        /// <param name="TournamentId">TournamentId.</param>
        /// <param name="Wins">Wins.</param>
        /// <param name="Withdraw">Withdraw.</param>
        public LolClashRoster(List<RewardIcon> AvailableIcons = default(List<RewardIcon>), long? CaptainSummonerId = default(long?), int? CurrentBracketWins = default(int?), bool? Eliminated = default(bool?), int? IconColorId = default(int?), int? IconId = default(int?), string Id = default(string), bool? IsActiveInCurrentPhase = default(bool?), bool? IsCurrentBracketComplete = default(bool?), bool? IsRegistered = default(bool?), int? Losses = default(int?), List<LolClashRosterMember> Members = default(List<LolClashRosterMember>), string Name = default(string), int? NumCompletedPeriods = default(int?), List<LolClashRosterPhaseInfo> PhaseInfos = default(List<LolClashRosterPhaseInfo>), string ShortName = default(string), List<LolClashSuggestedInvite> SuggestedInvites = default(List<LolClashSuggestedInvite>), int? Tier = default(int?), long? TournamentId = default(long?), int? Wins = default(int?), RosterWithdraw Withdraw = default(RosterWithdraw))
        {
            this.AvailableIcons = AvailableIcons;
            this.CaptainSummonerId = CaptainSummonerId;
            this.CurrentBracketWins = CurrentBracketWins;
            this.Eliminated = Eliminated;
            this.IconColorId = IconColorId;
            this.IconId = IconId;
            this.Id = Id;
            this.IsActiveInCurrentPhase = IsActiveInCurrentPhase;
            this.IsCurrentBracketComplete = IsCurrentBracketComplete;
            this.IsRegistered = IsRegistered;
            this.Losses = Losses;
            this.Members = Members;
            this.Name = Name;
            this.NumCompletedPeriods = NumCompletedPeriods;
            this.PhaseInfos = PhaseInfos;
            this.ShortName = ShortName;
            this.SuggestedInvites = SuggestedInvites;
            this.Tier = Tier;
            this.TournamentId = TournamentId;
            this.Wins = Wins;
            this.Withdraw = Withdraw;
        }
        
        /// <summary>
        /// Gets or Sets AvailableIcons
        /// </summary>
        [DataMember(Name="availableIcons", EmitDefaultValue=false)]
        public List<RewardIcon> AvailableIcons { get; set; }

        /// <summary>
        /// Gets or Sets CaptainSummonerId
        /// </summary>
        [DataMember(Name="captainSummonerId", EmitDefaultValue=false)]
        public long? CaptainSummonerId { get; set; }

        /// <summary>
        /// Gets or Sets CurrentBracketWins
        /// </summary>
        [DataMember(Name="currentBracketWins", EmitDefaultValue=false)]
        public int? CurrentBracketWins { get; set; }

        /// <summary>
        /// Gets or Sets Eliminated
        /// </summary>
        [DataMember(Name="eliminated", EmitDefaultValue=false)]
        public bool? Eliminated { get; set; }

        /// <summary>
        /// Gets or Sets IconColorId
        /// </summary>
        [DataMember(Name="iconColorId", EmitDefaultValue=false)]
        public int? IconColorId { get; set; }

        /// <summary>
        /// Gets or Sets IconId
        /// </summary>
        [DataMember(Name="iconId", EmitDefaultValue=false)]
        public int? IconId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsActiveInCurrentPhase
        /// </summary>
        [DataMember(Name="isActiveInCurrentPhase", EmitDefaultValue=false)]
        public bool? IsActiveInCurrentPhase { get; set; }

        /// <summary>
        /// Gets or Sets IsCurrentBracketComplete
        /// </summary>
        [DataMember(Name="isCurrentBracketComplete", EmitDefaultValue=false)]
        public bool? IsCurrentBracketComplete { get; set; }

        /// <summary>
        /// Gets or Sets IsRegistered
        /// </summary>
        [DataMember(Name="isRegistered", EmitDefaultValue=false)]
        public bool? IsRegistered { get; set; }

        /// <summary>
        /// Gets or Sets Losses
        /// </summary>
        [DataMember(Name="losses", EmitDefaultValue=false)]
        public int? Losses { get; set; }

        /// <summary>
        /// Gets or Sets Members
        /// </summary>
        [DataMember(Name="members", EmitDefaultValue=false)]
        public List<LolClashRosterMember> Members { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NumCompletedPeriods
        /// </summary>
        [DataMember(Name="numCompletedPeriods", EmitDefaultValue=false)]
        public int? NumCompletedPeriods { get; set; }

        /// <summary>
        /// Gets or Sets PhaseInfos
        /// </summary>
        [DataMember(Name="phaseInfos", EmitDefaultValue=false)]
        public List<LolClashRosterPhaseInfo> PhaseInfos { get; set; }

        /// <summary>
        /// Gets or Sets ShortName
        /// </summary>
        [DataMember(Name="shortName", EmitDefaultValue=false)]
        public string ShortName { get; set; }

        /// <summary>
        /// Gets or Sets SuggestedInvites
        /// </summary>
        [DataMember(Name="suggestedInvites", EmitDefaultValue=false)]
        public List<LolClashSuggestedInvite> SuggestedInvites { get; set; }

        /// <summary>
        /// Gets or Sets Tier
        /// </summary>
        [DataMember(Name="tier", EmitDefaultValue=false)]
        public int? Tier { get; set; }

        /// <summary>
        /// Gets or Sets TournamentId
        /// </summary>
        [DataMember(Name="tournamentId", EmitDefaultValue=false)]
        public long? TournamentId { get; set; }

        /// <summary>
        /// Gets or Sets Wins
        /// </summary>
        [DataMember(Name="wins", EmitDefaultValue=false)]
        public int? Wins { get; set; }

        /// <summary>
        /// Gets or Sets Withdraw
        /// </summary>
        [DataMember(Name="withdraw", EmitDefaultValue=false)]
        public RosterWithdraw Withdraw { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolClashRoster {\n");
            sb.Append("  AvailableIcons: ").Append(AvailableIcons).Append("\n");
            sb.Append("  CaptainSummonerId: ").Append(CaptainSummonerId).Append("\n");
            sb.Append("  CurrentBracketWins: ").Append(CurrentBracketWins).Append("\n");
            sb.Append("  Eliminated: ").Append(Eliminated).Append("\n");
            sb.Append("  IconColorId: ").Append(IconColorId).Append("\n");
            sb.Append("  IconId: ").Append(IconId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActiveInCurrentPhase: ").Append(IsActiveInCurrentPhase).Append("\n");
            sb.Append("  IsCurrentBracketComplete: ").Append(IsCurrentBracketComplete).Append("\n");
            sb.Append("  IsRegistered: ").Append(IsRegistered).Append("\n");
            sb.Append("  Losses: ").Append(Losses).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NumCompletedPeriods: ").Append(NumCompletedPeriods).Append("\n");
            sb.Append("  PhaseInfos: ").Append(PhaseInfos).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  SuggestedInvites: ").Append(SuggestedInvites).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  TournamentId: ").Append(TournamentId).Append("\n");
            sb.Append("  Wins: ").Append(Wins).Append("\n");
            sb.Append("  Withdraw: ").Append(Withdraw).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolClashRoster);
        }

        /// <summary>
        /// Returns true if LolClashRoster instances are equal
        /// </summary>
        /// <param name="other">Instance of LolClashRoster to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolClashRoster other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AvailableIcons == other.AvailableIcons ||
                    this.AvailableIcons != null &&
                    this.AvailableIcons.SequenceEqual(other.AvailableIcons)
                ) && 
                (
                    this.CaptainSummonerId == other.CaptainSummonerId ||
                    this.CaptainSummonerId != null &&
                    this.CaptainSummonerId.Equals(other.CaptainSummonerId)
                ) && 
                (
                    this.CurrentBracketWins == other.CurrentBracketWins ||
                    this.CurrentBracketWins != null &&
                    this.CurrentBracketWins.Equals(other.CurrentBracketWins)
                ) && 
                (
                    this.Eliminated == other.Eliminated ||
                    this.Eliminated != null &&
                    this.Eliminated.Equals(other.Eliminated)
                ) && 
                (
                    this.IconColorId == other.IconColorId ||
                    this.IconColorId != null &&
                    this.IconColorId.Equals(other.IconColorId)
                ) && 
                (
                    this.IconId == other.IconId ||
                    this.IconId != null &&
                    this.IconId.Equals(other.IconId)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.IsActiveInCurrentPhase == other.IsActiveInCurrentPhase ||
                    this.IsActiveInCurrentPhase != null &&
                    this.IsActiveInCurrentPhase.Equals(other.IsActiveInCurrentPhase)
                ) && 
                (
                    this.IsCurrentBracketComplete == other.IsCurrentBracketComplete ||
                    this.IsCurrentBracketComplete != null &&
                    this.IsCurrentBracketComplete.Equals(other.IsCurrentBracketComplete)
                ) && 
                (
                    this.IsRegistered == other.IsRegistered ||
                    this.IsRegistered != null &&
                    this.IsRegistered.Equals(other.IsRegistered)
                ) && 
                (
                    this.Losses == other.Losses ||
                    this.Losses != null &&
                    this.Losses.Equals(other.Losses)
                ) && 
                (
                    this.Members == other.Members ||
                    this.Members != null &&
                    this.Members.SequenceEqual(other.Members)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.NumCompletedPeriods == other.NumCompletedPeriods ||
                    this.NumCompletedPeriods != null &&
                    this.NumCompletedPeriods.Equals(other.NumCompletedPeriods)
                ) && 
                (
                    this.PhaseInfos == other.PhaseInfos ||
                    this.PhaseInfos != null &&
                    this.PhaseInfos.SequenceEqual(other.PhaseInfos)
                ) && 
                (
                    this.ShortName == other.ShortName ||
                    this.ShortName != null &&
                    this.ShortName.Equals(other.ShortName)
                ) && 
                (
                    this.SuggestedInvites == other.SuggestedInvites ||
                    this.SuggestedInvites != null &&
                    this.SuggestedInvites.SequenceEqual(other.SuggestedInvites)
                ) && 
                (
                    this.Tier == other.Tier ||
                    this.Tier != null &&
                    this.Tier.Equals(other.Tier)
                ) && 
                (
                    this.TournamentId == other.TournamentId ||
                    this.TournamentId != null &&
                    this.TournamentId.Equals(other.TournamentId)
                ) && 
                (
                    this.Wins == other.Wins ||
                    this.Wins != null &&
                    this.Wins.Equals(other.Wins)
                ) && 
                (
                    this.Withdraw == other.Withdraw ||
                    this.Withdraw != null &&
                    this.Withdraw.Equals(other.Withdraw)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AvailableIcons != null)
                    hash = hash * 59 + this.AvailableIcons.GetHashCode();
                if (this.CaptainSummonerId != null)
                    hash = hash * 59 + this.CaptainSummonerId.GetHashCode();
                if (this.CurrentBracketWins != null)
                    hash = hash * 59 + this.CurrentBracketWins.GetHashCode();
                if (this.Eliminated != null)
                    hash = hash * 59 + this.Eliminated.GetHashCode();
                if (this.IconColorId != null)
                    hash = hash * 59 + this.IconColorId.GetHashCode();
                if (this.IconId != null)
                    hash = hash * 59 + this.IconId.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.IsActiveInCurrentPhase != null)
                    hash = hash * 59 + this.IsActiveInCurrentPhase.GetHashCode();
                if (this.IsCurrentBracketComplete != null)
                    hash = hash * 59 + this.IsCurrentBracketComplete.GetHashCode();
                if (this.IsRegistered != null)
                    hash = hash * 59 + this.IsRegistered.GetHashCode();
                if (this.Losses != null)
                    hash = hash * 59 + this.Losses.GetHashCode();
                if (this.Members != null)
                    hash = hash * 59 + this.Members.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.NumCompletedPeriods != null)
                    hash = hash * 59 + this.NumCompletedPeriods.GetHashCode();
                if (this.PhaseInfos != null)
                    hash = hash * 59 + this.PhaseInfos.GetHashCode();
                if (this.ShortName != null)
                    hash = hash * 59 + this.ShortName.GetHashCode();
                if (this.SuggestedInvites != null)
                    hash = hash * 59 + this.SuggestedInvites.GetHashCode();
                if (this.Tier != null)
                    hash = hash * 59 + this.Tier.GetHashCode();
                if (this.TournamentId != null)
                    hash = hash * 59 + this.TournamentId.GetHashCode();
                if (this.Wins != null)
                    hash = hash * 59 + this.Wins.GetHashCode();
                if (this.Withdraw != null)
                    hash = hash * 59 + this.Withdraw.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
