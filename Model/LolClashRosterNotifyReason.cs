/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// Defines LolClashRosterNotifyReason
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum LolClashRosterNotifyReason
    {
        
        /// <summary>
        /// Enum ROSTERSETTICKET for "ROSTER_SET_TICKET"
        /// </summary>
        [EnumMember(Value = "ROSTER_SET_TICKET")]
        ROSTERSETTICKET,
        
        /// <summary>
        /// Enum ROSTEROFFERTICKET for "ROSTER_OFFER_TICKET"
        /// </summary>
        [EnumMember(Value = "ROSTER_OFFER_TICKET")]
        ROSTEROFFERTICKET,
        
        /// <summary>
        /// Enum ROSTERACCEPTTICKET for "ROSTER_ACCEPT_TICKET"
        /// </summary>
        [EnumMember(Value = "ROSTER_ACCEPT_TICKET")]
        ROSTERACCEPTTICKET,
        
        /// <summary>
        /// Enum ROSTERDECLINETICKET for "ROSTER_DECLINE_TICKET"
        /// </summary>
        [EnumMember(Value = "ROSTER_DECLINE_TICKET")]
        ROSTERDECLINETICKET,
        
        /// <summary>
        /// Enum ROSTERREVOKEDTICKET for "ROSTER_REVOKED_TICKET"
        /// </summary>
        [EnumMember(Value = "ROSTER_REVOKED_TICKET")]
        ROSTERREVOKEDTICKET,
        
        /// <summary>
        /// Enum BUYBACKUNREADY for "BUYBACK_UNREADY"
        /// </summary>
        [EnumMember(Value = "BUYBACK_UNREADY")]
        BUYBACKUNREADY,
        
        /// <summary>
        /// Enum BUYBACKREADY for "BUYBACK_READY"
        /// </summary>
        [EnumMember(Value = "BUYBACK_READY")]
        BUYBACKREADY,
        
        /// <summary>
        /// Enum BUYBACK for "BUYBACK"
        /// </summary>
        [EnumMember(Value = "BUYBACK")]
        BUYBACK,
        
        /// <summary>
        /// Enum BYEAUTOWIN for "BYE_AUTO_WIN"
        /// </summary>
        [EnumMember(Value = "BYE_AUTO_WIN")]
        BYEAUTOWIN,
        
        /// <summary>
        /// Enum CHANGEPOSITION for "CHANGE_POSITION"
        /// </summary>
        [EnumMember(Value = "CHANGE_POSITION")]
        CHANGEPOSITION,
        
        /// <summary>
        /// Enum REGISTERED for "REGISTERED"
        /// </summary>
        [EnumMember(Value = "REGISTERED")]
        REGISTERED,
        
        /// <summary>
        /// Enum RESTRICTIONAUTOWIN for "RESTRICTION_AUTO_WIN"
        /// </summary>
        [EnumMember(Value = "RESTRICTION_AUTO_WIN")]
        RESTRICTIONAUTOWIN,
        
        /// <summary>
        /// Enum PHASEUNREADY for "PHASE_UNREADY"
        /// </summary>
        [EnumMember(Value = "PHASE_UNREADY")]
        PHASEUNREADY,
        
        /// <summary>
        /// Enum PHASEREADY for "PHASE_READY"
        /// </summary>
        [EnumMember(Value = "PHASE_READY")]
        PHASEREADY,
        
        /// <summary>
        /// Enum PHASECHECKIN for "PHASE_CHECKIN"
        /// </summary>
        [EnumMember(Value = "PHASE_CHECKIN")]
        PHASECHECKIN,
        
        /// <summary>
        /// Enum GAMECOMPLETED for "GAME_COMPLETED"
        /// </summary>
        [EnumMember(Value = "GAME_COMPLETED")]
        GAMECOMPLETED,
        
        /// <summary>
        /// Enum GAMESTARTED for "GAME_STARTED"
        /// </summary>
        [EnumMember(Value = "GAME_STARTED")]
        GAMESTARTED,
        
        /// <summary>
        /// Enum GAMESTARTEDERROR for "GAME_STARTED_ERROR"
        /// </summary>
        [EnumMember(Value = "GAME_STARTED_ERROR")]
        GAMESTARTEDERROR,
        
        /// <summary>
        /// Enum QUEUEDODGE for "QUEUE_DODGE"
        /// </summary>
        [EnumMember(Value = "QUEUE_DODGE")]
        QUEUEDODGE,
        
        /// <summary>
        /// Enum LOSERROUNDCOMPLETE for "LOSER_ROUND_COMPLETE"
        /// </summary>
        [EnumMember(Value = "LOSER_ROUND_COMPLETE")]
        LOSERROUNDCOMPLETE,
        
        /// <summary>
        /// Enum SUBINVITE for "SUB_INVITE"
        /// </summary>
        [EnumMember(Value = "SUB_INVITE")]
        SUBINVITE,
        
        /// <summary>
        /// Enum SUBACCEPT for "SUB_ACCEPT"
        /// </summary>
        [EnumMember(Value = "SUB_ACCEPT")]
        SUBACCEPT,
        
        /// <summary>
        /// Enum SUBDECLINE for "SUB_DECLINE"
        /// </summary>
        [EnumMember(Value = "SUB_DECLINE")]
        SUBDECLINE,
        
        /// <summary>
        /// Enum SUBREVOKE for "SUB_REVOKE"
        /// </summary>
        [EnumMember(Value = "SUB_REVOKE")]
        SUBREVOKE,
        
        /// <summary>
        /// Enum SUBSUGGEST for "SUB_SUGGEST"
        /// </summary>
        [EnumMember(Value = "SUB_SUGGEST")]
        SUBSUGGEST,
        
        /// <summary>
        /// Enum SUBACCEPTSUGGEST for "SUB_ACCEPTSUGGEST"
        /// </summary>
        [EnumMember(Value = "SUB_ACCEPTSUGGEST")]
        SUBACCEPTSUGGEST,
        
        /// <summary>
        /// Enum SUBDECLINESUGGEST for "SUB_DECLINESUGGEST"
        /// </summary>
        [EnumMember(Value = "SUB_DECLINESUGGEST")]
        SUBDECLINESUGGEST,
        
        /// <summary>
        /// Enum SUBRECLAIM for "SUB_RECLAIM"
        /// </summary>
        [EnumMember(Value = "SUB_RECLAIM")]
        SUBRECLAIM,
        
        /// <summary>
        /// Enum VOTEWITHDRAWUPDATE for "VOTE_WITHDRAW_UPDATE"
        /// </summary>
        [EnumMember(Value = "VOTE_WITHDRAW_UPDATE")]
        VOTEWITHDRAWUPDATE,
        
        /// <summary>
        /// Enum VOTEWITHDRAWDISMISS for "VOTE_WITHDRAW_DISMISS"
        /// </summary>
        [EnumMember(Value = "VOTE_WITHDRAW_DISMISS")]
        VOTEWITHDRAWDISMISS,
        
        /// <summary>
        /// Enum WITHDRAW for "WITHDRAW"
        /// </summary>
        [EnumMember(Value = "WITHDRAW")]
        WITHDRAW,
        
        /// <summary>
        /// Enum WINNERROUNDCOMPLETE for "WINNER_ROUND_COMPLETE"
        /// </summary>
        [EnumMember(Value = "WINNER_ROUND_COMPLETE")]
        WINNERROUNDCOMPLETE
    }

}
