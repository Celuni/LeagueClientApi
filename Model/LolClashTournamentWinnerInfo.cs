/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolClashTournamentWinnerInfo
    /// </summary>
    [DataContract]
    public partial class LolClashTournamentWinnerInfo :  IEquatable<LolClashTournamentWinnerInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolClashTournamentWinnerInfo" /> class.
        /// </summary>
        /// <param name="AverageWinDuration">AverageWinDuration.</param>
        /// <param name="CreateTime">CreateTime.</param>
        /// <param name="Logo">Logo.</param>
        /// <param name="LogoColor">LogoColor.</param>
        /// <param name="Name">Name.</param>
        /// <param name="PlayerIds">PlayerIds.</param>
        /// <param name="RosterId">RosterId.</param>
        /// <param name="ShortName">ShortName.</param>
        /// <param name="Tier">Tier.</param>
        public LolClashTournamentWinnerInfo(long? AverageWinDuration = default(long?), long? CreateTime = default(long?), int? Logo = default(int?), int? LogoColor = default(int?), string Name = default(string), List<long?> PlayerIds = default(List<long?>), long? RosterId = default(long?), string ShortName = default(string), int? Tier = default(int?))
        {
            this.AverageWinDuration = AverageWinDuration;
            this.CreateTime = CreateTime;
            this.Logo = Logo;
            this.LogoColor = LogoColor;
            this.Name = Name;
            this.PlayerIds = PlayerIds;
            this.RosterId = RosterId;
            this.ShortName = ShortName;
            this.Tier = Tier;
        }
        
        /// <summary>
        /// Gets or Sets AverageWinDuration
        /// </summary>
        [DataMember(Name="averageWinDuration", EmitDefaultValue=false)]
        public long? AverageWinDuration { get; set; }

        /// <summary>
        /// Gets or Sets CreateTime
        /// </summary>
        [DataMember(Name="createTime", EmitDefaultValue=false)]
        public long? CreateTime { get; set; }

        /// <summary>
        /// Gets or Sets Logo
        /// </summary>
        [DataMember(Name="logo", EmitDefaultValue=false)]
        public int? Logo { get; set; }

        /// <summary>
        /// Gets or Sets LogoColor
        /// </summary>
        [DataMember(Name="logoColor", EmitDefaultValue=false)]
        public int? LogoColor { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PlayerIds
        /// </summary>
        [DataMember(Name="playerIds", EmitDefaultValue=false)]
        public List<long?> PlayerIds { get; set; }

        /// <summary>
        /// Gets or Sets RosterId
        /// </summary>
        [DataMember(Name="rosterId", EmitDefaultValue=false)]
        public long? RosterId { get; set; }

        /// <summary>
        /// Gets or Sets ShortName
        /// </summary>
        [DataMember(Name="shortName", EmitDefaultValue=false)]
        public string ShortName { get; set; }

        /// <summary>
        /// Gets or Sets Tier
        /// </summary>
        [DataMember(Name="tier", EmitDefaultValue=false)]
        public int? Tier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolClashTournamentWinnerInfo {\n");
            sb.Append("  AverageWinDuration: ").Append(AverageWinDuration).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  LogoColor: ").Append(LogoColor).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PlayerIds: ").Append(PlayerIds).Append("\n");
            sb.Append("  RosterId: ").Append(RosterId).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolClashTournamentWinnerInfo);
        }

        /// <summary>
        /// Returns true if LolClashTournamentWinnerInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of LolClashTournamentWinnerInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolClashTournamentWinnerInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AverageWinDuration == other.AverageWinDuration ||
                    this.AverageWinDuration != null &&
                    this.AverageWinDuration.Equals(other.AverageWinDuration)
                ) && 
                (
                    this.CreateTime == other.CreateTime ||
                    this.CreateTime != null &&
                    this.CreateTime.Equals(other.CreateTime)
                ) && 
                (
                    this.Logo == other.Logo ||
                    this.Logo != null &&
                    this.Logo.Equals(other.Logo)
                ) && 
                (
                    this.LogoColor == other.LogoColor ||
                    this.LogoColor != null &&
                    this.LogoColor.Equals(other.LogoColor)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.PlayerIds == other.PlayerIds ||
                    this.PlayerIds != null &&
                    this.PlayerIds.SequenceEqual(other.PlayerIds)
                ) && 
                (
                    this.RosterId == other.RosterId ||
                    this.RosterId != null &&
                    this.RosterId.Equals(other.RosterId)
                ) && 
                (
                    this.ShortName == other.ShortName ||
                    this.ShortName != null &&
                    this.ShortName.Equals(other.ShortName)
                ) && 
                (
                    this.Tier == other.Tier ||
                    this.Tier != null &&
                    this.Tier.Equals(other.Tier)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AverageWinDuration != null)
                    hash = hash * 59 + this.AverageWinDuration.GetHashCode();
                if (this.CreateTime != null)
                    hash = hash * 59 + this.CreateTime.GetHashCode();
                if (this.Logo != null)
                    hash = hash * 59 + this.Logo.GetHashCode();
                if (this.LogoColor != null)
                    hash = hash * 59 + this.LogoColor.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.PlayerIds != null)
                    hash = hash * 59 + this.PlayerIds.GetHashCode();
                if (this.RosterId != null)
                    hash = hash * 59 + this.RosterId.GetHashCode();
                if (this.ShortName != null)
                    hash = hash * 59 + this.ShortName.GetHashCode();
                if (this.Tier != null)
                    hash = hash * 59 + this.Tier.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
