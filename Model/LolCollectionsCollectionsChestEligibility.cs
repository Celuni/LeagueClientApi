/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolCollectionsCollectionsChestEligibility
    /// </summary>
    [DataContract]
    public partial class LolCollectionsCollectionsChestEligibility :  IEquatable<LolCollectionsCollectionsChestEligibility>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolCollectionsCollectionsChestEligibility" /> class.
        /// </summary>
        /// <param name="EarnableChests">EarnableChests.</param>
        /// <param name="MaximumChests">MaximumChests.</param>
        /// <param name="NextChestRechargeTime">NextChestRechargeTime.</param>
        public LolCollectionsCollectionsChestEligibility(int? EarnableChests = default(int?), int? MaximumChests = default(int?), long? NextChestRechargeTime = default(long?))
        {
            this.EarnableChests = EarnableChests;
            this.MaximumChests = MaximumChests;
            this.NextChestRechargeTime = NextChestRechargeTime;
        }
        
        /// <summary>
        /// Gets or Sets EarnableChests
        /// </summary>
        [DataMember(Name="earnableChests", EmitDefaultValue=false)]
        public int? EarnableChests { get; set; }

        /// <summary>
        /// Gets or Sets MaximumChests
        /// </summary>
        [DataMember(Name="maximumChests", EmitDefaultValue=false)]
        public int? MaximumChests { get; set; }

        /// <summary>
        /// Gets or Sets NextChestRechargeTime
        /// </summary>
        [DataMember(Name="nextChestRechargeTime", EmitDefaultValue=false)]
        public long? NextChestRechargeTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolCollectionsCollectionsChestEligibility {\n");
            sb.Append("  EarnableChests: ").Append(EarnableChests).Append("\n");
            sb.Append("  MaximumChests: ").Append(MaximumChests).Append("\n");
            sb.Append("  NextChestRechargeTime: ").Append(NextChestRechargeTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolCollectionsCollectionsChestEligibility);
        }

        /// <summary>
        /// Returns true if LolCollectionsCollectionsChestEligibility instances are equal
        /// </summary>
        /// <param name="other">Instance of LolCollectionsCollectionsChestEligibility to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolCollectionsCollectionsChestEligibility other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.EarnableChests == other.EarnableChests ||
                    this.EarnableChests != null &&
                    this.EarnableChests.Equals(other.EarnableChests)
                ) && 
                (
                    this.MaximumChests == other.MaximumChests ||
                    this.MaximumChests != null &&
                    this.MaximumChests.Equals(other.MaximumChests)
                ) && 
                (
                    this.NextChestRechargeTime == other.NextChestRechargeTime ||
                    this.NextChestRechargeTime != null &&
                    this.NextChestRechargeTime.Equals(other.NextChestRechargeTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.EarnableChests != null)
                    hash = hash * 59 + this.EarnableChests.GetHashCode();
                if (this.MaximumChests != null)
                    hash = hash * 59 + this.MaximumChests.GetHashCode();
                if (this.NextChestRechargeTime != null)
                    hash = hash * 59 + this.NextChestRechargeTime.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
