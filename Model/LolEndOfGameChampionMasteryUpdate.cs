/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolEndOfGameChampionMasteryUpdate
    /// </summary>
    [DataContract]
    public partial class LolEndOfGameChampionMasteryUpdate :  IEquatable<LolEndOfGameChampionMasteryUpdate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolEndOfGameChampionMasteryUpdate" /> class.
        /// </summary>
        /// <param name="BonusPointsGained">BonusPointsGained.</param>
        /// <param name="ChampionId">ChampionId.</param>
        /// <param name="GameId">GameId.</param>
        /// <param name="Grade">Grade.</param>
        /// <param name="HasLeveledUp">HasLeveledUp.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Level">Level.</param>
        /// <param name="LevelUpList">LevelUpList.</param>
        /// <param name="MemberGrades">MemberGrades.</param>
        /// <param name="PlayerId">PlayerId.</param>
        /// <param name="PointsBeforeGame">PointsBeforeGame.</param>
        /// <param name="PointsGained">PointsGained.</param>
        /// <param name="PointsGainedIndividualContribution">PointsGainedIndividualContribution.</param>
        /// <param name="PointsSinceLastLevelBeforeGame">PointsSinceLastLevelBeforeGame.</param>
        /// <param name="PointsUntilNextLevelAfterGame">PointsUntilNextLevelAfterGame.</param>
        /// <param name="PointsUntilNextLevelBeforeGame">PointsUntilNextLevelBeforeGame.</param>
        /// <param name="Score">Score.</param>
        public LolEndOfGameChampionMasteryUpdate(long? BonusPointsGained = default(long?), int? ChampionId = default(int?), long? GameId = default(long?), string Grade = default(string), bool? HasLeveledUp = default(bool?), string Id = default(string), long? Level = default(long?), List<LolEndOfGameChampionMasteryMini> LevelUpList = default(List<LolEndOfGameChampionMasteryMini>), List<LolEndOfGameChampionMasteryGrade> MemberGrades = default(List<LolEndOfGameChampionMasteryGrade>), long? PlayerId = default(long?), long? PointsBeforeGame = default(long?), long? PointsGained = default(long?), long? PointsGainedIndividualContribution = default(long?), long? PointsSinceLastLevelBeforeGame = default(long?), long? PointsUntilNextLevelAfterGame = default(long?), long? PointsUntilNextLevelBeforeGame = default(long?), long? Score = default(long?))
        {
            this.BonusPointsGained = BonusPointsGained;
            this.ChampionId = ChampionId;
            this.GameId = GameId;
            this.Grade = Grade;
            this.HasLeveledUp = HasLeveledUp;
            this.Id = Id;
            this.Level = Level;
            this.LevelUpList = LevelUpList;
            this.MemberGrades = MemberGrades;
            this.PlayerId = PlayerId;
            this.PointsBeforeGame = PointsBeforeGame;
            this.PointsGained = PointsGained;
            this.PointsGainedIndividualContribution = PointsGainedIndividualContribution;
            this.PointsSinceLastLevelBeforeGame = PointsSinceLastLevelBeforeGame;
            this.PointsUntilNextLevelAfterGame = PointsUntilNextLevelAfterGame;
            this.PointsUntilNextLevelBeforeGame = PointsUntilNextLevelBeforeGame;
            this.Score = Score;
        }
        
        /// <summary>
        /// Gets or Sets BonusPointsGained
        /// </summary>
        [DataMember(Name="bonusPointsGained", EmitDefaultValue=false)]
        public long? BonusPointsGained { get; set; }

        /// <summary>
        /// Gets or Sets ChampionId
        /// </summary>
        [DataMember(Name="championId", EmitDefaultValue=false)]
        public int? ChampionId { get; set; }

        /// <summary>
        /// Gets or Sets GameId
        /// </summary>
        [DataMember(Name="gameId", EmitDefaultValue=false)]
        public long? GameId { get; set; }

        /// <summary>
        /// Gets or Sets Grade
        /// </summary>
        [DataMember(Name="grade", EmitDefaultValue=false)]
        public string Grade { get; set; }

        /// <summary>
        /// Gets or Sets HasLeveledUp
        /// </summary>
        [DataMember(Name="hasLeveledUp", EmitDefaultValue=false)]
        public bool? HasLeveledUp { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name="level", EmitDefaultValue=false)]
        public long? Level { get; set; }

        /// <summary>
        /// Gets or Sets LevelUpList
        /// </summary>
        [DataMember(Name="levelUpList", EmitDefaultValue=false)]
        public List<LolEndOfGameChampionMasteryMini> LevelUpList { get; set; }

        /// <summary>
        /// Gets or Sets MemberGrades
        /// </summary>
        [DataMember(Name="memberGrades", EmitDefaultValue=false)]
        public List<LolEndOfGameChampionMasteryGrade> MemberGrades { get; set; }

        /// <summary>
        /// Gets or Sets PlayerId
        /// </summary>
        [DataMember(Name="playerId", EmitDefaultValue=false)]
        public long? PlayerId { get; set; }

        /// <summary>
        /// Gets or Sets PointsBeforeGame
        /// </summary>
        [DataMember(Name="pointsBeforeGame", EmitDefaultValue=false)]
        public long? PointsBeforeGame { get; set; }

        /// <summary>
        /// Gets or Sets PointsGained
        /// </summary>
        [DataMember(Name="pointsGained", EmitDefaultValue=false)]
        public long? PointsGained { get; set; }

        /// <summary>
        /// Gets or Sets PointsGainedIndividualContribution
        /// </summary>
        [DataMember(Name="pointsGainedIndividualContribution", EmitDefaultValue=false)]
        public long? PointsGainedIndividualContribution { get; set; }

        /// <summary>
        /// Gets or Sets PointsSinceLastLevelBeforeGame
        /// </summary>
        [DataMember(Name="pointsSinceLastLevelBeforeGame", EmitDefaultValue=false)]
        public long? PointsSinceLastLevelBeforeGame { get; set; }

        /// <summary>
        /// Gets or Sets PointsUntilNextLevelAfterGame
        /// </summary>
        [DataMember(Name="pointsUntilNextLevelAfterGame", EmitDefaultValue=false)]
        public long? PointsUntilNextLevelAfterGame { get; set; }

        /// <summary>
        /// Gets or Sets PointsUntilNextLevelBeforeGame
        /// </summary>
        [DataMember(Name="pointsUntilNextLevelBeforeGame", EmitDefaultValue=false)]
        public long? PointsUntilNextLevelBeforeGame { get; set; }

        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public long? Score { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolEndOfGameChampionMasteryUpdate {\n");
            sb.Append("  BonusPointsGained: ").Append(BonusPointsGained).Append("\n");
            sb.Append("  ChampionId: ").Append(ChampionId).Append("\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  HasLeveledUp: ").Append(HasLeveledUp).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  LevelUpList: ").Append(LevelUpList).Append("\n");
            sb.Append("  MemberGrades: ").Append(MemberGrades).Append("\n");
            sb.Append("  PlayerId: ").Append(PlayerId).Append("\n");
            sb.Append("  PointsBeforeGame: ").Append(PointsBeforeGame).Append("\n");
            sb.Append("  PointsGained: ").Append(PointsGained).Append("\n");
            sb.Append("  PointsGainedIndividualContribution: ").Append(PointsGainedIndividualContribution).Append("\n");
            sb.Append("  PointsSinceLastLevelBeforeGame: ").Append(PointsSinceLastLevelBeforeGame).Append("\n");
            sb.Append("  PointsUntilNextLevelAfterGame: ").Append(PointsUntilNextLevelAfterGame).Append("\n");
            sb.Append("  PointsUntilNextLevelBeforeGame: ").Append(PointsUntilNextLevelBeforeGame).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolEndOfGameChampionMasteryUpdate);
        }

        /// <summary>
        /// Returns true if LolEndOfGameChampionMasteryUpdate instances are equal
        /// </summary>
        /// <param name="other">Instance of LolEndOfGameChampionMasteryUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolEndOfGameChampionMasteryUpdate other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BonusPointsGained == other.BonusPointsGained ||
                    this.BonusPointsGained != null &&
                    this.BonusPointsGained.Equals(other.BonusPointsGained)
                ) && 
                (
                    this.ChampionId == other.ChampionId ||
                    this.ChampionId != null &&
                    this.ChampionId.Equals(other.ChampionId)
                ) && 
                (
                    this.GameId == other.GameId ||
                    this.GameId != null &&
                    this.GameId.Equals(other.GameId)
                ) && 
                (
                    this.Grade == other.Grade ||
                    this.Grade != null &&
                    this.Grade.Equals(other.Grade)
                ) && 
                (
                    this.HasLeveledUp == other.HasLeveledUp ||
                    this.HasLeveledUp != null &&
                    this.HasLeveledUp.Equals(other.HasLeveledUp)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Level == other.Level ||
                    this.Level != null &&
                    this.Level.Equals(other.Level)
                ) && 
                (
                    this.LevelUpList == other.LevelUpList ||
                    this.LevelUpList != null &&
                    this.LevelUpList.SequenceEqual(other.LevelUpList)
                ) && 
                (
                    this.MemberGrades == other.MemberGrades ||
                    this.MemberGrades != null &&
                    this.MemberGrades.SequenceEqual(other.MemberGrades)
                ) && 
                (
                    this.PlayerId == other.PlayerId ||
                    this.PlayerId != null &&
                    this.PlayerId.Equals(other.PlayerId)
                ) && 
                (
                    this.PointsBeforeGame == other.PointsBeforeGame ||
                    this.PointsBeforeGame != null &&
                    this.PointsBeforeGame.Equals(other.PointsBeforeGame)
                ) && 
                (
                    this.PointsGained == other.PointsGained ||
                    this.PointsGained != null &&
                    this.PointsGained.Equals(other.PointsGained)
                ) && 
                (
                    this.PointsGainedIndividualContribution == other.PointsGainedIndividualContribution ||
                    this.PointsGainedIndividualContribution != null &&
                    this.PointsGainedIndividualContribution.Equals(other.PointsGainedIndividualContribution)
                ) && 
                (
                    this.PointsSinceLastLevelBeforeGame == other.PointsSinceLastLevelBeforeGame ||
                    this.PointsSinceLastLevelBeforeGame != null &&
                    this.PointsSinceLastLevelBeforeGame.Equals(other.PointsSinceLastLevelBeforeGame)
                ) && 
                (
                    this.PointsUntilNextLevelAfterGame == other.PointsUntilNextLevelAfterGame ||
                    this.PointsUntilNextLevelAfterGame != null &&
                    this.PointsUntilNextLevelAfterGame.Equals(other.PointsUntilNextLevelAfterGame)
                ) && 
                (
                    this.PointsUntilNextLevelBeforeGame == other.PointsUntilNextLevelBeforeGame ||
                    this.PointsUntilNextLevelBeforeGame != null &&
                    this.PointsUntilNextLevelBeforeGame.Equals(other.PointsUntilNextLevelBeforeGame)
                ) && 
                (
                    this.Score == other.Score ||
                    this.Score != null &&
                    this.Score.Equals(other.Score)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BonusPointsGained != null)
                    hash = hash * 59 + this.BonusPointsGained.GetHashCode();
                if (this.ChampionId != null)
                    hash = hash * 59 + this.ChampionId.GetHashCode();
                if (this.GameId != null)
                    hash = hash * 59 + this.GameId.GetHashCode();
                if (this.Grade != null)
                    hash = hash * 59 + this.Grade.GetHashCode();
                if (this.HasLeveledUp != null)
                    hash = hash * 59 + this.HasLeveledUp.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Level != null)
                    hash = hash * 59 + this.Level.GetHashCode();
                if (this.LevelUpList != null)
                    hash = hash * 59 + this.LevelUpList.GetHashCode();
                if (this.MemberGrades != null)
                    hash = hash * 59 + this.MemberGrades.GetHashCode();
                if (this.PlayerId != null)
                    hash = hash * 59 + this.PlayerId.GetHashCode();
                if (this.PointsBeforeGame != null)
                    hash = hash * 59 + this.PointsBeforeGame.GetHashCode();
                if (this.PointsGained != null)
                    hash = hash * 59 + this.PointsGained.GetHashCode();
                if (this.PointsGainedIndividualContribution != null)
                    hash = hash * 59 + this.PointsGainedIndividualContribution.GetHashCode();
                if (this.PointsSinceLastLevelBeforeGame != null)
                    hash = hash * 59 + this.PointsSinceLastLevelBeforeGame.GetHashCode();
                if (this.PointsUntilNextLevelAfterGame != null)
                    hash = hash * 59 + this.PointsUntilNextLevelAfterGame.GetHashCode();
                if (this.PointsUntilNextLevelBeforeGame != null)
                    hash = hash * 59 + this.PointsUntilNextLevelBeforeGame.GetHashCode();
                if (this.Score != null)
                    hash = hash * 59 + this.Score.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
