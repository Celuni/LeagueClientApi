/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolEndOfGameEndOfGameStats
    /// </summary>
    [DataContract]
    public partial class LolEndOfGameEndOfGameStats :  IEquatable<LolEndOfGameEndOfGameStats>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolEndOfGameEndOfGameStats" /> class.
        /// </summary>
        /// <param name="AccountId">AccountId.</param>
        /// <param name="BasePoints">BasePoints.</param>
        /// <param name="BattleBoostIpEarned">BattleBoostIpEarned.</param>
        /// <param name="BoostIpEarned">BoostIpEarned.</param>
        /// <param name="BoostXpEarned">BoostXpEarned.</param>
        /// <param name="CausedEarlySurrender">CausedEarlySurrender.</param>
        /// <param name="ChampionId">ChampionId.</param>
        /// <param name="CoOpVsAiMinutesLeftToday">CoOpVsAiMinutesLeftToday.</param>
        /// <param name="CoOpVsAiMsecsUntilReset">CoOpVsAiMsecsUntilReset.</param>
        /// <param name="CompletionBonusPoints">CompletionBonusPoints.</param>
        /// <param name="CurrentLevel">CurrentLevel.</param>
        /// <param name="CustomMinutesLeftToday">CustomMinutesLeftToday.</param>
        /// <param name="CustomMsecsUntilReset">CustomMsecsUntilReset.</param>
        /// <param name="Difficulty">Difficulty.</param>
        /// <param name="EarlySurrenderAccomplice">EarlySurrenderAccomplice.</param>
        /// <param name="Elo">Elo.</param>
        /// <param name="EloChange">EloChange.</param>
        /// <param name="ExperienceEarned">ExperienceEarned.</param>
        /// <param name="ExperienceTotal">ExperienceTotal.</param>
        /// <param name="FirstWinBonus">FirstWinBonus.</param>
        /// <param name="GameEndedInEarlySurrender">GameEndedInEarlySurrender.</param>
        /// <param name="GameId">GameId.</param>
        /// <param name="GameLength">GameLength.</param>
        /// <param name="GameMode">GameMode.</param>
        /// <param name="GameMutators">GameMutators.</param>
        /// <param name="GameType">GameType.</param>
        /// <param name="GlobalBoostXpEarned">GlobalBoostXpEarned.</param>
        /// <param name="ImbalancedTeamsNoPoints">ImbalancedTeamsNoPoints.</param>
        /// <param name="Invalid">Invalid.</param>
        /// <param name="IpEarned">IpEarned.</param>
        /// <param name="IpTotal">IpTotal.</param>
        /// <param name="LeveledUp">LeveledUp.</param>
        /// <param name="LoyaltyBoostIpEarned">LoyaltyBoostIpEarned.</param>
        /// <param name="LoyaltyBoostXpEarned">LoyaltyBoostXpEarned.</param>
        /// <param name="MissionsXpEarned">MissionsXpEarned.</param>
        /// <param name="MyTeamStatus">MyTeamStatus.</param>
        /// <param name="NewSpells">NewSpells.</param>
        /// <param name="NextLevelXp">NextLevelXp.</param>
        /// <param name="OdinBonusIp">OdinBonusIp.</param>
        /// <param name="PartyRewardsBonusIpEarned">PartyRewardsBonusIpEarned.</param>
        /// <param name="PointsPenalties">PointsPenalties.</param>
        /// <param name="PreviousLevel">PreviousLevel.</param>
        /// <param name="PreviousXpTotal">PreviousXpTotal.</param>
        /// <param name="QueueBonusEarned">QueueBonusEarned.</param>
        /// <param name="QueueType">QueueType.</param>
        /// <param name="Ranked">Ranked.</param>
        /// <param name="ReportGameId">ReportGameId.</param>
        /// <param name="RerollData">RerollData.</param>
        /// <param name="RoomName">RoomName.</param>
        /// <param name="RoomPassword">RoomPassword.</param>
        /// <param name="RpEarned">RpEarned.</param>
        /// <param name="SendStatsToTournamentProvider">SendStatsToTournamentProvider.</param>
        /// <param name="SkinId">SkinId.</param>
        /// <param name="SkinIndex">SkinIndex.</param>
        /// <param name="SummonerId">SummonerId.</param>
        /// <param name="SummonerName">SummonerName.</param>
        /// <param name="TalentPointsGained">TalentPointsGained.</param>
        /// <param name="TeamBoost">TeamBoost.</param>
        /// <param name="TeamEarlySurrendered">TeamEarlySurrendered.</param>
        /// <param name="Teams">Teams.</param>
        /// <param name="TimeUntilNextFirstWinBonus">TimeUntilNextFirstWinBonus.</param>
        /// <param name="UserId">UserId.</param>
        public LolEndOfGameEndOfGameStats(long? AccountId = default(long?), int? BasePoints = default(int?), int? BattleBoostIpEarned = default(int?), int? BoostIpEarned = default(int?), int? BoostXpEarned = default(int?), bool? CausedEarlySurrender = default(bool?), int? ChampionId = default(int?), int? CoOpVsAiMinutesLeftToday = default(int?), int? CoOpVsAiMsecsUntilReset = default(int?), int? CompletionBonusPoints = default(int?), long? CurrentLevel = default(long?), int? CustomMinutesLeftToday = default(int?), int? CustomMsecsUntilReset = default(int?), string Difficulty = default(string), bool? EarlySurrenderAccomplice = default(bool?), int? Elo = default(int?), int? EloChange = default(int?), int? ExperienceEarned = default(int?), int? ExperienceTotal = default(int?), int? FirstWinBonus = default(int?), bool? GameEndedInEarlySurrender = default(bool?), long? GameId = default(long?), int? GameLength = default(int?), string GameMode = default(string), List<string> GameMutators = default(List<string>), string GameType = default(string), int? GlobalBoostXpEarned = default(int?), bool? ImbalancedTeamsNoPoints = default(bool?), bool? Invalid = default(bool?), int? IpEarned = default(int?), int? IpTotal = default(int?), bool? LeveledUp = default(bool?), int? LoyaltyBoostIpEarned = default(int?), int? LoyaltyBoostXpEarned = default(int?), int? MissionsXpEarned = default(int?), string MyTeamStatus = default(string), List<int?> NewSpells = default(List<int?>), long? NextLevelXp = default(long?), int? OdinBonusIp = default(int?), int? PartyRewardsBonusIpEarned = default(int?), Object PointsPenalties = default(Object), long? PreviousLevel = default(long?), long? PreviousXpTotal = default(long?), int? QueueBonusEarned = default(int?), string QueueType = default(string), bool? Ranked = default(bool?), long? ReportGameId = default(long?), LolEndOfGameEndOfGamePoints RerollData = default(LolEndOfGameEndOfGamePoints), string RoomName = default(string), string RoomPassword = default(string), int? RpEarned = default(int?), bool? SendStatsToTournamentProvider = default(bool?), int? SkinId = default(int?), int? SkinIndex = default(int?), long? SummonerId = default(long?), string SummonerName = default(string), int? TalentPointsGained = default(int?), LolEndOfGameEndOfGameTeamBoost TeamBoost = default(LolEndOfGameEndOfGameTeamBoost), bool? TeamEarlySurrendered = default(bool?), List<LolEndOfGameEndOfGameTeam> Teams = default(List<LolEndOfGameEndOfGameTeam>), int? TimeUntilNextFirstWinBonus = default(int?), long? UserId = default(long?))
        {
            this.AccountId = AccountId;
            this.BasePoints = BasePoints;
            this.BattleBoostIpEarned = BattleBoostIpEarned;
            this.BoostIpEarned = BoostIpEarned;
            this.BoostXpEarned = BoostXpEarned;
            this.CausedEarlySurrender = CausedEarlySurrender;
            this.ChampionId = ChampionId;
            this.CoOpVsAiMinutesLeftToday = CoOpVsAiMinutesLeftToday;
            this.CoOpVsAiMsecsUntilReset = CoOpVsAiMsecsUntilReset;
            this.CompletionBonusPoints = CompletionBonusPoints;
            this.CurrentLevel = CurrentLevel;
            this.CustomMinutesLeftToday = CustomMinutesLeftToday;
            this.CustomMsecsUntilReset = CustomMsecsUntilReset;
            this.Difficulty = Difficulty;
            this.EarlySurrenderAccomplice = EarlySurrenderAccomplice;
            this.Elo = Elo;
            this.EloChange = EloChange;
            this.ExperienceEarned = ExperienceEarned;
            this.ExperienceTotal = ExperienceTotal;
            this.FirstWinBonus = FirstWinBonus;
            this.GameEndedInEarlySurrender = GameEndedInEarlySurrender;
            this.GameId = GameId;
            this.GameLength = GameLength;
            this.GameMode = GameMode;
            this.GameMutators = GameMutators;
            this.GameType = GameType;
            this.GlobalBoostXpEarned = GlobalBoostXpEarned;
            this.ImbalancedTeamsNoPoints = ImbalancedTeamsNoPoints;
            this.Invalid = Invalid;
            this.IpEarned = IpEarned;
            this.IpTotal = IpTotal;
            this.LeveledUp = LeveledUp;
            this.LoyaltyBoostIpEarned = LoyaltyBoostIpEarned;
            this.LoyaltyBoostXpEarned = LoyaltyBoostXpEarned;
            this.MissionsXpEarned = MissionsXpEarned;
            this.MyTeamStatus = MyTeamStatus;
            this.NewSpells = NewSpells;
            this.NextLevelXp = NextLevelXp;
            this.OdinBonusIp = OdinBonusIp;
            this.PartyRewardsBonusIpEarned = PartyRewardsBonusIpEarned;
            this.PointsPenalties = PointsPenalties;
            this.PreviousLevel = PreviousLevel;
            this.PreviousXpTotal = PreviousXpTotal;
            this.QueueBonusEarned = QueueBonusEarned;
            this.QueueType = QueueType;
            this.Ranked = Ranked;
            this.ReportGameId = ReportGameId;
            this.RerollData = RerollData;
            this.RoomName = RoomName;
            this.RoomPassword = RoomPassword;
            this.RpEarned = RpEarned;
            this.SendStatsToTournamentProvider = SendStatsToTournamentProvider;
            this.SkinId = SkinId;
            this.SkinIndex = SkinIndex;
            this.SummonerId = SummonerId;
            this.SummonerName = SummonerName;
            this.TalentPointsGained = TalentPointsGained;
            this.TeamBoost = TeamBoost;
            this.TeamEarlySurrendered = TeamEarlySurrendered;
            this.Teams = Teams;
            this.TimeUntilNextFirstWinBonus = TimeUntilNextFirstWinBonus;
            this.UserId = UserId;
        }
        
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public long? AccountId { get; set; }

        /// <summary>
        /// Gets or Sets BasePoints
        /// </summary>
        [DataMember(Name="basePoints", EmitDefaultValue=false)]
        public int? BasePoints { get; set; }

        /// <summary>
        /// Gets or Sets BattleBoostIpEarned
        /// </summary>
        [DataMember(Name="battleBoostIpEarned", EmitDefaultValue=false)]
        public int? BattleBoostIpEarned { get; set; }

        /// <summary>
        /// Gets or Sets BoostIpEarned
        /// </summary>
        [DataMember(Name="boostIpEarned", EmitDefaultValue=false)]
        public int? BoostIpEarned { get; set; }

        /// <summary>
        /// Gets or Sets BoostXpEarned
        /// </summary>
        [DataMember(Name="boostXpEarned", EmitDefaultValue=false)]
        public int? BoostXpEarned { get; set; }

        /// <summary>
        /// Gets or Sets CausedEarlySurrender
        /// </summary>
        [DataMember(Name="causedEarlySurrender", EmitDefaultValue=false)]
        public bool? CausedEarlySurrender { get; set; }

        /// <summary>
        /// Gets or Sets ChampionId
        /// </summary>
        [DataMember(Name="championId", EmitDefaultValue=false)]
        public int? ChampionId { get; set; }

        /// <summary>
        /// Gets or Sets CoOpVsAiMinutesLeftToday
        /// </summary>
        [DataMember(Name="coOpVsAiMinutesLeftToday", EmitDefaultValue=false)]
        public int? CoOpVsAiMinutesLeftToday { get; set; }

        /// <summary>
        /// Gets or Sets CoOpVsAiMsecsUntilReset
        /// </summary>
        [DataMember(Name="coOpVsAiMsecsUntilReset", EmitDefaultValue=false)]
        public int? CoOpVsAiMsecsUntilReset { get; set; }

        /// <summary>
        /// Gets or Sets CompletionBonusPoints
        /// </summary>
        [DataMember(Name="completionBonusPoints", EmitDefaultValue=false)]
        public int? CompletionBonusPoints { get; set; }

        /// <summary>
        /// Gets or Sets CurrentLevel
        /// </summary>
        [DataMember(Name="currentLevel", EmitDefaultValue=false)]
        public long? CurrentLevel { get; set; }

        /// <summary>
        /// Gets or Sets CustomMinutesLeftToday
        /// </summary>
        [DataMember(Name="customMinutesLeftToday", EmitDefaultValue=false)]
        public int? CustomMinutesLeftToday { get; set; }

        /// <summary>
        /// Gets or Sets CustomMsecsUntilReset
        /// </summary>
        [DataMember(Name="customMsecsUntilReset", EmitDefaultValue=false)]
        public int? CustomMsecsUntilReset { get; set; }

        /// <summary>
        /// Gets or Sets Difficulty
        /// </summary>
        [DataMember(Name="difficulty", EmitDefaultValue=false)]
        public string Difficulty { get; set; }

        /// <summary>
        /// Gets or Sets EarlySurrenderAccomplice
        /// </summary>
        [DataMember(Name="earlySurrenderAccomplice", EmitDefaultValue=false)]
        public bool? EarlySurrenderAccomplice { get; set; }

        /// <summary>
        /// Gets or Sets Elo
        /// </summary>
        [DataMember(Name="elo", EmitDefaultValue=false)]
        public int? Elo { get; set; }

        /// <summary>
        /// Gets or Sets EloChange
        /// </summary>
        [DataMember(Name="eloChange", EmitDefaultValue=false)]
        public int? EloChange { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceEarned
        /// </summary>
        [DataMember(Name="experienceEarned", EmitDefaultValue=false)]
        public int? ExperienceEarned { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceTotal
        /// </summary>
        [DataMember(Name="experienceTotal", EmitDefaultValue=false)]
        public int? ExperienceTotal { get; set; }

        /// <summary>
        /// Gets or Sets FirstWinBonus
        /// </summary>
        [DataMember(Name="firstWinBonus", EmitDefaultValue=false)]
        public int? FirstWinBonus { get; set; }

        /// <summary>
        /// Gets or Sets GameEndedInEarlySurrender
        /// </summary>
        [DataMember(Name="gameEndedInEarlySurrender", EmitDefaultValue=false)]
        public bool? GameEndedInEarlySurrender { get; set; }

        /// <summary>
        /// Gets or Sets GameId
        /// </summary>
        [DataMember(Name="gameId", EmitDefaultValue=false)]
        public long? GameId { get; set; }

        /// <summary>
        /// Gets or Sets GameLength
        /// </summary>
        [DataMember(Name="gameLength", EmitDefaultValue=false)]
        public int? GameLength { get; set; }

        /// <summary>
        /// Gets or Sets GameMode
        /// </summary>
        [DataMember(Name="gameMode", EmitDefaultValue=false)]
        public string GameMode { get; set; }

        /// <summary>
        /// Gets or Sets GameMutators
        /// </summary>
        [DataMember(Name="gameMutators", EmitDefaultValue=false)]
        public List<string> GameMutators { get; set; }

        /// <summary>
        /// Gets or Sets GameType
        /// </summary>
        [DataMember(Name="gameType", EmitDefaultValue=false)]
        public string GameType { get; set; }

        /// <summary>
        /// Gets or Sets GlobalBoostXpEarned
        /// </summary>
        [DataMember(Name="globalBoostXpEarned", EmitDefaultValue=false)]
        public int? GlobalBoostXpEarned { get; set; }

        /// <summary>
        /// Gets or Sets ImbalancedTeamsNoPoints
        /// </summary>
        [DataMember(Name="imbalancedTeamsNoPoints", EmitDefaultValue=false)]
        public bool? ImbalancedTeamsNoPoints { get; set; }

        /// <summary>
        /// Gets or Sets Invalid
        /// </summary>
        [DataMember(Name="invalid", EmitDefaultValue=false)]
        public bool? Invalid { get; set; }

        /// <summary>
        /// Gets or Sets IpEarned
        /// </summary>
        [DataMember(Name="ipEarned", EmitDefaultValue=false)]
        public int? IpEarned { get; set; }

        /// <summary>
        /// Gets or Sets IpTotal
        /// </summary>
        [DataMember(Name="ipTotal", EmitDefaultValue=false)]
        public int? IpTotal { get; set; }

        /// <summary>
        /// Gets or Sets LeveledUp
        /// </summary>
        [DataMember(Name="leveledUp", EmitDefaultValue=false)]
        public bool? LeveledUp { get; set; }

        /// <summary>
        /// Gets or Sets LoyaltyBoostIpEarned
        /// </summary>
        [DataMember(Name="loyaltyBoostIpEarned", EmitDefaultValue=false)]
        public int? LoyaltyBoostIpEarned { get; set; }

        /// <summary>
        /// Gets or Sets LoyaltyBoostXpEarned
        /// </summary>
        [DataMember(Name="loyaltyBoostXpEarned", EmitDefaultValue=false)]
        public int? LoyaltyBoostXpEarned { get; set; }

        /// <summary>
        /// Gets or Sets MissionsXpEarned
        /// </summary>
        [DataMember(Name="missionsXpEarned", EmitDefaultValue=false)]
        public int? MissionsXpEarned { get; set; }

        /// <summary>
        /// Gets or Sets MyTeamStatus
        /// </summary>
        [DataMember(Name="myTeamStatus", EmitDefaultValue=false)]
        public string MyTeamStatus { get; set; }

        /// <summary>
        /// Gets or Sets NewSpells
        /// </summary>
        [DataMember(Name="newSpells", EmitDefaultValue=false)]
        public List<int?> NewSpells { get; set; }

        /// <summary>
        /// Gets or Sets NextLevelXp
        /// </summary>
        [DataMember(Name="nextLevelXp", EmitDefaultValue=false)]
        public long? NextLevelXp { get; set; }

        /// <summary>
        /// Gets or Sets OdinBonusIp
        /// </summary>
        [DataMember(Name="odinBonusIp", EmitDefaultValue=false)]
        public int? OdinBonusIp { get; set; }

        /// <summary>
        /// Gets or Sets PartyRewardsBonusIpEarned
        /// </summary>
        [DataMember(Name="partyRewardsBonusIpEarned", EmitDefaultValue=false)]
        public int? PartyRewardsBonusIpEarned { get; set; }

        /// <summary>
        /// Gets or Sets PointsPenalties
        /// </summary>
        [DataMember(Name="pointsPenalties", EmitDefaultValue=false)]
        public Object PointsPenalties { get; set; }

        /// <summary>
        /// Gets or Sets PreviousLevel
        /// </summary>
        [DataMember(Name="previousLevel", EmitDefaultValue=false)]
        public long? PreviousLevel { get; set; }

        /// <summary>
        /// Gets or Sets PreviousXpTotal
        /// </summary>
        [DataMember(Name="previousXpTotal", EmitDefaultValue=false)]
        public long? PreviousXpTotal { get; set; }

        /// <summary>
        /// Gets or Sets QueueBonusEarned
        /// </summary>
        [DataMember(Name="queueBonusEarned", EmitDefaultValue=false)]
        public int? QueueBonusEarned { get; set; }

        /// <summary>
        /// Gets or Sets QueueType
        /// </summary>
        [DataMember(Name="queueType", EmitDefaultValue=false)]
        public string QueueType { get; set; }

        /// <summary>
        /// Gets or Sets Ranked
        /// </summary>
        [DataMember(Name="ranked", EmitDefaultValue=false)]
        public bool? Ranked { get; set; }

        /// <summary>
        /// Gets or Sets ReportGameId
        /// </summary>
        [DataMember(Name="reportGameId", EmitDefaultValue=false)]
        public long? ReportGameId { get; set; }

        /// <summary>
        /// Gets or Sets RerollData
        /// </summary>
        [DataMember(Name="rerollData", EmitDefaultValue=false)]
        public LolEndOfGameEndOfGamePoints RerollData { get; set; }

        /// <summary>
        /// Gets or Sets RoomName
        /// </summary>
        [DataMember(Name="roomName", EmitDefaultValue=false)]
        public string RoomName { get; set; }

        /// <summary>
        /// Gets or Sets RoomPassword
        /// </summary>
        [DataMember(Name="roomPassword", EmitDefaultValue=false)]
        public string RoomPassword { get; set; }

        /// <summary>
        /// Gets or Sets RpEarned
        /// </summary>
        [DataMember(Name="rpEarned", EmitDefaultValue=false)]
        public int? RpEarned { get; set; }

        /// <summary>
        /// Gets or Sets SendStatsToTournamentProvider
        /// </summary>
        [DataMember(Name="sendStatsToTournamentProvider", EmitDefaultValue=false)]
        public bool? SendStatsToTournamentProvider { get; set; }

        /// <summary>
        /// Gets or Sets SkinId
        /// </summary>
        [DataMember(Name="skinId", EmitDefaultValue=false)]
        public int? SkinId { get; set; }

        /// <summary>
        /// Gets or Sets SkinIndex
        /// </summary>
        [DataMember(Name="skinIndex", EmitDefaultValue=false)]
        public int? SkinIndex { get; set; }

        /// <summary>
        /// Gets or Sets SummonerId
        /// </summary>
        [DataMember(Name="summonerId", EmitDefaultValue=false)]
        public long? SummonerId { get; set; }

        /// <summary>
        /// Gets or Sets SummonerName
        /// </summary>
        [DataMember(Name="summonerName", EmitDefaultValue=false)]
        public string SummonerName { get; set; }

        /// <summary>
        /// Gets or Sets TalentPointsGained
        /// </summary>
        [DataMember(Name="talentPointsGained", EmitDefaultValue=false)]
        public int? TalentPointsGained { get; set; }

        /// <summary>
        /// Gets or Sets TeamBoost
        /// </summary>
        [DataMember(Name="teamBoost", EmitDefaultValue=false)]
        public LolEndOfGameEndOfGameTeamBoost TeamBoost { get; set; }

        /// <summary>
        /// Gets or Sets TeamEarlySurrendered
        /// </summary>
        [DataMember(Name="teamEarlySurrendered", EmitDefaultValue=false)]
        public bool? TeamEarlySurrendered { get; set; }

        /// <summary>
        /// Gets or Sets Teams
        /// </summary>
        [DataMember(Name="teams", EmitDefaultValue=false)]
        public List<LolEndOfGameEndOfGameTeam> Teams { get; set; }

        /// <summary>
        /// Gets or Sets TimeUntilNextFirstWinBonus
        /// </summary>
        [DataMember(Name="timeUntilNextFirstWinBonus", EmitDefaultValue=false)]
        public int? TimeUntilNextFirstWinBonus { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public long? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolEndOfGameEndOfGameStats {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  BasePoints: ").Append(BasePoints).Append("\n");
            sb.Append("  BattleBoostIpEarned: ").Append(BattleBoostIpEarned).Append("\n");
            sb.Append("  BoostIpEarned: ").Append(BoostIpEarned).Append("\n");
            sb.Append("  BoostXpEarned: ").Append(BoostXpEarned).Append("\n");
            sb.Append("  CausedEarlySurrender: ").Append(CausedEarlySurrender).Append("\n");
            sb.Append("  ChampionId: ").Append(ChampionId).Append("\n");
            sb.Append("  CoOpVsAiMinutesLeftToday: ").Append(CoOpVsAiMinutesLeftToday).Append("\n");
            sb.Append("  CoOpVsAiMsecsUntilReset: ").Append(CoOpVsAiMsecsUntilReset).Append("\n");
            sb.Append("  CompletionBonusPoints: ").Append(CompletionBonusPoints).Append("\n");
            sb.Append("  CurrentLevel: ").Append(CurrentLevel).Append("\n");
            sb.Append("  CustomMinutesLeftToday: ").Append(CustomMinutesLeftToday).Append("\n");
            sb.Append("  CustomMsecsUntilReset: ").Append(CustomMsecsUntilReset).Append("\n");
            sb.Append("  Difficulty: ").Append(Difficulty).Append("\n");
            sb.Append("  EarlySurrenderAccomplice: ").Append(EarlySurrenderAccomplice).Append("\n");
            sb.Append("  Elo: ").Append(Elo).Append("\n");
            sb.Append("  EloChange: ").Append(EloChange).Append("\n");
            sb.Append("  ExperienceEarned: ").Append(ExperienceEarned).Append("\n");
            sb.Append("  ExperienceTotal: ").Append(ExperienceTotal).Append("\n");
            sb.Append("  FirstWinBonus: ").Append(FirstWinBonus).Append("\n");
            sb.Append("  GameEndedInEarlySurrender: ").Append(GameEndedInEarlySurrender).Append("\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  GameLength: ").Append(GameLength).Append("\n");
            sb.Append("  GameMode: ").Append(GameMode).Append("\n");
            sb.Append("  GameMutators: ").Append(GameMutators).Append("\n");
            sb.Append("  GameType: ").Append(GameType).Append("\n");
            sb.Append("  GlobalBoostXpEarned: ").Append(GlobalBoostXpEarned).Append("\n");
            sb.Append("  ImbalancedTeamsNoPoints: ").Append(ImbalancedTeamsNoPoints).Append("\n");
            sb.Append("  Invalid: ").Append(Invalid).Append("\n");
            sb.Append("  IpEarned: ").Append(IpEarned).Append("\n");
            sb.Append("  IpTotal: ").Append(IpTotal).Append("\n");
            sb.Append("  LeveledUp: ").Append(LeveledUp).Append("\n");
            sb.Append("  LoyaltyBoostIpEarned: ").Append(LoyaltyBoostIpEarned).Append("\n");
            sb.Append("  LoyaltyBoostXpEarned: ").Append(LoyaltyBoostXpEarned).Append("\n");
            sb.Append("  MissionsXpEarned: ").Append(MissionsXpEarned).Append("\n");
            sb.Append("  MyTeamStatus: ").Append(MyTeamStatus).Append("\n");
            sb.Append("  NewSpells: ").Append(NewSpells).Append("\n");
            sb.Append("  NextLevelXp: ").Append(NextLevelXp).Append("\n");
            sb.Append("  OdinBonusIp: ").Append(OdinBonusIp).Append("\n");
            sb.Append("  PartyRewardsBonusIpEarned: ").Append(PartyRewardsBonusIpEarned).Append("\n");
            sb.Append("  PointsPenalties: ").Append(PointsPenalties).Append("\n");
            sb.Append("  PreviousLevel: ").Append(PreviousLevel).Append("\n");
            sb.Append("  PreviousXpTotal: ").Append(PreviousXpTotal).Append("\n");
            sb.Append("  QueueBonusEarned: ").Append(QueueBonusEarned).Append("\n");
            sb.Append("  QueueType: ").Append(QueueType).Append("\n");
            sb.Append("  Ranked: ").Append(Ranked).Append("\n");
            sb.Append("  ReportGameId: ").Append(ReportGameId).Append("\n");
            sb.Append("  RerollData: ").Append(RerollData).Append("\n");
            sb.Append("  RoomName: ").Append(RoomName).Append("\n");
            sb.Append("  RoomPassword: ").Append(RoomPassword).Append("\n");
            sb.Append("  RpEarned: ").Append(RpEarned).Append("\n");
            sb.Append("  SendStatsToTournamentProvider: ").Append(SendStatsToTournamentProvider).Append("\n");
            sb.Append("  SkinId: ").Append(SkinId).Append("\n");
            sb.Append("  SkinIndex: ").Append(SkinIndex).Append("\n");
            sb.Append("  SummonerId: ").Append(SummonerId).Append("\n");
            sb.Append("  SummonerName: ").Append(SummonerName).Append("\n");
            sb.Append("  TalentPointsGained: ").Append(TalentPointsGained).Append("\n");
            sb.Append("  TeamBoost: ").Append(TeamBoost).Append("\n");
            sb.Append("  TeamEarlySurrendered: ").Append(TeamEarlySurrendered).Append("\n");
            sb.Append("  Teams: ").Append(Teams).Append("\n");
            sb.Append("  TimeUntilNextFirstWinBonus: ").Append(TimeUntilNextFirstWinBonus).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolEndOfGameEndOfGameStats);
        }

        /// <summary>
        /// Returns true if LolEndOfGameEndOfGameStats instances are equal
        /// </summary>
        /// <param name="other">Instance of LolEndOfGameEndOfGameStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolEndOfGameEndOfGameStats other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.BasePoints == other.BasePoints ||
                    this.BasePoints != null &&
                    this.BasePoints.Equals(other.BasePoints)
                ) && 
                (
                    this.BattleBoostIpEarned == other.BattleBoostIpEarned ||
                    this.BattleBoostIpEarned != null &&
                    this.BattleBoostIpEarned.Equals(other.BattleBoostIpEarned)
                ) && 
                (
                    this.BoostIpEarned == other.BoostIpEarned ||
                    this.BoostIpEarned != null &&
                    this.BoostIpEarned.Equals(other.BoostIpEarned)
                ) && 
                (
                    this.BoostXpEarned == other.BoostXpEarned ||
                    this.BoostXpEarned != null &&
                    this.BoostXpEarned.Equals(other.BoostXpEarned)
                ) && 
                (
                    this.CausedEarlySurrender == other.CausedEarlySurrender ||
                    this.CausedEarlySurrender != null &&
                    this.CausedEarlySurrender.Equals(other.CausedEarlySurrender)
                ) && 
                (
                    this.ChampionId == other.ChampionId ||
                    this.ChampionId != null &&
                    this.ChampionId.Equals(other.ChampionId)
                ) && 
                (
                    this.CoOpVsAiMinutesLeftToday == other.CoOpVsAiMinutesLeftToday ||
                    this.CoOpVsAiMinutesLeftToday != null &&
                    this.CoOpVsAiMinutesLeftToday.Equals(other.CoOpVsAiMinutesLeftToday)
                ) && 
                (
                    this.CoOpVsAiMsecsUntilReset == other.CoOpVsAiMsecsUntilReset ||
                    this.CoOpVsAiMsecsUntilReset != null &&
                    this.CoOpVsAiMsecsUntilReset.Equals(other.CoOpVsAiMsecsUntilReset)
                ) && 
                (
                    this.CompletionBonusPoints == other.CompletionBonusPoints ||
                    this.CompletionBonusPoints != null &&
                    this.CompletionBonusPoints.Equals(other.CompletionBonusPoints)
                ) && 
                (
                    this.CurrentLevel == other.CurrentLevel ||
                    this.CurrentLevel != null &&
                    this.CurrentLevel.Equals(other.CurrentLevel)
                ) && 
                (
                    this.CustomMinutesLeftToday == other.CustomMinutesLeftToday ||
                    this.CustomMinutesLeftToday != null &&
                    this.CustomMinutesLeftToday.Equals(other.CustomMinutesLeftToday)
                ) && 
                (
                    this.CustomMsecsUntilReset == other.CustomMsecsUntilReset ||
                    this.CustomMsecsUntilReset != null &&
                    this.CustomMsecsUntilReset.Equals(other.CustomMsecsUntilReset)
                ) && 
                (
                    this.Difficulty == other.Difficulty ||
                    this.Difficulty != null &&
                    this.Difficulty.Equals(other.Difficulty)
                ) && 
                (
                    this.EarlySurrenderAccomplice == other.EarlySurrenderAccomplice ||
                    this.EarlySurrenderAccomplice != null &&
                    this.EarlySurrenderAccomplice.Equals(other.EarlySurrenderAccomplice)
                ) && 
                (
                    this.Elo == other.Elo ||
                    this.Elo != null &&
                    this.Elo.Equals(other.Elo)
                ) && 
                (
                    this.EloChange == other.EloChange ||
                    this.EloChange != null &&
                    this.EloChange.Equals(other.EloChange)
                ) && 
                (
                    this.ExperienceEarned == other.ExperienceEarned ||
                    this.ExperienceEarned != null &&
                    this.ExperienceEarned.Equals(other.ExperienceEarned)
                ) && 
                (
                    this.ExperienceTotal == other.ExperienceTotal ||
                    this.ExperienceTotal != null &&
                    this.ExperienceTotal.Equals(other.ExperienceTotal)
                ) && 
                (
                    this.FirstWinBonus == other.FirstWinBonus ||
                    this.FirstWinBonus != null &&
                    this.FirstWinBonus.Equals(other.FirstWinBonus)
                ) && 
                (
                    this.GameEndedInEarlySurrender == other.GameEndedInEarlySurrender ||
                    this.GameEndedInEarlySurrender != null &&
                    this.GameEndedInEarlySurrender.Equals(other.GameEndedInEarlySurrender)
                ) && 
                (
                    this.GameId == other.GameId ||
                    this.GameId != null &&
                    this.GameId.Equals(other.GameId)
                ) && 
                (
                    this.GameLength == other.GameLength ||
                    this.GameLength != null &&
                    this.GameLength.Equals(other.GameLength)
                ) && 
                (
                    this.GameMode == other.GameMode ||
                    this.GameMode != null &&
                    this.GameMode.Equals(other.GameMode)
                ) && 
                (
                    this.GameMutators == other.GameMutators ||
                    this.GameMutators != null &&
                    this.GameMutators.SequenceEqual(other.GameMutators)
                ) && 
                (
                    this.GameType == other.GameType ||
                    this.GameType != null &&
                    this.GameType.Equals(other.GameType)
                ) && 
                (
                    this.GlobalBoostXpEarned == other.GlobalBoostXpEarned ||
                    this.GlobalBoostXpEarned != null &&
                    this.GlobalBoostXpEarned.Equals(other.GlobalBoostXpEarned)
                ) && 
                (
                    this.ImbalancedTeamsNoPoints == other.ImbalancedTeamsNoPoints ||
                    this.ImbalancedTeamsNoPoints != null &&
                    this.ImbalancedTeamsNoPoints.Equals(other.ImbalancedTeamsNoPoints)
                ) && 
                (
                    this.Invalid == other.Invalid ||
                    this.Invalid != null &&
                    this.Invalid.Equals(other.Invalid)
                ) && 
                (
                    this.IpEarned == other.IpEarned ||
                    this.IpEarned != null &&
                    this.IpEarned.Equals(other.IpEarned)
                ) && 
                (
                    this.IpTotal == other.IpTotal ||
                    this.IpTotal != null &&
                    this.IpTotal.Equals(other.IpTotal)
                ) && 
                (
                    this.LeveledUp == other.LeveledUp ||
                    this.LeveledUp != null &&
                    this.LeveledUp.Equals(other.LeveledUp)
                ) && 
                (
                    this.LoyaltyBoostIpEarned == other.LoyaltyBoostIpEarned ||
                    this.LoyaltyBoostIpEarned != null &&
                    this.LoyaltyBoostIpEarned.Equals(other.LoyaltyBoostIpEarned)
                ) && 
                (
                    this.LoyaltyBoostXpEarned == other.LoyaltyBoostXpEarned ||
                    this.LoyaltyBoostXpEarned != null &&
                    this.LoyaltyBoostXpEarned.Equals(other.LoyaltyBoostXpEarned)
                ) && 
                (
                    this.MissionsXpEarned == other.MissionsXpEarned ||
                    this.MissionsXpEarned != null &&
                    this.MissionsXpEarned.Equals(other.MissionsXpEarned)
                ) && 
                (
                    this.MyTeamStatus == other.MyTeamStatus ||
                    this.MyTeamStatus != null &&
                    this.MyTeamStatus.Equals(other.MyTeamStatus)
                ) && 
                (
                    this.NewSpells == other.NewSpells ||
                    this.NewSpells != null &&
                    this.NewSpells.SequenceEqual(other.NewSpells)
                ) && 
                (
                    this.NextLevelXp == other.NextLevelXp ||
                    this.NextLevelXp != null &&
                    this.NextLevelXp.Equals(other.NextLevelXp)
                ) && 
                (
                    this.OdinBonusIp == other.OdinBonusIp ||
                    this.OdinBonusIp != null &&
                    this.OdinBonusIp.Equals(other.OdinBonusIp)
                ) && 
                (
                    this.PartyRewardsBonusIpEarned == other.PartyRewardsBonusIpEarned ||
                    this.PartyRewardsBonusIpEarned != null &&
                    this.PartyRewardsBonusIpEarned.Equals(other.PartyRewardsBonusIpEarned)
                ) && 
                (
                    this.PointsPenalties == other.PointsPenalties ||
                    this.PointsPenalties != null &&
                    this.PointsPenalties.Equals(other.PointsPenalties)
                ) && 
                (
                    this.PreviousLevel == other.PreviousLevel ||
                    this.PreviousLevel != null &&
                    this.PreviousLevel.Equals(other.PreviousLevel)
                ) && 
                (
                    this.PreviousXpTotal == other.PreviousXpTotal ||
                    this.PreviousXpTotal != null &&
                    this.PreviousXpTotal.Equals(other.PreviousXpTotal)
                ) && 
                (
                    this.QueueBonusEarned == other.QueueBonusEarned ||
                    this.QueueBonusEarned != null &&
                    this.QueueBonusEarned.Equals(other.QueueBonusEarned)
                ) && 
                (
                    this.QueueType == other.QueueType ||
                    this.QueueType != null &&
                    this.QueueType.Equals(other.QueueType)
                ) && 
                (
                    this.Ranked == other.Ranked ||
                    this.Ranked != null &&
                    this.Ranked.Equals(other.Ranked)
                ) && 
                (
                    this.ReportGameId == other.ReportGameId ||
                    this.ReportGameId != null &&
                    this.ReportGameId.Equals(other.ReportGameId)
                ) && 
                (
                    this.RerollData == other.RerollData ||
                    this.RerollData != null &&
                    this.RerollData.Equals(other.RerollData)
                ) && 
                (
                    this.RoomName == other.RoomName ||
                    this.RoomName != null &&
                    this.RoomName.Equals(other.RoomName)
                ) && 
                (
                    this.RoomPassword == other.RoomPassword ||
                    this.RoomPassword != null &&
                    this.RoomPassword.Equals(other.RoomPassword)
                ) && 
                (
                    this.RpEarned == other.RpEarned ||
                    this.RpEarned != null &&
                    this.RpEarned.Equals(other.RpEarned)
                ) && 
                (
                    this.SendStatsToTournamentProvider == other.SendStatsToTournamentProvider ||
                    this.SendStatsToTournamentProvider != null &&
                    this.SendStatsToTournamentProvider.Equals(other.SendStatsToTournamentProvider)
                ) && 
                (
                    this.SkinId == other.SkinId ||
                    this.SkinId != null &&
                    this.SkinId.Equals(other.SkinId)
                ) && 
                (
                    this.SkinIndex == other.SkinIndex ||
                    this.SkinIndex != null &&
                    this.SkinIndex.Equals(other.SkinIndex)
                ) && 
                (
                    this.SummonerId == other.SummonerId ||
                    this.SummonerId != null &&
                    this.SummonerId.Equals(other.SummonerId)
                ) && 
                (
                    this.SummonerName == other.SummonerName ||
                    this.SummonerName != null &&
                    this.SummonerName.Equals(other.SummonerName)
                ) && 
                (
                    this.TalentPointsGained == other.TalentPointsGained ||
                    this.TalentPointsGained != null &&
                    this.TalentPointsGained.Equals(other.TalentPointsGained)
                ) && 
                (
                    this.TeamBoost == other.TeamBoost ||
                    this.TeamBoost != null &&
                    this.TeamBoost.Equals(other.TeamBoost)
                ) && 
                (
                    this.TeamEarlySurrendered == other.TeamEarlySurrendered ||
                    this.TeamEarlySurrendered != null &&
                    this.TeamEarlySurrendered.Equals(other.TeamEarlySurrendered)
                ) && 
                (
                    this.Teams == other.Teams ||
                    this.Teams != null &&
                    this.Teams.SequenceEqual(other.Teams)
                ) && 
                (
                    this.TimeUntilNextFirstWinBonus == other.TimeUntilNextFirstWinBonus ||
                    this.TimeUntilNextFirstWinBonus != null &&
                    this.TimeUntilNextFirstWinBonus.Equals(other.TimeUntilNextFirstWinBonus)
                ) && 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.BasePoints != null)
                    hash = hash * 59 + this.BasePoints.GetHashCode();
                if (this.BattleBoostIpEarned != null)
                    hash = hash * 59 + this.BattleBoostIpEarned.GetHashCode();
                if (this.BoostIpEarned != null)
                    hash = hash * 59 + this.BoostIpEarned.GetHashCode();
                if (this.BoostXpEarned != null)
                    hash = hash * 59 + this.BoostXpEarned.GetHashCode();
                if (this.CausedEarlySurrender != null)
                    hash = hash * 59 + this.CausedEarlySurrender.GetHashCode();
                if (this.ChampionId != null)
                    hash = hash * 59 + this.ChampionId.GetHashCode();
                if (this.CoOpVsAiMinutesLeftToday != null)
                    hash = hash * 59 + this.CoOpVsAiMinutesLeftToday.GetHashCode();
                if (this.CoOpVsAiMsecsUntilReset != null)
                    hash = hash * 59 + this.CoOpVsAiMsecsUntilReset.GetHashCode();
                if (this.CompletionBonusPoints != null)
                    hash = hash * 59 + this.CompletionBonusPoints.GetHashCode();
                if (this.CurrentLevel != null)
                    hash = hash * 59 + this.CurrentLevel.GetHashCode();
                if (this.CustomMinutesLeftToday != null)
                    hash = hash * 59 + this.CustomMinutesLeftToday.GetHashCode();
                if (this.CustomMsecsUntilReset != null)
                    hash = hash * 59 + this.CustomMsecsUntilReset.GetHashCode();
                if (this.Difficulty != null)
                    hash = hash * 59 + this.Difficulty.GetHashCode();
                if (this.EarlySurrenderAccomplice != null)
                    hash = hash * 59 + this.EarlySurrenderAccomplice.GetHashCode();
                if (this.Elo != null)
                    hash = hash * 59 + this.Elo.GetHashCode();
                if (this.EloChange != null)
                    hash = hash * 59 + this.EloChange.GetHashCode();
                if (this.ExperienceEarned != null)
                    hash = hash * 59 + this.ExperienceEarned.GetHashCode();
                if (this.ExperienceTotal != null)
                    hash = hash * 59 + this.ExperienceTotal.GetHashCode();
                if (this.FirstWinBonus != null)
                    hash = hash * 59 + this.FirstWinBonus.GetHashCode();
                if (this.GameEndedInEarlySurrender != null)
                    hash = hash * 59 + this.GameEndedInEarlySurrender.GetHashCode();
                if (this.GameId != null)
                    hash = hash * 59 + this.GameId.GetHashCode();
                if (this.GameLength != null)
                    hash = hash * 59 + this.GameLength.GetHashCode();
                if (this.GameMode != null)
                    hash = hash * 59 + this.GameMode.GetHashCode();
                if (this.GameMutators != null)
                    hash = hash * 59 + this.GameMutators.GetHashCode();
                if (this.GameType != null)
                    hash = hash * 59 + this.GameType.GetHashCode();
                if (this.GlobalBoostXpEarned != null)
                    hash = hash * 59 + this.GlobalBoostXpEarned.GetHashCode();
                if (this.ImbalancedTeamsNoPoints != null)
                    hash = hash * 59 + this.ImbalancedTeamsNoPoints.GetHashCode();
                if (this.Invalid != null)
                    hash = hash * 59 + this.Invalid.GetHashCode();
                if (this.IpEarned != null)
                    hash = hash * 59 + this.IpEarned.GetHashCode();
                if (this.IpTotal != null)
                    hash = hash * 59 + this.IpTotal.GetHashCode();
                if (this.LeveledUp != null)
                    hash = hash * 59 + this.LeveledUp.GetHashCode();
                if (this.LoyaltyBoostIpEarned != null)
                    hash = hash * 59 + this.LoyaltyBoostIpEarned.GetHashCode();
                if (this.LoyaltyBoostXpEarned != null)
                    hash = hash * 59 + this.LoyaltyBoostXpEarned.GetHashCode();
                if (this.MissionsXpEarned != null)
                    hash = hash * 59 + this.MissionsXpEarned.GetHashCode();
                if (this.MyTeamStatus != null)
                    hash = hash * 59 + this.MyTeamStatus.GetHashCode();
                if (this.NewSpells != null)
                    hash = hash * 59 + this.NewSpells.GetHashCode();
                if (this.NextLevelXp != null)
                    hash = hash * 59 + this.NextLevelXp.GetHashCode();
                if (this.OdinBonusIp != null)
                    hash = hash * 59 + this.OdinBonusIp.GetHashCode();
                if (this.PartyRewardsBonusIpEarned != null)
                    hash = hash * 59 + this.PartyRewardsBonusIpEarned.GetHashCode();
                if (this.PointsPenalties != null)
                    hash = hash * 59 + this.PointsPenalties.GetHashCode();
                if (this.PreviousLevel != null)
                    hash = hash * 59 + this.PreviousLevel.GetHashCode();
                if (this.PreviousXpTotal != null)
                    hash = hash * 59 + this.PreviousXpTotal.GetHashCode();
                if (this.QueueBonusEarned != null)
                    hash = hash * 59 + this.QueueBonusEarned.GetHashCode();
                if (this.QueueType != null)
                    hash = hash * 59 + this.QueueType.GetHashCode();
                if (this.Ranked != null)
                    hash = hash * 59 + this.Ranked.GetHashCode();
                if (this.ReportGameId != null)
                    hash = hash * 59 + this.ReportGameId.GetHashCode();
                if (this.RerollData != null)
                    hash = hash * 59 + this.RerollData.GetHashCode();
                if (this.RoomName != null)
                    hash = hash * 59 + this.RoomName.GetHashCode();
                if (this.RoomPassword != null)
                    hash = hash * 59 + this.RoomPassword.GetHashCode();
                if (this.RpEarned != null)
                    hash = hash * 59 + this.RpEarned.GetHashCode();
                if (this.SendStatsToTournamentProvider != null)
                    hash = hash * 59 + this.SendStatsToTournamentProvider.GetHashCode();
                if (this.SkinId != null)
                    hash = hash * 59 + this.SkinId.GetHashCode();
                if (this.SkinIndex != null)
                    hash = hash * 59 + this.SkinIndex.GetHashCode();
                if (this.SummonerId != null)
                    hash = hash * 59 + this.SummonerId.GetHashCode();
                if (this.SummonerName != null)
                    hash = hash * 59 + this.SummonerName.GetHashCode();
                if (this.TalentPointsGained != null)
                    hash = hash * 59 + this.TalentPointsGained.GetHashCode();
                if (this.TeamBoost != null)
                    hash = hash * 59 + this.TeamBoost.GetHashCode();
                if (this.TeamEarlySurrendered != null)
                    hash = hash * 59 + this.TeamEarlySurrendered.GetHashCode();
                if (this.Teams != null)
                    hash = hash * 59 + this.Teams.GetHashCode();
                if (this.TimeUntilNextFirstWinBonus != null)
                    hash = hash * 59 + this.TimeUntilNextFirstWinBonus.GetHashCode();
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
