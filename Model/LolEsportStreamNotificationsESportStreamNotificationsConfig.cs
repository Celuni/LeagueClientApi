/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolEsportStreamNotificationsESportStreamNotificationsConfig
    /// </summary>
    [DataContract]
    public partial class LolEsportStreamNotificationsESportStreamNotificationsConfig :  IEquatable<LolEsportStreamNotificationsESportStreamNotificationsConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolEsportStreamNotificationsESportStreamNotificationsConfig" /> class.
        /// </summary>
        /// <param name="BeappFailureLongPollMinutes">BeappFailureLongPollMinutes.</param>
        /// <param name="NotificationsAssetMagickURL">NotificationsAssetMagickURL.</param>
        /// <param name="NotificationsEnabled">NotificationsEnabled.</param>
        /// <param name="NotificationsLongPollMinutes">NotificationsLongPollMinutes.</param>
        /// <param name="NotificationsServiceEndpoint">NotificationsServiceEndpoint.</param>
        /// <param name="NotificationsServiceEndpointV2">NotificationsServiceEndpointV2.</param>
        /// <param name="NotificationsShortPollMinutes">NotificationsShortPollMinutes.</param>
        /// <param name="NotificationsStreamGroupSlug">NotificationsStreamGroupSlug.</param>
        /// <param name="NotificationsStreamURL">NotificationsStreamURL.</param>
        /// <param name="UseServiceEndpointV2">UseServiceEndpointV2.</param>
        public LolEsportStreamNotificationsESportStreamNotificationsConfig(long? BeappFailureLongPollMinutes = default(long?), string NotificationsAssetMagickURL = default(string), bool? NotificationsEnabled = default(bool?), long? NotificationsLongPollMinutes = default(long?), string NotificationsServiceEndpoint = default(string), string NotificationsServiceEndpointV2 = default(string), long? NotificationsShortPollMinutes = default(long?), string NotificationsStreamGroupSlug = default(string), string NotificationsStreamURL = default(string), bool? UseServiceEndpointV2 = default(bool?))
        {
            this.BeappFailureLongPollMinutes = BeappFailureLongPollMinutes;
            this.NotificationsAssetMagickURL = NotificationsAssetMagickURL;
            this.NotificationsEnabled = NotificationsEnabled;
            this.NotificationsLongPollMinutes = NotificationsLongPollMinutes;
            this.NotificationsServiceEndpoint = NotificationsServiceEndpoint;
            this.NotificationsServiceEndpointV2 = NotificationsServiceEndpointV2;
            this.NotificationsShortPollMinutes = NotificationsShortPollMinutes;
            this.NotificationsStreamGroupSlug = NotificationsStreamGroupSlug;
            this.NotificationsStreamURL = NotificationsStreamURL;
            this.UseServiceEndpointV2 = UseServiceEndpointV2;
        }
        
        /// <summary>
        /// Gets or Sets BeappFailureLongPollMinutes
        /// </summary>
        [DataMember(Name="beappFailureLongPollMinutes", EmitDefaultValue=false)]
        public long? BeappFailureLongPollMinutes { get; set; }

        /// <summary>
        /// Gets or Sets NotificationsAssetMagickURL
        /// </summary>
        [DataMember(Name="notificationsAssetMagickURL", EmitDefaultValue=false)]
        public string NotificationsAssetMagickURL { get; set; }

        /// <summary>
        /// Gets or Sets NotificationsEnabled
        /// </summary>
        [DataMember(Name="notificationsEnabled", EmitDefaultValue=false)]
        public bool? NotificationsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets NotificationsLongPollMinutes
        /// </summary>
        [DataMember(Name="notificationsLongPollMinutes", EmitDefaultValue=false)]
        public long? NotificationsLongPollMinutes { get; set; }

        /// <summary>
        /// Gets or Sets NotificationsServiceEndpoint
        /// </summary>
        [DataMember(Name="notificationsServiceEndpoint", EmitDefaultValue=false)]
        public string NotificationsServiceEndpoint { get; set; }

        /// <summary>
        /// Gets or Sets NotificationsServiceEndpointV2
        /// </summary>
        [DataMember(Name="notificationsServiceEndpointV2", EmitDefaultValue=false)]
        public string NotificationsServiceEndpointV2 { get; set; }

        /// <summary>
        /// Gets or Sets NotificationsShortPollMinutes
        /// </summary>
        [DataMember(Name="notificationsShortPollMinutes", EmitDefaultValue=false)]
        public long? NotificationsShortPollMinutes { get; set; }

        /// <summary>
        /// Gets or Sets NotificationsStreamGroupSlug
        /// </summary>
        [DataMember(Name="notificationsStreamGroupSlug", EmitDefaultValue=false)]
        public string NotificationsStreamGroupSlug { get; set; }

        /// <summary>
        /// Gets or Sets NotificationsStreamURL
        /// </summary>
        [DataMember(Name="notificationsStreamURL", EmitDefaultValue=false)]
        public string NotificationsStreamURL { get; set; }

        /// <summary>
        /// Gets or Sets UseServiceEndpointV2
        /// </summary>
        [DataMember(Name="useServiceEndpointV2", EmitDefaultValue=false)]
        public bool? UseServiceEndpointV2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolEsportStreamNotificationsESportStreamNotificationsConfig {\n");
            sb.Append("  BeappFailureLongPollMinutes: ").Append(BeappFailureLongPollMinutes).Append("\n");
            sb.Append("  NotificationsAssetMagickURL: ").Append(NotificationsAssetMagickURL).Append("\n");
            sb.Append("  NotificationsEnabled: ").Append(NotificationsEnabled).Append("\n");
            sb.Append("  NotificationsLongPollMinutes: ").Append(NotificationsLongPollMinutes).Append("\n");
            sb.Append("  NotificationsServiceEndpoint: ").Append(NotificationsServiceEndpoint).Append("\n");
            sb.Append("  NotificationsServiceEndpointV2: ").Append(NotificationsServiceEndpointV2).Append("\n");
            sb.Append("  NotificationsShortPollMinutes: ").Append(NotificationsShortPollMinutes).Append("\n");
            sb.Append("  NotificationsStreamGroupSlug: ").Append(NotificationsStreamGroupSlug).Append("\n");
            sb.Append("  NotificationsStreamURL: ").Append(NotificationsStreamURL).Append("\n");
            sb.Append("  UseServiceEndpointV2: ").Append(UseServiceEndpointV2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolEsportStreamNotificationsESportStreamNotificationsConfig);
        }

        /// <summary>
        /// Returns true if LolEsportStreamNotificationsESportStreamNotificationsConfig instances are equal
        /// </summary>
        /// <param name="other">Instance of LolEsportStreamNotificationsESportStreamNotificationsConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolEsportStreamNotificationsESportStreamNotificationsConfig other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BeappFailureLongPollMinutes == other.BeappFailureLongPollMinutes ||
                    this.BeappFailureLongPollMinutes != null &&
                    this.BeappFailureLongPollMinutes.Equals(other.BeappFailureLongPollMinutes)
                ) && 
                (
                    this.NotificationsAssetMagickURL == other.NotificationsAssetMagickURL ||
                    this.NotificationsAssetMagickURL != null &&
                    this.NotificationsAssetMagickURL.Equals(other.NotificationsAssetMagickURL)
                ) && 
                (
                    this.NotificationsEnabled == other.NotificationsEnabled ||
                    this.NotificationsEnabled != null &&
                    this.NotificationsEnabled.Equals(other.NotificationsEnabled)
                ) && 
                (
                    this.NotificationsLongPollMinutes == other.NotificationsLongPollMinutes ||
                    this.NotificationsLongPollMinutes != null &&
                    this.NotificationsLongPollMinutes.Equals(other.NotificationsLongPollMinutes)
                ) && 
                (
                    this.NotificationsServiceEndpoint == other.NotificationsServiceEndpoint ||
                    this.NotificationsServiceEndpoint != null &&
                    this.NotificationsServiceEndpoint.Equals(other.NotificationsServiceEndpoint)
                ) && 
                (
                    this.NotificationsServiceEndpointV2 == other.NotificationsServiceEndpointV2 ||
                    this.NotificationsServiceEndpointV2 != null &&
                    this.NotificationsServiceEndpointV2.Equals(other.NotificationsServiceEndpointV2)
                ) && 
                (
                    this.NotificationsShortPollMinutes == other.NotificationsShortPollMinutes ||
                    this.NotificationsShortPollMinutes != null &&
                    this.NotificationsShortPollMinutes.Equals(other.NotificationsShortPollMinutes)
                ) && 
                (
                    this.NotificationsStreamGroupSlug == other.NotificationsStreamGroupSlug ||
                    this.NotificationsStreamGroupSlug != null &&
                    this.NotificationsStreamGroupSlug.Equals(other.NotificationsStreamGroupSlug)
                ) && 
                (
                    this.NotificationsStreamURL == other.NotificationsStreamURL ||
                    this.NotificationsStreamURL != null &&
                    this.NotificationsStreamURL.Equals(other.NotificationsStreamURL)
                ) && 
                (
                    this.UseServiceEndpointV2 == other.UseServiceEndpointV2 ||
                    this.UseServiceEndpointV2 != null &&
                    this.UseServiceEndpointV2.Equals(other.UseServiceEndpointV2)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BeappFailureLongPollMinutes != null)
                    hash = hash * 59 + this.BeappFailureLongPollMinutes.GetHashCode();
                if (this.NotificationsAssetMagickURL != null)
                    hash = hash * 59 + this.NotificationsAssetMagickURL.GetHashCode();
                if (this.NotificationsEnabled != null)
                    hash = hash * 59 + this.NotificationsEnabled.GetHashCode();
                if (this.NotificationsLongPollMinutes != null)
                    hash = hash * 59 + this.NotificationsLongPollMinutes.GetHashCode();
                if (this.NotificationsServiceEndpoint != null)
                    hash = hash * 59 + this.NotificationsServiceEndpoint.GetHashCode();
                if (this.NotificationsServiceEndpointV2 != null)
                    hash = hash * 59 + this.NotificationsServiceEndpointV2.GetHashCode();
                if (this.NotificationsShortPollMinutes != null)
                    hash = hash * 59 + this.NotificationsShortPollMinutes.GetHashCode();
                if (this.NotificationsStreamGroupSlug != null)
                    hash = hash * 59 + this.NotificationsStreamGroupSlug.GetHashCode();
                if (this.NotificationsStreamURL != null)
                    hash = hash * 59 + this.NotificationsStreamURL.GetHashCode();
                if (this.UseServiceEndpointV2 != null)
                    hash = hash * 59 + this.UseServiceEndpointV2.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
