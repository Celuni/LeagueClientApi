/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolEsportStreamNotificationsESportsAPIStreamgroupsRoot
    /// </summary>
    [DataContract]
    public partial class LolEsportStreamNotificationsESportsAPIStreamgroupsRoot :  IEquatable<LolEsportStreamNotificationsESportsAPIStreamgroupsRoot>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolEsportStreamNotificationsESportsAPIStreamgroupsRoot" /> class.
        /// </summary>
        /// <param name="HighlanderTournaments">HighlanderTournaments.</param>
        /// <param name="Streamgroups">Streamgroups.</param>
        /// <param name="Teams">Teams.</param>
        public LolEsportStreamNotificationsESportsAPIStreamgroupsRoot(List<LolEsportStreamNotificationsEsportsAPIHighlanderTournaments> HighlanderTournaments = default(List<LolEsportStreamNotificationsEsportsAPIHighlanderTournaments>), List<LolEsportStreamNotificationsESportsAPIStreamgroups> Streamgroups = default(List<LolEsportStreamNotificationsESportsAPIStreamgroups>), List<LolEsportStreamNotificationsEsportsAPITeams> Teams = default(List<LolEsportStreamNotificationsEsportsAPITeams>))
        {
            this.HighlanderTournaments = HighlanderTournaments;
            this.Streamgroups = Streamgroups;
            this.Teams = Teams;
        }
        
        /// <summary>
        /// Gets or Sets HighlanderTournaments
        /// </summary>
        [DataMember(Name="highlanderTournaments", EmitDefaultValue=false)]
        public List<LolEsportStreamNotificationsEsportsAPIHighlanderTournaments> HighlanderTournaments { get; set; }

        /// <summary>
        /// Gets or Sets Streamgroups
        /// </summary>
        [DataMember(Name="streamgroups", EmitDefaultValue=false)]
        public List<LolEsportStreamNotificationsESportsAPIStreamgroups> Streamgroups { get; set; }

        /// <summary>
        /// Gets or Sets Teams
        /// </summary>
        [DataMember(Name="teams", EmitDefaultValue=false)]
        public List<LolEsportStreamNotificationsEsportsAPITeams> Teams { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolEsportStreamNotificationsESportsAPIStreamgroupsRoot {\n");
            sb.Append("  HighlanderTournaments: ").Append(HighlanderTournaments).Append("\n");
            sb.Append("  Streamgroups: ").Append(Streamgroups).Append("\n");
            sb.Append("  Teams: ").Append(Teams).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolEsportStreamNotificationsESportsAPIStreamgroupsRoot);
        }

        /// <summary>
        /// Returns true if LolEsportStreamNotificationsESportsAPIStreamgroupsRoot instances are equal
        /// </summary>
        /// <param name="other">Instance of LolEsportStreamNotificationsESportsAPIStreamgroupsRoot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolEsportStreamNotificationsESportsAPIStreamgroupsRoot other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.HighlanderTournaments == other.HighlanderTournaments ||
                    this.HighlanderTournaments != null &&
                    this.HighlanderTournaments.SequenceEqual(other.HighlanderTournaments)
                ) && 
                (
                    this.Streamgroups == other.Streamgroups ||
                    this.Streamgroups != null &&
                    this.Streamgroups.SequenceEqual(other.Streamgroups)
                ) && 
                (
                    this.Teams == other.Teams ||
                    this.Teams != null &&
                    this.Teams.SequenceEqual(other.Teams)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.HighlanderTournaments != null)
                    hash = hash * 59 + this.HighlanderTournaments.GetHashCode();
                if (this.Streamgroups != null)
                    hash = hash * 59 + this.Streamgroups.GetHashCode();
                if (this.Teams != null)
                    hash = hash * 59 + this.Teams.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
