/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolEsportStreamNotificationsESportsStreams
    /// </summary>
    [DataContract]
    public partial class LolEsportStreamNotificationsESportsStreams :  IEquatable<LolEsportStreamNotificationsESportsStreams>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolEsportStreamNotificationsESportsStreams" /> class.
        /// </summary>
        /// <param name="TeamAAcronym">TeamAAcronym.</param>
        /// <param name="TeamAGuid">TeamAGuid.</param>
        /// <param name="TeamAId">TeamAId.</param>
        /// <param name="TeamALogoUrl">TeamALogoUrl.</param>
        /// <param name="TeamAName">TeamAName.</param>
        /// <param name="TeamBAcronym">TeamBAcronym.</param>
        /// <param name="TeamBGuid">TeamBGuid.</param>
        /// <param name="TeamBId">TeamBId.</param>
        /// <param name="TeamBLogoUrl">TeamBLogoUrl.</param>
        /// <param name="TeamBName">TeamBName.</param>
        /// <param name="Title">Title.</param>
        /// <param name="TournamentDescription">TournamentDescription.</param>
        public LolEsportStreamNotificationsESportsStreams(string TeamAAcronym = default(string), string TeamAGuid = default(string), long? TeamAId = default(long?), string TeamALogoUrl = default(string), string TeamAName = default(string), string TeamBAcronym = default(string), string TeamBGuid = default(string), long? TeamBId = default(long?), string TeamBLogoUrl = default(string), string TeamBName = default(string), string Title = default(string), string TournamentDescription = default(string))
        {
            this.TeamAAcronym = TeamAAcronym;
            this.TeamAGuid = TeamAGuid;
            this.TeamAId = TeamAId;
            this.TeamALogoUrl = TeamALogoUrl;
            this.TeamAName = TeamAName;
            this.TeamBAcronym = TeamBAcronym;
            this.TeamBGuid = TeamBGuid;
            this.TeamBId = TeamBId;
            this.TeamBLogoUrl = TeamBLogoUrl;
            this.TeamBName = TeamBName;
            this.Title = Title;
            this.TournamentDescription = TournamentDescription;
        }
        
        /// <summary>
        /// Gets or Sets TeamAAcronym
        /// </summary>
        [DataMember(Name="teamAAcronym", EmitDefaultValue=false)]
        public string TeamAAcronym { get; set; }

        /// <summary>
        /// Gets or Sets TeamAGuid
        /// </summary>
        [DataMember(Name="teamAGuid", EmitDefaultValue=false)]
        public string TeamAGuid { get; set; }

        /// <summary>
        /// Gets or Sets TeamAId
        /// </summary>
        [DataMember(Name="teamAId", EmitDefaultValue=false)]
        public long? TeamAId { get; set; }

        /// <summary>
        /// Gets or Sets TeamALogoUrl
        /// </summary>
        [DataMember(Name="teamALogoUrl", EmitDefaultValue=false)]
        public string TeamALogoUrl { get; set; }

        /// <summary>
        /// Gets or Sets TeamAName
        /// </summary>
        [DataMember(Name="teamAName", EmitDefaultValue=false)]
        public string TeamAName { get; set; }

        /// <summary>
        /// Gets or Sets TeamBAcronym
        /// </summary>
        [DataMember(Name="teamBAcronym", EmitDefaultValue=false)]
        public string TeamBAcronym { get; set; }

        /// <summary>
        /// Gets or Sets TeamBGuid
        /// </summary>
        [DataMember(Name="teamBGuid", EmitDefaultValue=false)]
        public string TeamBGuid { get; set; }

        /// <summary>
        /// Gets or Sets TeamBId
        /// </summary>
        [DataMember(Name="teamBId", EmitDefaultValue=false)]
        public long? TeamBId { get; set; }

        /// <summary>
        /// Gets or Sets TeamBLogoUrl
        /// </summary>
        [DataMember(Name="teamBLogoUrl", EmitDefaultValue=false)]
        public string TeamBLogoUrl { get; set; }

        /// <summary>
        /// Gets or Sets TeamBName
        /// </summary>
        [DataMember(Name="teamBName", EmitDefaultValue=false)]
        public string TeamBName { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets TournamentDescription
        /// </summary>
        [DataMember(Name="tournamentDescription", EmitDefaultValue=false)]
        public string TournamentDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolEsportStreamNotificationsESportsStreams {\n");
            sb.Append("  TeamAAcronym: ").Append(TeamAAcronym).Append("\n");
            sb.Append("  TeamAGuid: ").Append(TeamAGuid).Append("\n");
            sb.Append("  TeamAId: ").Append(TeamAId).Append("\n");
            sb.Append("  TeamALogoUrl: ").Append(TeamALogoUrl).Append("\n");
            sb.Append("  TeamAName: ").Append(TeamAName).Append("\n");
            sb.Append("  TeamBAcronym: ").Append(TeamBAcronym).Append("\n");
            sb.Append("  TeamBGuid: ").Append(TeamBGuid).Append("\n");
            sb.Append("  TeamBId: ").Append(TeamBId).Append("\n");
            sb.Append("  TeamBLogoUrl: ").Append(TeamBLogoUrl).Append("\n");
            sb.Append("  TeamBName: ").Append(TeamBName).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  TournamentDescription: ").Append(TournamentDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolEsportStreamNotificationsESportsStreams);
        }

        /// <summary>
        /// Returns true if LolEsportStreamNotificationsESportsStreams instances are equal
        /// </summary>
        /// <param name="other">Instance of LolEsportStreamNotificationsESportsStreams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolEsportStreamNotificationsESportsStreams other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TeamAAcronym == other.TeamAAcronym ||
                    this.TeamAAcronym != null &&
                    this.TeamAAcronym.Equals(other.TeamAAcronym)
                ) && 
                (
                    this.TeamAGuid == other.TeamAGuid ||
                    this.TeamAGuid != null &&
                    this.TeamAGuid.Equals(other.TeamAGuid)
                ) && 
                (
                    this.TeamAId == other.TeamAId ||
                    this.TeamAId != null &&
                    this.TeamAId.Equals(other.TeamAId)
                ) && 
                (
                    this.TeamALogoUrl == other.TeamALogoUrl ||
                    this.TeamALogoUrl != null &&
                    this.TeamALogoUrl.Equals(other.TeamALogoUrl)
                ) && 
                (
                    this.TeamAName == other.TeamAName ||
                    this.TeamAName != null &&
                    this.TeamAName.Equals(other.TeamAName)
                ) && 
                (
                    this.TeamBAcronym == other.TeamBAcronym ||
                    this.TeamBAcronym != null &&
                    this.TeamBAcronym.Equals(other.TeamBAcronym)
                ) && 
                (
                    this.TeamBGuid == other.TeamBGuid ||
                    this.TeamBGuid != null &&
                    this.TeamBGuid.Equals(other.TeamBGuid)
                ) && 
                (
                    this.TeamBId == other.TeamBId ||
                    this.TeamBId != null &&
                    this.TeamBId.Equals(other.TeamBId)
                ) && 
                (
                    this.TeamBLogoUrl == other.TeamBLogoUrl ||
                    this.TeamBLogoUrl != null &&
                    this.TeamBLogoUrl.Equals(other.TeamBLogoUrl)
                ) && 
                (
                    this.TeamBName == other.TeamBName ||
                    this.TeamBName != null &&
                    this.TeamBName.Equals(other.TeamBName)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.TournamentDescription == other.TournamentDescription ||
                    this.TournamentDescription != null &&
                    this.TournamentDescription.Equals(other.TournamentDescription)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TeamAAcronym != null)
                    hash = hash * 59 + this.TeamAAcronym.GetHashCode();
                if (this.TeamAGuid != null)
                    hash = hash * 59 + this.TeamAGuid.GetHashCode();
                if (this.TeamAId != null)
                    hash = hash * 59 + this.TeamAId.GetHashCode();
                if (this.TeamALogoUrl != null)
                    hash = hash * 59 + this.TeamALogoUrl.GetHashCode();
                if (this.TeamAName != null)
                    hash = hash * 59 + this.TeamAName.GetHashCode();
                if (this.TeamBAcronym != null)
                    hash = hash * 59 + this.TeamBAcronym.GetHashCode();
                if (this.TeamBGuid != null)
                    hash = hash * 59 + this.TeamBGuid.GetHashCode();
                if (this.TeamBId != null)
                    hash = hash * 59 + this.TeamBId.GetHashCode();
                if (this.TeamBLogoUrl != null)
                    hash = hash * 59 + this.TeamBLogoUrl.GetHashCode();
                if (this.TeamBName != null)
                    hash = hash * 59 + this.TeamBName.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.TournamentDescription != null)
                    hash = hash * 59 + this.TournamentDescription.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
