/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolEsportStreamNotificationsEsportsAPIHighlanderTournaments
    /// </summary>
    [DataContract]
    public partial class LolEsportStreamNotificationsEsportsAPIHighlanderTournaments :  IEquatable<LolEsportStreamNotificationsEsportsAPIHighlanderTournaments>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolEsportStreamNotificationsEsportsAPIHighlanderTournaments" /> class.
        /// </summary>
        /// <param name="Brackets">Brackets.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Rosters">Rosters.</param>
        /// <param name="Title">Title.</param>
        public LolEsportStreamNotificationsEsportsAPIHighlanderTournaments(Dictionary<string, LolEsportStreamNotificationsEsportsAPIHighlanderTournamentsBrackets> Brackets = default(Dictionary<string, LolEsportStreamNotificationsEsportsAPIHighlanderTournamentsBrackets>), string Description = default(string), string Id = default(string), Dictionary<string, LolEsportStreamNotificationsEsportsAPIHighlanderTournamentsRosters> Rosters = default(Dictionary<string, LolEsportStreamNotificationsEsportsAPIHighlanderTournamentsRosters>), string Title = default(string))
        {
            this.Brackets = Brackets;
            this.Description = Description;
            this.Id = Id;
            this.Rosters = Rosters;
            this.Title = Title;
        }
        
        /// <summary>
        /// Gets or Sets Brackets
        /// </summary>
        [DataMember(Name="brackets", EmitDefaultValue=false)]
        public Dictionary<string, LolEsportStreamNotificationsEsportsAPIHighlanderTournamentsBrackets> Brackets { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Rosters
        /// </summary>
        [DataMember(Name="rosters", EmitDefaultValue=false)]
        public Dictionary<string, LolEsportStreamNotificationsEsportsAPIHighlanderTournamentsRosters> Rosters { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolEsportStreamNotificationsEsportsAPIHighlanderTournaments {\n");
            sb.Append("  Brackets: ").Append(Brackets).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Rosters: ").Append(Rosters).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolEsportStreamNotificationsEsportsAPIHighlanderTournaments);
        }

        /// <summary>
        /// Returns true if LolEsportStreamNotificationsEsportsAPIHighlanderTournaments instances are equal
        /// </summary>
        /// <param name="other">Instance of LolEsportStreamNotificationsEsportsAPIHighlanderTournaments to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolEsportStreamNotificationsEsportsAPIHighlanderTournaments other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Brackets == other.Brackets ||
                    this.Brackets != null &&
                    this.Brackets.SequenceEqual(other.Brackets)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Rosters == other.Rosters ||
                    this.Rosters != null &&
                    this.Rosters.SequenceEqual(other.Rosters)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Brackets != null)
                    hash = hash * 59 + this.Brackets.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Rosters != null)
                    hash = hash * 59 + this.Rosters.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
