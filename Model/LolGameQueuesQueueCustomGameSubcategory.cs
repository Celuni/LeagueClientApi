/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolGameQueuesQueueCustomGameSubcategory
    /// </summary>
    [DataContract]
    public partial class LolGameQueuesQueueCustomGameSubcategory :  IEquatable<LolGameQueuesQueueCustomGameSubcategory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolGameQueuesQueueCustomGameSubcategory" /> class.
        /// </summary>
        /// <param name="GameMode">GameMode.</param>
        /// <param name="GameMutator">GameMutator.</param>
        /// <param name="MapId">MapId.</param>
        /// <param name="MaxLevel">MaxLevel.</param>
        /// <param name="MaxPlayerCount">MaxPlayerCount.</param>
        /// <param name="MaximumParticipantListSize">MaximumParticipantListSize.</param>
        /// <param name="MinLevel">MinLevel.</param>
        /// <param name="MinimumParticipantListSize">MinimumParticipantListSize.</param>
        /// <param name="Mutators">Mutators.</param>
        /// <param name="NumPlayersPerTeam">NumPlayersPerTeam.</param>
        /// <param name="QueueAvailability">QueueAvailability.</param>
        public LolGameQueuesQueueCustomGameSubcategory(string GameMode = default(string), string GameMutator = default(string), int? MapId = default(int?), int? MaxLevel = default(int?), int? MaxPlayerCount = default(int?), int? MaximumParticipantListSize = default(int?), int? MinLevel = default(int?), int? MinimumParticipantListSize = default(int?), List<LolGameQueuesQueueGameTypeConfig> Mutators = default(List<LolGameQueuesQueueGameTypeConfig>), int? NumPlayersPerTeam = default(int?), LolGameQueuesQueueAvailability QueueAvailability = default(LolGameQueuesQueueAvailability))
        {
            this.GameMode = GameMode;
            this.GameMutator = GameMutator;
            this.MapId = MapId;
            this.MaxLevel = MaxLevel;
            this.MaxPlayerCount = MaxPlayerCount;
            this.MaximumParticipantListSize = MaximumParticipantListSize;
            this.MinLevel = MinLevel;
            this.MinimumParticipantListSize = MinimumParticipantListSize;
            this.Mutators = Mutators;
            this.NumPlayersPerTeam = NumPlayersPerTeam;
            this.QueueAvailability = QueueAvailability;
        }
        
        /// <summary>
        /// Gets or Sets GameMode
        /// </summary>
        [DataMember(Name="gameMode", EmitDefaultValue=false)]
        public string GameMode { get; set; }

        /// <summary>
        /// Gets or Sets GameMutator
        /// </summary>
        [DataMember(Name="gameMutator", EmitDefaultValue=false)]
        public string GameMutator { get; set; }

        /// <summary>
        /// Gets or Sets MapId
        /// </summary>
        [DataMember(Name="mapId", EmitDefaultValue=false)]
        public int? MapId { get; set; }

        /// <summary>
        /// Gets or Sets MaxLevel
        /// </summary>
        [DataMember(Name="maxLevel", EmitDefaultValue=false)]
        public int? MaxLevel { get; set; }

        /// <summary>
        /// Gets or Sets MaxPlayerCount
        /// </summary>
        [DataMember(Name="maxPlayerCount", EmitDefaultValue=false)]
        public int? MaxPlayerCount { get; set; }

        /// <summary>
        /// Gets or Sets MaximumParticipantListSize
        /// </summary>
        [DataMember(Name="maximumParticipantListSize", EmitDefaultValue=false)]
        public int? MaximumParticipantListSize { get; set; }

        /// <summary>
        /// Gets or Sets MinLevel
        /// </summary>
        [DataMember(Name="minLevel", EmitDefaultValue=false)]
        public int? MinLevel { get; set; }

        /// <summary>
        /// Gets or Sets MinimumParticipantListSize
        /// </summary>
        [DataMember(Name="minimumParticipantListSize", EmitDefaultValue=false)]
        public int? MinimumParticipantListSize { get; set; }

        /// <summary>
        /// Gets or Sets Mutators
        /// </summary>
        [DataMember(Name="mutators", EmitDefaultValue=false)]
        public List<LolGameQueuesQueueGameTypeConfig> Mutators { get; set; }

        /// <summary>
        /// Gets or Sets NumPlayersPerTeam
        /// </summary>
        [DataMember(Name="numPlayersPerTeam", EmitDefaultValue=false)]
        public int? NumPlayersPerTeam { get; set; }

        /// <summary>
        /// Gets or Sets QueueAvailability
        /// </summary>
        [DataMember(Name="queueAvailability", EmitDefaultValue=false)]
        public LolGameQueuesQueueAvailability QueueAvailability { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolGameQueuesQueueCustomGameSubcategory {\n");
            sb.Append("  GameMode: ").Append(GameMode).Append("\n");
            sb.Append("  GameMutator: ").Append(GameMutator).Append("\n");
            sb.Append("  MapId: ").Append(MapId).Append("\n");
            sb.Append("  MaxLevel: ").Append(MaxLevel).Append("\n");
            sb.Append("  MaxPlayerCount: ").Append(MaxPlayerCount).Append("\n");
            sb.Append("  MaximumParticipantListSize: ").Append(MaximumParticipantListSize).Append("\n");
            sb.Append("  MinLevel: ").Append(MinLevel).Append("\n");
            sb.Append("  MinimumParticipantListSize: ").Append(MinimumParticipantListSize).Append("\n");
            sb.Append("  Mutators: ").Append(Mutators).Append("\n");
            sb.Append("  NumPlayersPerTeam: ").Append(NumPlayersPerTeam).Append("\n");
            sb.Append("  QueueAvailability: ").Append(QueueAvailability).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolGameQueuesQueueCustomGameSubcategory);
        }

        /// <summary>
        /// Returns true if LolGameQueuesQueueCustomGameSubcategory instances are equal
        /// </summary>
        /// <param name="other">Instance of LolGameQueuesQueueCustomGameSubcategory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolGameQueuesQueueCustomGameSubcategory other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.GameMode == other.GameMode ||
                    this.GameMode != null &&
                    this.GameMode.Equals(other.GameMode)
                ) && 
                (
                    this.GameMutator == other.GameMutator ||
                    this.GameMutator != null &&
                    this.GameMutator.Equals(other.GameMutator)
                ) && 
                (
                    this.MapId == other.MapId ||
                    this.MapId != null &&
                    this.MapId.Equals(other.MapId)
                ) && 
                (
                    this.MaxLevel == other.MaxLevel ||
                    this.MaxLevel != null &&
                    this.MaxLevel.Equals(other.MaxLevel)
                ) && 
                (
                    this.MaxPlayerCount == other.MaxPlayerCount ||
                    this.MaxPlayerCount != null &&
                    this.MaxPlayerCount.Equals(other.MaxPlayerCount)
                ) && 
                (
                    this.MaximumParticipantListSize == other.MaximumParticipantListSize ||
                    this.MaximumParticipantListSize != null &&
                    this.MaximumParticipantListSize.Equals(other.MaximumParticipantListSize)
                ) && 
                (
                    this.MinLevel == other.MinLevel ||
                    this.MinLevel != null &&
                    this.MinLevel.Equals(other.MinLevel)
                ) && 
                (
                    this.MinimumParticipantListSize == other.MinimumParticipantListSize ||
                    this.MinimumParticipantListSize != null &&
                    this.MinimumParticipantListSize.Equals(other.MinimumParticipantListSize)
                ) && 
                (
                    this.Mutators == other.Mutators ||
                    this.Mutators != null &&
                    this.Mutators.SequenceEqual(other.Mutators)
                ) && 
                (
                    this.NumPlayersPerTeam == other.NumPlayersPerTeam ||
                    this.NumPlayersPerTeam != null &&
                    this.NumPlayersPerTeam.Equals(other.NumPlayersPerTeam)
                ) && 
                (
                    this.QueueAvailability == other.QueueAvailability ||
                    this.QueueAvailability != null &&
                    this.QueueAvailability.Equals(other.QueueAvailability)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.GameMode != null)
                    hash = hash * 59 + this.GameMode.GetHashCode();
                if (this.GameMutator != null)
                    hash = hash * 59 + this.GameMutator.GetHashCode();
                if (this.MapId != null)
                    hash = hash * 59 + this.MapId.GetHashCode();
                if (this.MaxLevel != null)
                    hash = hash * 59 + this.MaxLevel.GetHashCode();
                if (this.MaxPlayerCount != null)
                    hash = hash * 59 + this.MaxPlayerCount.GetHashCode();
                if (this.MaximumParticipantListSize != null)
                    hash = hash * 59 + this.MaximumParticipantListSize.GetHashCode();
                if (this.MinLevel != null)
                    hash = hash * 59 + this.MinLevel.GetHashCode();
                if (this.MinimumParticipantListSize != null)
                    hash = hash * 59 + this.MinimumParticipantListSize.GetHashCode();
                if (this.Mutators != null)
                    hash = hash * 59 + this.Mutators.GetHashCode();
                if (this.NumPlayersPerTeam != null)
                    hash = hash * 59 + this.NumPlayersPerTeam.GetHashCode();
                if (this.QueueAvailability != null)
                    hash = hash * 59 + this.QueueAvailability.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
