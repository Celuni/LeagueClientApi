/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolGameflowGameflowGameData
    /// </summary>
    [DataContract]
    public partial class LolGameflowGameflowGameData :  IEquatable<LolGameflowGameflowGameData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolGameflowGameflowGameData" /> class.
        /// </summary>
        /// <param name="GameId">GameId.</param>
        /// <param name="GameName">GameName.</param>
        /// <param name="IsCustomGame">IsCustomGame.</param>
        /// <param name="Password">Password.</param>
        /// <param name="PlayerChampionSelections">PlayerChampionSelections.</param>
        /// <param name="Queue">Queue.</param>
        /// <param name="SpectatorsAllowed">SpectatorsAllowed.</param>
        /// <param name="TeamOne">TeamOne.</param>
        /// <param name="TeamTwo">TeamTwo.</param>
        public LolGameflowGameflowGameData(long? GameId = default(long?), string GameName = default(string), bool? IsCustomGame = default(bool?), string Password = default(string), List<Object> PlayerChampionSelections = default(List<Object>), LolGameflowQueue Queue = default(LolGameflowQueue), bool? SpectatorsAllowed = default(bool?), List<Object> TeamOne = default(List<Object>), List<Object> TeamTwo = default(List<Object>))
        {
            this.GameId = GameId;
            this.GameName = GameName;
            this.IsCustomGame = IsCustomGame;
            this.Password = Password;
            this.PlayerChampionSelections = PlayerChampionSelections;
            this.Queue = Queue;
            this.SpectatorsAllowed = SpectatorsAllowed;
            this.TeamOne = TeamOne;
            this.TeamTwo = TeamTwo;
        }
        
        /// <summary>
        /// Gets or Sets GameId
        /// </summary>
        [DataMember(Name="gameId", EmitDefaultValue=false)]
        public long? GameId { get; set; }

        /// <summary>
        /// Gets or Sets GameName
        /// </summary>
        [DataMember(Name="gameName", EmitDefaultValue=false)]
        public string GameName { get; set; }

        /// <summary>
        /// Gets or Sets IsCustomGame
        /// </summary>
        [DataMember(Name="isCustomGame", EmitDefaultValue=false)]
        public bool? IsCustomGame { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets PlayerChampionSelections
        /// </summary>
        [DataMember(Name="playerChampionSelections", EmitDefaultValue=false)]
        public List<Object> PlayerChampionSelections { get; set; }

        /// <summary>
        /// Gets or Sets Queue
        /// </summary>
        [DataMember(Name="queue", EmitDefaultValue=false)]
        public LolGameflowQueue Queue { get; set; }

        /// <summary>
        /// Gets or Sets SpectatorsAllowed
        /// </summary>
        [DataMember(Name="spectatorsAllowed", EmitDefaultValue=false)]
        public bool? SpectatorsAllowed { get; set; }

        /// <summary>
        /// Gets or Sets TeamOne
        /// </summary>
        [DataMember(Name="teamOne", EmitDefaultValue=false)]
        public List<Object> TeamOne { get; set; }

        /// <summary>
        /// Gets or Sets TeamTwo
        /// </summary>
        [DataMember(Name="teamTwo", EmitDefaultValue=false)]
        public List<Object> TeamTwo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolGameflowGameflowGameData {\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  GameName: ").Append(GameName).Append("\n");
            sb.Append("  IsCustomGame: ").Append(IsCustomGame).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  PlayerChampionSelections: ").Append(PlayerChampionSelections).Append("\n");
            sb.Append("  Queue: ").Append(Queue).Append("\n");
            sb.Append("  SpectatorsAllowed: ").Append(SpectatorsAllowed).Append("\n");
            sb.Append("  TeamOne: ").Append(TeamOne).Append("\n");
            sb.Append("  TeamTwo: ").Append(TeamTwo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolGameflowGameflowGameData);
        }

        /// <summary>
        /// Returns true if LolGameflowGameflowGameData instances are equal
        /// </summary>
        /// <param name="other">Instance of LolGameflowGameflowGameData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolGameflowGameflowGameData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.GameId == other.GameId ||
                    this.GameId != null &&
                    this.GameId.Equals(other.GameId)
                ) && 
                (
                    this.GameName == other.GameName ||
                    this.GameName != null &&
                    this.GameName.Equals(other.GameName)
                ) && 
                (
                    this.IsCustomGame == other.IsCustomGame ||
                    this.IsCustomGame != null &&
                    this.IsCustomGame.Equals(other.IsCustomGame)
                ) && 
                (
                    this.Password == other.Password ||
                    this.Password != null &&
                    this.Password.Equals(other.Password)
                ) && 
                (
                    this.PlayerChampionSelections == other.PlayerChampionSelections ||
                    this.PlayerChampionSelections != null &&
                    this.PlayerChampionSelections.SequenceEqual(other.PlayerChampionSelections)
                ) && 
                (
                    this.Queue == other.Queue ||
                    this.Queue != null &&
                    this.Queue.Equals(other.Queue)
                ) && 
                (
                    this.SpectatorsAllowed == other.SpectatorsAllowed ||
                    this.SpectatorsAllowed != null &&
                    this.SpectatorsAllowed.Equals(other.SpectatorsAllowed)
                ) && 
                (
                    this.TeamOne == other.TeamOne ||
                    this.TeamOne != null &&
                    this.TeamOne.SequenceEqual(other.TeamOne)
                ) && 
                (
                    this.TeamTwo == other.TeamTwo ||
                    this.TeamTwo != null &&
                    this.TeamTwo.SequenceEqual(other.TeamTwo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.GameId != null)
                    hash = hash * 59 + this.GameId.GetHashCode();
                if (this.GameName != null)
                    hash = hash * 59 + this.GameName.GetHashCode();
                if (this.IsCustomGame != null)
                    hash = hash * 59 + this.IsCustomGame.GetHashCode();
                if (this.Password != null)
                    hash = hash * 59 + this.Password.GetHashCode();
                if (this.PlayerChampionSelections != null)
                    hash = hash * 59 + this.PlayerChampionSelections.GetHashCode();
                if (this.Queue != null)
                    hash = hash * 59 + this.Queue.GetHashCode();
                if (this.SpectatorsAllowed != null)
                    hash = hash * 59 + this.SpectatorsAllowed.GetHashCode();
                if (this.TeamOne != null)
                    hash = hash * 59 + this.TeamOne.GetHashCode();
                if (this.TeamTwo != null)
                    hash = hash * 59 + this.TeamTwo.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
