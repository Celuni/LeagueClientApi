/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolGameflowGameflowGameMap
    /// </summary>
    [DataContract]
    public partial class LolGameflowGameflowGameMap :  IEquatable<LolGameflowGameflowGameMap>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolGameflowGameflowGameMap" /> class.
        /// </summary>
        /// <param name="Assets">Assets.</param>
        /// <param name="Description">Description.</param>
        /// <param name="GameMode">GameMode.</param>
        /// <param name="GameModeName">GameModeName.</param>
        /// <param name="GameModeShortName">GameModeShortName.</param>
        /// <param name="GameMutator">GameMutator.</param>
        /// <param name="Id">Id.</param>
        /// <param name="IsRGM">IsRGM.</param>
        /// <param name="Name">Name.</param>
        /// <param name="PlatformId">PlatformId.</param>
        /// <param name="PlatformName">PlatformName.</param>
        /// <param name="Properties">Properties.</param>
        public LolGameflowGameflowGameMap(Object Assets = default(Object), string Description = default(string), string GameMode = default(string), string GameModeName = default(string), string GameModeShortName = default(string), string GameMutator = default(string), long? Id = default(long?), bool? IsRGM = default(bool?), string Name = default(string), string PlatformId = default(string), string PlatformName = default(string), Object Properties = default(Object))
        {
            this.Assets = Assets;
            this.Description = Description;
            this.GameMode = GameMode;
            this.GameModeName = GameModeName;
            this.GameModeShortName = GameModeShortName;
            this.GameMutator = GameMutator;
            this.Id = Id;
            this.IsRGM = IsRGM;
            this.Name = Name;
            this.PlatformId = PlatformId;
            this.PlatformName = PlatformName;
            this.Properties = Properties;
        }
        
        /// <summary>
        /// Gets or Sets Assets
        /// </summary>
        [DataMember(Name="assets", EmitDefaultValue=false)]
        public Object Assets { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets GameMode
        /// </summary>
        [DataMember(Name="gameMode", EmitDefaultValue=false)]
        public string GameMode { get; set; }

        /// <summary>
        /// Gets or Sets GameModeName
        /// </summary>
        [DataMember(Name="gameModeName", EmitDefaultValue=false)]
        public string GameModeName { get; set; }

        /// <summary>
        /// Gets or Sets GameModeShortName
        /// </summary>
        [DataMember(Name="gameModeShortName", EmitDefaultValue=false)]
        public string GameModeShortName { get; set; }

        /// <summary>
        /// Gets or Sets GameMutator
        /// </summary>
        [DataMember(Name="gameMutator", EmitDefaultValue=false)]
        public string GameMutator { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets IsRGM
        /// </summary>
        [DataMember(Name="isRGM", EmitDefaultValue=false)]
        public bool? IsRGM { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PlatformId
        /// </summary>
        [DataMember(Name="platformId", EmitDefaultValue=false)]
        public string PlatformId { get; set; }

        /// <summary>
        /// Gets or Sets PlatformName
        /// </summary>
        [DataMember(Name="platformName", EmitDefaultValue=false)]
        public string PlatformName { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public Object Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolGameflowGameflowGameMap {\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  GameMode: ").Append(GameMode).Append("\n");
            sb.Append("  GameModeName: ").Append(GameModeName).Append("\n");
            sb.Append("  GameModeShortName: ").Append(GameModeShortName).Append("\n");
            sb.Append("  GameMutator: ").Append(GameMutator).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsRGM: ").Append(IsRGM).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PlatformId: ").Append(PlatformId).Append("\n");
            sb.Append("  PlatformName: ").Append(PlatformName).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolGameflowGameflowGameMap);
        }

        /// <summary>
        /// Returns true if LolGameflowGameflowGameMap instances are equal
        /// </summary>
        /// <param name="other">Instance of LolGameflowGameflowGameMap to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolGameflowGameflowGameMap other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Assets == other.Assets ||
                    this.Assets != null &&
                    this.Assets.Equals(other.Assets)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.GameMode == other.GameMode ||
                    this.GameMode != null &&
                    this.GameMode.Equals(other.GameMode)
                ) && 
                (
                    this.GameModeName == other.GameModeName ||
                    this.GameModeName != null &&
                    this.GameModeName.Equals(other.GameModeName)
                ) && 
                (
                    this.GameModeShortName == other.GameModeShortName ||
                    this.GameModeShortName != null &&
                    this.GameModeShortName.Equals(other.GameModeShortName)
                ) && 
                (
                    this.GameMutator == other.GameMutator ||
                    this.GameMutator != null &&
                    this.GameMutator.Equals(other.GameMutator)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.IsRGM == other.IsRGM ||
                    this.IsRGM != null &&
                    this.IsRGM.Equals(other.IsRGM)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.PlatformId == other.PlatformId ||
                    this.PlatformId != null &&
                    this.PlatformId.Equals(other.PlatformId)
                ) && 
                (
                    this.PlatformName == other.PlatformName ||
                    this.PlatformName != null &&
                    this.PlatformName.Equals(other.PlatformName)
                ) && 
                (
                    this.Properties == other.Properties ||
                    this.Properties != null &&
                    this.Properties.Equals(other.Properties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Assets != null)
                    hash = hash * 59 + this.Assets.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.GameMode != null)
                    hash = hash * 59 + this.GameMode.GetHashCode();
                if (this.GameModeName != null)
                    hash = hash * 59 + this.GameModeName.GetHashCode();
                if (this.GameModeShortName != null)
                    hash = hash * 59 + this.GameModeShortName.GetHashCode();
                if (this.GameMutator != null)
                    hash = hash * 59 + this.GameMutator.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.IsRGM != null)
                    hash = hash * 59 + this.IsRGM.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.PlatformId != null)
                    hash = hash * 59 + this.PlatformId.GetHashCode();
                if (this.PlatformName != null)
                    hash = hash * 59 + this.PlatformName.GetHashCode();
                if (this.Properties != null)
                    hash = hash * 59 + this.Properties.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
