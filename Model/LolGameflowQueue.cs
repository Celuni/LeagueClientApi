/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolGameflowQueue
    /// </summary>
    [DataContract]
    public partial class LolGameflowQueue :  IEquatable<LolGameflowQueue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolGameflowQueue" /> class.
        /// </summary>
        /// <param name="AreFreeChampionsAllowed">AreFreeChampionsAllowed.</param>
        /// <param name="Category">Category.</param>
        /// <param name="Description">Description.</param>
        /// <param name="DetailedDescription">DetailedDescription.</param>
        /// <param name="GameMode">GameMode.</param>
        /// <param name="GameMutator">GameMutator.</param>
        /// <param name="GameTypeConfig">GameTypeConfig.</param>
        /// <param name="Id">Id.</param>
        /// <param name="IsRanked">IsRanked.</param>
        /// <param name="IsTeamBuilderManaged">IsTeamBuilderManaged.</param>
        /// <param name="IsTeamOnly">IsTeamOnly.</param>
        /// <param name="MapId">MapId.</param>
        /// <param name="MaxLevel">MaxLevel.</param>
        /// <param name="MaxSummonerLevelForFirstWinOfTheDay">MaxSummonerLevelForFirstWinOfTheDay.</param>
        /// <param name="MaximumParticipantListSize">MaximumParticipantListSize.</param>
        /// <param name="MinLevel">MinLevel.</param>
        /// <param name="MinimumParticipantListSize">MinimumParticipantListSize.</param>
        /// <param name="Name">Name.</param>
        /// <param name="NumPlayersPerTeam">NumPlayersPerTeam.</param>
        /// <param name="QueueAvailability">QueueAvailability.</param>
        /// <param name="QueueRewards">QueueRewards.</param>
        /// <param name="ShortName">ShortName.</param>
        /// <param name="SpectatorEnabled">SpectatorEnabled.</param>
        /// <param name="Type">Type.</param>
        public LolGameflowQueue(bool? AreFreeChampionsAllowed = default(bool?), LolGameflowQueueGameCategory Category = default(LolGameflowQueueGameCategory), string Description = default(string), string DetailedDescription = default(string), string GameMode = default(string), string GameMutator = default(string), LolGameflowQueueGameTypeConfig GameTypeConfig = default(LolGameflowQueueGameTypeConfig), int? Id = default(int?), bool? IsRanked = default(bool?), bool? IsTeamBuilderManaged = default(bool?), bool? IsTeamOnly = default(bool?), int? MapId = default(int?), int? MaxLevel = default(int?), int? MaxSummonerLevelForFirstWinOfTheDay = default(int?), int? MaximumParticipantListSize = default(int?), int? MinLevel = default(int?), int? MinimumParticipantListSize = default(int?), string Name = default(string), int? NumPlayersPerTeam = default(int?), LolGameflowQueueAvailability QueueAvailability = default(LolGameflowQueueAvailability), LolGameflowQueueReward QueueRewards = default(LolGameflowQueueReward), string ShortName = default(string), bool? SpectatorEnabled = default(bool?), string Type = default(string))
        {
            this.AreFreeChampionsAllowed = AreFreeChampionsAllowed;
            this.Category = Category;
            this.Description = Description;
            this.DetailedDescription = DetailedDescription;
            this.GameMode = GameMode;
            this.GameMutator = GameMutator;
            this.GameTypeConfig = GameTypeConfig;
            this.Id = Id;
            this.IsRanked = IsRanked;
            this.IsTeamBuilderManaged = IsTeamBuilderManaged;
            this.IsTeamOnly = IsTeamOnly;
            this.MapId = MapId;
            this.MaxLevel = MaxLevel;
            this.MaxSummonerLevelForFirstWinOfTheDay = MaxSummonerLevelForFirstWinOfTheDay;
            this.MaximumParticipantListSize = MaximumParticipantListSize;
            this.MinLevel = MinLevel;
            this.MinimumParticipantListSize = MinimumParticipantListSize;
            this.Name = Name;
            this.NumPlayersPerTeam = NumPlayersPerTeam;
            this.QueueAvailability = QueueAvailability;
            this.QueueRewards = QueueRewards;
            this.ShortName = ShortName;
            this.SpectatorEnabled = SpectatorEnabled;
            this.Type = Type;
        }
        
        /// <summary>
        /// Gets or Sets AreFreeChampionsAllowed
        /// </summary>
        [DataMember(Name="areFreeChampionsAllowed", EmitDefaultValue=false)]
        public bool? AreFreeChampionsAllowed { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public LolGameflowQueueGameCategory Category { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DetailedDescription
        /// </summary>
        [DataMember(Name="detailedDescription", EmitDefaultValue=false)]
        public string DetailedDescription { get; set; }

        /// <summary>
        /// Gets or Sets GameMode
        /// </summary>
        [DataMember(Name="gameMode", EmitDefaultValue=false)]
        public string GameMode { get; set; }

        /// <summary>
        /// Gets or Sets GameMutator
        /// </summary>
        [DataMember(Name="gameMutator", EmitDefaultValue=false)]
        public string GameMutator { get; set; }

        /// <summary>
        /// Gets or Sets GameTypeConfig
        /// </summary>
        [DataMember(Name="gameTypeConfig", EmitDefaultValue=false)]
        public LolGameflowQueueGameTypeConfig GameTypeConfig { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets IsRanked
        /// </summary>
        [DataMember(Name="isRanked", EmitDefaultValue=false)]
        public bool? IsRanked { get; set; }

        /// <summary>
        /// Gets or Sets IsTeamBuilderManaged
        /// </summary>
        [DataMember(Name="isTeamBuilderManaged", EmitDefaultValue=false)]
        public bool? IsTeamBuilderManaged { get; set; }

        /// <summary>
        /// Gets or Sets IsTeamOnly
        /// </summary>
        [DataMember(Name="isTeamOnly", EmitDefaultValue=false)]
        public bool? IsTeamOnly { get; set; }

        /// <summary>
        /// Gets or Sets MapId
        /// </summary>
        [DataMember(Name="mapId", EmitDefaultValue=false)]
        public int? MapId { get; set; }

        /// <summary>
        /// Gets or Sets MaxLevel
        /// </summary>
        [DataMember(Name="maxLevel", EmitDefaultValue=false)]
        public int? MaxLevel { get; set; }

        /// <summary>
        /// Gets or Sets MaxSummonerLevelForFirstWinOfTheDay
        /// </summary>
        [DataMember(Name="maxSummonerLevelForFirstWinOfTheDay", EmitDefaultValue=false)]
        public int? MaxSummonerLevelForFirstWinOfTheDay { get; set; }

        /// <summary>
        /// Gets or Sets MaximumParticipantListSize
        /// </summary>
        [DataMember(Name="maximumParticipantListSize", EmitDefaultValue=false)]
        public int? MaximumParticipantListSize { get; set; }

        /// <summary>
        /// Gets or Sets MinLevel
        /// </summary>
        [DataMember(Name="minLevel", EmitDefaultValue=false)]
        public int? MinLevel { get; set; }

        /// <summary>
        /// Gets or Sets MinimumParticipantListSize
        /// </summary>
        [DataMember(Name="minimumParticipantListSize", EmitDefaultValue=false)]
        public int? MinimumParticipantListSize { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NumPlayersPerTeam
        /// </summary>
        [DataMember(Name="numPlayersPerTeam", EmitDefaultValue=false)]
        public int? NumPlayersPerTeam { get; set; }

        /// <summary>
        /// Gets or Sets QueueAvailability
        /// </summary>
        [DataMember(Name="queueAvailability", EmitDefaultValue=false)]
        public LolGameflowQueueAvailability QueueAvailability { get; set; }

        /// <summary>
        /// Gets or Sets QueueRewards
        /// </summary>
        [DataMember(Name="queueRewards", EmitDefaultValue=false)]
        public LolGameflowQueueReward QueueRewards { get; set; }

        /// <summary>
        /// Gets or Sets ShortName
        /// </summary>
        [DataMember(Name="shortName", EmitDefaultValue=false)]
        public string ShortName { get; set; }

        /// <summary>
        /// Gets or Sets SpectatorEnabled
        /// </summary>
        [DataMember(Name="spectatorEnabled", EmitDefaultValue=false)]
        public bool? SpectatorEnabled { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolGameflowQueue {\n");
            sb.Append("  AreFreeChampionsAllowed: ").Append(AreFreeChampionsAllowed).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DetailedDescription: ").Append(DetailedDescription).Append("\n");
            sb.Append("  GameMode: ").Append(GameMode).Append("\n");
            sb.Append("  GameMutator: ").Append(GameMutator).Append("\n");
            sb.Append("  GameTypeConfig: ").Append(GameTypeConfig).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsRanked: ").Append(IsRanked).Append("\n");
            sb.Append("  IsTeamBuilderManaged: ").Append(IsTeamBuilderManaged).Append("\n");
            sb.Append("  IsTeamOnly: ").Append(IsTeamOnly).Append("\n");
            sb.Append("  MapId: ").Append(MapId).Append("\n");
            sb.Append("  MaxLevel: ").Append(MaxLevel).Append("\n");
            sb.Append("  MaxSummonerLevelForFirstWinOfTheDay: ").Append(MaxSummonerLevelForFirstWinOfTheDay).Append("\n");
            sb.Append("  MaximumParticipantListSize: ").Append(MaximumParticipantListSize).Append("\n");
            sb.Append("  MinLevel: ").Append(MinLevel).Append("\n");
            sb.Append("  MinimumParticipantListSize: ").Append(MinimumParticipantListSize).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NumPlayersPerTeam: ").Append(NumPlayersPerTeam).Append("\n");
            sb.Append("  QueueAvailability: ").Append(QueueAvailability).Append("\n");
            sb.Append("  QueueRewards: ").Append(QueueRewards).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  SpectatorEnabled: ").Append(SpectatorEnabled).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolGameflowQueue);
        }

        /// <summary>
        /// Returns true if LolGameflowQueue instances are equal
        /// </summary>
        /// <param name="other">Instance of LolGameflowQueue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolGameflowQueue other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AreFreeChampionsAllowed == other.AreFreeChampionsAllowed ||
                    this.AreFreeChampionsAllowed != null &&
                    this.AreFreeChampionsAllowed.Equals(other.AreFreeChampionsAllowed)
                ) && 
                (
                    this.Category == other.Category ||
                    this.Category != null &&
                    this.Category.Equals(other.Category)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.DetailedDescription == other.DetailedDescription ||
                    this.DetailedDescription != null &&
                    this.DetailedDescription.Equals(other.DetailedDescription)
                ) && 
                (
                    this.GameMode == other.GameMode ||
                    this.GameMode != null &&
                    this.GameMode.Equals(other.GameMode)
                ) && 
                (
                    this.GameMutator == other.GameMutator ||
                    this.GameMutator != null &&
                    this.GameMutator.Equals(other.GameMutator)
                ) && 
                (
                    this.GameTypeConfig == other.GameTypeConfig ||
                    this.GameTypeConfig != null &&
                    this.GameTypeConfig.Equals(other.GameTypeConfig)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.IsRanked == other.IsRanked ||
                    this.IsRanked != null &&
                    this.IsRanked.Equals(other.IsRanked)
                ) && 
                (
                    this.IsTeamBuilderManaged == other.IsTeamBuilderManaged ||
                    this.IsTeamBuilderManaged != null &&
                    this.IsTeamBuilderManaged.Equals(other.IsTeamBuilderManaged)
                ) && 
                (
                    this.IsTeamOnly == other.IsTeamOnly ||
                    this.IsTeamOnly != null &&
                    this.IsTeamOnly.Equals(other.IsTeamOnly)
                ) && 
                (
                    this.MapId == other.MapId ||
                    this.MapId != null &&
                    this.MapId.Equals(other.MapId)
                ) && 
                (
                    this.MaxLevel == other.MaxLevel ||
                    this.MaxLevel != null &&
                    this.MaxLevel.Equals(other.MaxLevel)
                ) && 
                (
                    this.MaxSummonerLevelForFirstWinOfTheDay == other.MaxSummonerLevelForFirstWinOfTheDay ||
                    this.MaxSummonerLevelForFirstWinOfTheDay != null &&
                    this.MaxSummonerLevelForFirstWinOfTheDay.Equals(other.MaxSummonerLevelForFirstWinOfTheDay)
                ) && 
                (
                    this.MaximumParticipantListSize == other.MaximumParticipantListSize ||
                    this.MaximumParticipantListSize != null &&
                    this.MaximumParticipantListSize.Equals(other.MaximumParticipantListSize)
                ) && 
                (
                    this.MinLevel == other.MinLevel ||
                    this.MinLevel != null &&
                    this.MinLevel.Equals(other.MinLevel)
                ) && 
                (
                    this.MinimumParticipantListSize == other.MinimumParticipantListSize ||
                    this.MinimumParticipantListSize != null &&
                    this.MinimumParticipantListSize.Equals(other.MinimumParticipantListSize)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.NumPlayersPerTeam == other.NumPlayersPerTeam ||
                    this.NumPlayersPerTeam != null &&
                    this.NumPlayersPerTeam.Equals(other.NumPlayersPerTeam)
                ) && 
                (
                    this.QueueAvailability == other.QueueAvailability ||
                    this.QueueAvailability != null &&
                    this.QueueAvailability.Equals(other.QueueAvailability)
                ) && 
                (
                    this.QueueRewards == other.QueueRewards ||
                    this.QueueRewards != null &&
                    this.QueueRewards.Equals(other.QueueRewards)
                ) && 
                (
                    this.ShortName == other.ShortName ||
                    this.ShortName != null &&
                    this.ShortName.Equals(other.ShortName)
                ) && 
                (
                    this.SpectatorEnabled == other.SpectatorEnabled ||
                    this.SpectatorEnabled != null &&
                    this.SpectatorEnabled.Equals(other.SpectatorEnabled)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AreFreeChampionsAllowed != null)
                    hash = hash * 59 + this.AreFreeChampionsAllowed.GetHashCode();
                if (this.Category != null)
                    hash = hash * 59 + this.Category.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.DetailedDescription != null)
                    hash = hash * 59 + this.DetailedDescription.GetHashCode();
                if (this.GameMode != null)
                    hash = hash * 59 + this.GameMode.GetHashCode();
                if (this.GameMutator != null)
                    hash = hash * 59 + this.GameMutator.GetHashCode();
                if (this.GameTypeConfig != null)
                    hash = hash * 59 + this.GameTypeConfig.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.IsRanked != null)
                    hash = hash * 59 + this.IsRanked.GetHashCode();
                if (this.IsTeamBuilderManaged != null)
                    hash = hash * 59 + this.IsTeamBuilderManaged.GetHashCode();
                if (this.IsTeamOnly != null)
                    hash = hash * 59 + this.IsTeamOnly.GetHashCode();
                if (this.MapId != null)
                    hash = hash * 59 + this.MapId.GetHashCode();
                if (this.MaxLevel != null)
                    hash = hash * 59 + this.MaxLevel.GetHashCode();
                if (this.MaxSummonerLevelForFirstWinOfTheDay != null)
                    hash = hash * 59 + this.MaxSummonerLevelForFirstWinOfTheDay.GetHashCode();
                if (this.MaximumParticipantListSize != null)
                    hash = hash * 59 + this.MaximumParticipantListSize.GetHashCode();
                if (this.MinLevel != null)
                    hash = hash * 59 + this.MinLevel.GetHashCode();
                if (this.MinimumParticipantListSize != null)
                    hash = hash * 59 + this.MinimumParticipantListSize.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.NumPlayersPerTeam != null)
                    hash = hash * 59 + this.NumPlayersPerTeam.GetHashCode();
                if (this.QueueAvailability != null)
                    hash = hash * 59 + this.QueueAvailability.GetHashCode();
                if (this.QueueRewards != null)
                    hash = hash * 59 + this.QueueRewards.GetHashCode();
                if (this.ShortName != null)
                    hash = hash * 59 + this.ShortName.GetHashCode();
                if (this.SpectatorEnabled != null)
                    hash = hash * 59 + this.SpectatorEnabled.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
