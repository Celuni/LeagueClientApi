/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolHonorV2EndOfGameStats
    /// </summary>
    [DataContract]
    public partial class LolHonorV2EndOfGameStats :  IEquatable<LolHonorV2EndOfGameStats>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolHonorV2EndOfGameStats" /> class.
        /// </summary>
        /// <param name="AccountId">AccountId.</param>
        /// <param name="ChampionId">ChampionId.</param>
        /// <param name="Difficulty">Difficulty.</param>
        /// <param name="GameEndedInEarlySurrender">GameEndedInEarlySurrender.</param>
        /// <param name="GameId">GameId.</param>
        /// <param name="GameLength">GameLength.</param>
        /// <param name="GameMode">GameMode.</param>
        /// <param name="GameMutators">GameMutators.</param>
        /// <param name="GameType">GameType.</param>
        /// <param name="ImbalancedTeamsNoPoints">ImbalancedTeamsNoPoints.</param>
        /// <param name="Invalid">Invalid.</param>
        /// <param name="MyTeamStatus">MyTeamStatus.</param>
        /// <param name="QueueType">QueueType.</param>
        /// <param name="Ranked">Ranked.</param>
        /// <param name="ReportGameId">ReportGameId.</param>
        /// <param name="SummonerId">SummonerId.</param>
        /// <param name="SummonerName">SummonerName.</param>
        /// <param name="Teams">Teams.</param>
        public LolHonorV2EndOfGameStats(long? AccountId = default(long?), int? ChampionId = default(int?), string Difficulty = default(string), bool? GameEndedInEarlySurrender = default(bool?), long? GameId = default(long?), int? GameLength = default(int?), string GameMode = default(string), List<string> GameMutators = default(List<string>), string GameType = default(string), bool? ImbalancedTeamsNoPoints = default(bool?), bool? Invalid = default(bool?), string MyTeamStatus = default(string), string QueueType = default(string), bool? Ranked = default(bool?), long? ReportGameId = default(long?), long? SummonerId = default(long?), string SummonerName = default(string), List<LolHonorV2EndOfGameTeam> Teams = default(List<LolHonorV2EndOfGameTeam>))
        {
            this.AccountId = AccountId;
            this.ChampionId = ChampionId;
            this.Difficulty = Difficulty;
            this.GameEndedInEarlySurrender = GameEndedInEarlySurrender;
            this.GameId = GameId;
            this.GameLength = GameLength;
            this.GameMode = GameMode;
            this.GameMutators = GameMutators;
            this.GameType = GameType;
            this.ImbalancedTeamsNoPoints = ImbalancedTeamsNoPoints;
            this.Invalid = Invalid;
            this.MyTeamStatus = MyTeamStatus;
            this.QueueType = QueueType;
            this.Ranked = Ranked;
            this.ReportGameId = ReportGameId;
            this.SummonerId = SummonerId;
            this.SummonerName = SummonerName;
            this.Teams = Teams;
        }
        
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public long? AccountId { get; set; }

        /// <summary>
        /// Gets or Sets ChampionId
        /// </summary>
        [DataMember(Name="championId", EmitDefaultValue=false)]
        public int? ChampionId { get; set; }

        /// <summary>
        /// Gets or Sets Difficulty
        /// </summary>
        [DataMember(Name="difficulty", EmitDefaultValue=false)]
        public string Difficulty { get; set; }

        /// <summary>
        /// Gets or Sets GameEndedInEarlySurrender
        /// </summary>
        [DataMember(Name="gameEndedInEarlySurrender", EmitDefaultValue=false)]
        public bool? GameEndedInEarlySurrender { get; set; }

        /// <summary>
        /// Gets or Sets GameId
        /// </summary>
        [DataMember(Name="gameId", EmitDefaultValue=false)]
        public long? GameId { get; set; }

        /// <summary>
        /// Gets or Sets GameLength
        /// </summary>
        [DataMember(Name="gameLength", EmitDefaultValue=false)]
        public int? GameLength { get; set; }

        /// <summary>
        /// Gets or Sets GameMode
        /// </summary>
        [DataMember(Name="gameMode", EmitDefaultValue=false)]
        public string GameMode { get; set; }

        /// <summary>
        /// Gets or Sets GameMutators
        /// </summary>
        [DataMember(Name="gameMutators", EmitDefaultValue=false)]
        public List<string> GameMutators { get; set; }

        /// <summary>
        /// Gets or Sets GameType
        /// </summary>
        [DataMember(Name="gameType", EmitDefaultValue=false)]
        public string GameType { get; set; }

        /// <summary>
        /// Gets or Sets ImbalancedTeamsNoPoints
        /// </summary>
        [DataMember(Name="imbalancedTeamsNoPoints", EmitDefaultValue=false)]
        public bool? ImbalancedTeamsNoPoints { get; set; }

        /// <summary>
        /// Gets or Sets Invalid
        /// </summary>
        [DataMember(Name="invalid", EmitDefaultValue=false)]
        public bool? Invalid { get; set; }

        /// <summary>
        /// Gets or Sets MyTeamStatus
        /// </summary>
        [DataMember(Name="myTeamStatus", EmitDefaultValue=false)]
        public string MyTeamStatus { get; set; }

        /// <summary>
        /// Gets or Sets QueueType
        /// </summary>
        [DataMember(Name="queueType", EmitDefaultValue=false)]
        public string QueueType { get; set; }

        /// <summary>
        /// Gets or Sets Ranked
        /// </summary>
        [DataMember(Name="ranked", EmitDefaultValue=false)]
        public bool? Ranked { get; set; }

        /// <summary>
        /// Gets or Sets ReportGameId
        /// </summary>
        [DataMember(Name="reportGameId", EmitDefaultValue=false)]
        public long? ReportGameId { get; set; }

        /// <summary>
        /// Gets or Sets SummonerId
        /// </summary>
        [DataMember(Name="summonerId", EmitDefaultValue=false)]
        public long? SummonerId { get; set; }

        /// <summary>
        /// Gets or Sets SummonerName
        /// </summary>
        [DataMember(Name="summonerName", EmitDefaultValue=false)]
        public string SummonerName { get; set; }

        /// <summary>
        /// Gets or Sets Teams
        /// </summary>
        [DataMember(Name="teams", EmitDefaultValue=false)]
        public List<LolHonorV2EndOfGameTeam> Teams { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolHonorV2EndOfGameStats {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ChampionId: ").Append(ChampionId).Append("\n");
            sb.Append("  Difficulty: ").Append(Difficulty).Append("\n");
            sb.Append("  GameEndedInEarlySurrender: ").Append(GameEndedInEarlySurrender).Append("\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  GameLength: ").Append(GameLength).Append("\n");
            sb.Append("  GameMode: ").Append(GameMode).Append("\n");
            sb.Append("  GameMutators: ").Append(GameMutators).Append("\n");
            sb.Append("  GameType: ").Append(GameType).Append("\n");
            sb.Append("  ImbalancedTeamsNoPoints: ").Append(ImbalancedTeamsNoPoints).Append("\n");
            sb.Append("  Invalid: ").Append(Invalid).Append("\n");
            sb.Append("  MyTeamStatus: ").Append(MyTeamStatus).Append("\n");
            sb.Append("  QueueType: ").Append(QueueType).Append("\n");
            sb.Append("  Ranked: ").Append(Ranked).Append("\n");
            sb.Append("  ReportGameId: ").Append(ReportGameId).Append("\n");
            sb.Append("  SummonerId: ").Append(SummonerId).Append("\n");
            sb.Append("  SummonerName: ").Append(SummonerName).Append("\n");
            sb.Append("  Teams: ").Append(Teams).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolHonorV2EndOfGameStats);
        }

        /// <summary>
        /// Returns true if LolHonorV2EndOfGameStats instances are equal
        /// </summary>
        /// <param name="other">Instance of LolHonorV2EndOfGameStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolHonorV2EndOfGameStats other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.ChampionId == other.ChampionId ||
                    this.ChampionId != null &&
                    this.ChampionId.Equals(other.ChampionId)
                ) && 
                (
                    this.Difficulty == other.Difficulty ||
                    this.Difficulty != null &&
                    this.Difficulty.Equals(other.Difficulty)
                ) && 
                (
                    this.GameEndedInEarlySurrender == other.GameEndedInEarlySurrender ||
                    this.GameEndedInEarlySurrender != null &&
                    this.GameEndedInEarlySurrender.Equals(other.GameEndedInEarlySurrender)
                ) && 
                (
                    this.GameId == other.GameId ||
                    this.GameId != null &&
                    this.GameId.Equals(other.GameId)
                ) && 
                (
                    this.GameLength == other.GameLength ||
                    this.GameLength != null &&
                    this.GameLength.Equals(other.GameLength)
                ) && 
                (
                    this.GameMode == other.GameMode ||
                    this.GameMode != null &&
                    this.GameMode.Equals(other.GameMode)
                ) && 
                (
                    this.GameMutators == other.GameMutators ||
                    this.GameMutators != null &&
                    this.GameMutators.SequenceEqual(other.GameMutators)
                ) && 
                (
                    this.GameType == other.GameType ||
                    this.GameType != null &&
                    this.GameType.Equals(other.GameType)
                ) && 
                (
                    this.ImbalancedTeamsNoPoints == other.ImbalancedTeamsNoPoints ||
                    this.ImbalancedTeamsNoPoints != null &&
                    this.ImbalancedTeamsNoPoints.Equals(other.ImbalancedTeamsNoPoints)
                ) && 
                (
                    this.Invalid == other.Invalid ||
                    this.Invalid != null &&
                    this.Invalid.Equals(other.Invalid)
                ) && 
                (
                    this.MyTeamStatus == other.MyTeamStatus ||
                    this.MyTeamStatus != null &&
                    this.MyTeamStatus.Equals(other.MyTeamStatus)
                ) && 
                (
                    this.QueueType == other.QueueType ||
                    this.QueueType != null &&
                    this.QueueType.Equals(other.QueueType)
                ) && 
                (
                    this.Ranked == other.Ranked ||
                    this.Ranked != null &&
                    this.Ranked.Equals(other.Ranked)
                ) && 
                (
                    this.ReportGameId == other.ReportGameId ||
                    this.ReportGameId != null &&
                    this.ReportGameId.Equals(other.ReportGameId)
                ) && 
                (
                    this.SummonerId == other.SummonerId ||
                    this.SummonerId != null &&
                    this.SummonerId.Equals(other.SummonerId)
                ) && 
                (
                    this.SummonerName == other.SummonerName ||
                    this.SummonerName != null &&
                    this.SummonerName.Equals(other.SummonerName)
                ) && 
                (
                    this.Teams == other.Teams ||
                    this.Teams != null &&
                    this.Teams.SequenceEqual(other.Teams)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.ChampionId != null)
                    hash = hash * 59 + this.ChampionId.GetHashCode();
                if (this.Difficulty != null)
                    hash = hash * 59 + this.Difficulty.GetHashCode();
                if (this.GameEndedInEarlySurrender != null)
                    hash = hash * 59 + this.GameEndedInEarlySurrender.GetHashCode();
                if (this.GameId != null)
                    hash = hash * 59 + this.GameId.GetHashCode();
                if (this.GameLength != null)
                    hash = hash * 59 + this.GameLength.GetHashCode();
                if (this.GameMode != null)
                    hash = hash * 59 + this.GameMode.GetHashCode();
                if (this.GameMutators != null)
                    hash = hash * 59 + this.GameMutators.GetHashCode();
                if (this.GameType != null)
                    hash = hash * 59 + this.GameType.GetHashCode();
                if (this.ImbalancedTeamsNoPoints != null)
                    hash = hash * 59 + this.ImbalancedTeamsNoPoints.GetHashCode();
                if (this.Invalid != null)
                    hash = hash * 59 + this.Invalid.GetHashCode();
                if (this.MyTeamStatus != null)
                    hash = hash * 59 + this.MyTeamStatus.GetHashCode();
                if (this.QueueType != null)
                    hash = hash * 59 + this.QueueType.GetHashCode();
                if (this.Ranked != null)
                    hash = hash * 59 + this.Ranked.GetHashCode();
                if (this.ReportGameId != null)
                    hash = hash * 59 + this.ReportGameId.GetHashCode();
                if (this.SummonerId != null)
                    hash = hash * 59 + this.SummonerId.GetHashCode();
                if (this.SummonerName != null)
                    hash = hash * 59 + this.SummonerName.GetHashCode();
                if (this.Teams != null)
                    hash = hash * 59 + this.Teams.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
