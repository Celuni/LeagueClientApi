/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolHonorV2Honor
    /// </summary>
    [DataContract]
    public partial class LolHonorV2Honor :  IEquatable<LolHonorV2Honor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolHonorV2Honor" /> class.
        /// </summary>
        /// <param name="HonorCategory">HonorCategory.</param>
        /// <param name="VoterRelationship">VoterRelationship.</param>
        public LolHonorV2Honor(string HonorCategory = default(string), string VoterRelationship = default(string))
        {
            this.HonorCategory = HonorCategory;
            this.VoterRelationship = VoterRelationship;
        }
        
        /// <summary>
        /// Gets or Sets HonorCategory
        /// </summary>
        [DataMember(Name="honorCategory", EmitDefaultValue=false)]
        public string HonorCategory { get; set; }

        /// <summary>
        /// Gets or Sets VoterRelationship
        /// </summary>
        [DataMember(Name="voterRelationship", EmitDefaultValue=false)]
        public string VoterRelationship { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolHonorV2Honor {\n");
            sb.Append("  HonorCategory: ").Append(HonorCategory).Append("\n");
            sb.Append("  VoterRelationship: ").Append(VoterRelationship).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolHonorV2Honor);
        }

        /// <summary>
        /// Returns true if LolHonorV2Honor instances are equal
        /// </summary>
        /// <param name="other">Instance of LolHonorV2Honor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolHonorV2Honor other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.HonorCategory == other.HonorCategory ||
                    this.HonorCategory != null &&
                    this.HonorCategory.Equals(other.HonorCategory)
                ) && 
                (
                    this.VoterRelationship == other.VoterRelationship ||
                    this.VoterRelationship != null &&
                    this.VoterRelationship.Equals(other.VoterRelationship)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.HonorCategory != null)
                    hash = hash * 59 + this.HonorCategory.GetHashCode();
                if (this.VoterRelationship != null)
                    hash = hash * 59 + this.VoterRelationship.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
