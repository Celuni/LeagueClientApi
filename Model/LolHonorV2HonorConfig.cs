/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolHonorV2HonorConfig
    /// </summary>
    [DataContract]
    public partial class LolHonorV2HonorConfig :  IEquatable<LolHonorV2HonorConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolHonorV2HonorConfig" /> class.
        /// </summary>
        /// <param name="DayOneModalEnabled">DayOneModalEnabled.</param>
        /// <param name="Enabled">Enabled.</param>
        /// <param name="Honor2018Enabled">Honor2018Enabled.</param>
        /// <param name="SecondsToVote">SecondsToVote.</param>
        public LolHonorV2HonorConfig(bool? DayOneModalEnabled = default(bool?), bool? Enabled = default(bool?), bool? Honor2018Enabled = default(bool?), int? SecondsToVote = default(int?))
        {
            this.DayOneModalEnabled = DayOneModalEnabled;
            this.Enabled = Enabled;
            this.Honor2018Enabled = Honor2018Enabled;
            this.SecondsToVote = SecondsToVote;
        }
        
        /// <summary>
        /// Gets or Sets DayOneModalEnabled
        /// </summary>
        [DataMember(Name="DayOneModalEnabled", EmitDefaultValue=false)]
        public bool? DayOneModalEnabled { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="Enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or Sets Honor2018Enabled
        /// </summary>
        [DataMember(Name="Honor2018Enabled", EmitDefaultValue=false)]
        public bool? Honor2018Enabled { get; set; }

        /// <summary>
        /// Gets or Sets SecondsToVote
        /// </summary>
        [DataMember(Name="SecondsToVote", EmitDefaultValue=false)]
        public int? SecondsToVote { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolHonorV2HonorConfig {\n");
            sb.Append("  DayOneModalEnabled: ").Append(DayOneModalEnabled).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Honor2018Enabled: ").Append(Honor2018Enabled).Append("\n");
            sb.Append("  SecondsToVote: ").Append(SecondsToVote).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolHonorV2HonorConfig);
        }

        /// <summary>
        /// Returns true if LolHonorV2HonorConfig instances are equal
        /// </summary>
        /// <param name="other">Instance of LolHonorV2HonorConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolHonorV2HonorConfig other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DayOneModalEnabled == other.DayOneModalEnabled ||
                    this.DayOneModalEnabled != null &&
                    this.DayOneModalEnabled.Equals(other.DayOneModalEnabled)
                ) && 
                (
                    this.Enabled == other.Enabled ||
                    this.Enabled != null &&
                    this.Enabled.Equals(other.Enabled)
                ) && 
                (
                    this.Honor2018Enabled == other.Honor2018Enabled ||
                    this.Honor2018Enabled != null &&
                    this.Honor2018Enabled.Equals(other.Honor2018Enabled)
                ) && 
                (
                    this.SecondsToVote == other.SecondsToVote ||
                    this.SecondsToVote != null &&
                    this.SecondsToVote.Equals(other.SecondsToVote)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DayOneModalEnabled != null)
                    hash = hash * 59 + this.DayOneModalEnabled.GetHashCode();
                if (this.Enabled != null)
                    hash = hash * 59 + this.Enabled.GetHashCode();
                if (this.Honor2018Enabled != null)
                    hash = hash * 59 + this.Honor2018Enabled.GetHashCode();
                if (this.SecondsToVote != null)
                    hash = hash * 59 + this.SecondsToVote.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
