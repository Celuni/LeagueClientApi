/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolInventoryCacheEntry
    /// </summary>
    [DataContract]
    public partial class LolInventoryCacheEntry :  IEquatable<LolInventoryCacheEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolInventoryCacheEntry" /> class.
        /// </summary>
        /// <param name="ExpirationMS">ExpirationMS.</param>
        /// <param name="SignedInventoryJwt">SignedInventoryJwt.</param>
        /// <param name="Valid">Valid.</param>
        public LolInventoryCacheEntry(long? ExpirationMS = default(long?), string SignedInventoryJwt = default(string), bool? Valid = default(bool?))
        {
            this.ExpirationMS = ExpirationMS;
            this.SignedInventoryJwt = SignedInventoryJwt;
            this.Valid = Valid;
        }
        
        /// <summary>
        /// Gets or Sets ExpirationMS
        /// </summary>
        [DataMember(Name="expirationMS", EmitDefaultValue=false)]
        public long? ExpirationMS { get; set; }

        /// <summary>
        /// Gets or Sets SignedInventoryJwt
        /// </summary>
        [DataMember(Name="signedInventoryJwt", EmitDefaultValue=false)]
        public string SignedInventoryJwt { get; set; }

        /// <summary>
        /// Gets or Sets Valid
        /// </summary>
        [DataMember(Name="valid", EmitDefaultValue=false)]
        public bool? Valid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolInventoryCacheEntry {\n");
            sb.Append("  ExpirationMS: ").Append(ExpirationMS).Append("\n");
            sb.Append("  SignedInventoryJwt: ").Append(SignedInventoryJwt).Append("\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolInventoryCacheEntry);
        }

        /// <summary>
        /// Returns true if LolInventoryCacheEntry instances are equal
        /// </summary>
        /// <param name="other">Instance of LolInventoryCacheEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolInventoryCacheEntry other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ExpirationMS == other.ExpirationMS ||
                    this.ExpirationMS != null &&
                    this.ExpirationMS.Equals(other.ExpirationMS)
                ) && 
                (
                    this.SignedInventoryJwt == other.SignedInventoryJwt ||
                    this.SignedInventoryJwt != null &&
                    this.SignedInventoryJwt.Equals(other.SignedInventoryJwt)
                ) && 
                (
                    this.Valid == other.Valid ||
                    this.Valid != null &&
                    this.Valid.Equals(other.Valid)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ExpirationMS != null)
                    hash = hash * 59 + this.ExpirationMS.GetHashCode();
                if (this.SignedInventoryJwt != null)
                    hash = hash * 59 + this.SignedInventoryJwt.GetHashCode();
                if (this.Valid != null)
                    hash = hash * 59 + this.Valid.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
