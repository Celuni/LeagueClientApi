/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolItemSetsItemSetBlock
    /// </summary>
    [DataContract]
    public partial class LolItemSetsItemSetBlock :  IEquatable<LolItemSetsItemSetBlock>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolItemSetsItemSetBlock" /> class.
        /// </summary>
        /// <param name="HideIfSummonerSpell">HideIfSummonerSpell.</param>
        /// <param name="Items">Items.</param>
        /// <param name="ShowIfSummonerSpell">ShowIfSummonerSpell.</param>
        /// <param name="Type">Type.</param>
        public LolItemSetsItemSetBlock(string HideIfSummonerSpell = default(string), List<LolItemSetsItemSetItem> Items = default(List<LolItemSetsItemSetItem>), string ShowIfSummonerSpell = default(string), string Type = default(string))
        {
            this.HideIfSummonerSpell = HideIfSummonerSpell;
            this.Items = Items;
            this.ShowIfSummonerSpell = ShowIfSummonerSpell;
            this.Type = Type;
        }
        
        /// <summary>
        /// Gets or Sets HideIfSummonerSpell
        /// </summary>
        [DataMember(Name="hideIfSummonerSpell", EmitDefaultValue=false)]
        public string HideIfSummonerSpell { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<LolItemSetsItemSetItem> Items { get; set; }

        /// <summary>
        /// Gets or Sets ShowIfSummonerSpell
        /// </summary>
        [DataMember(Name="showIfSummonerSpell", EmitDefaultValue=false)]
        public string ShowIfSummonerSpell { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolItemSetsItemSetBlock {\n");
            sb.Append("  HideIfSummonerSpell: ").Append(HideIfSummonerSpell).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  ShowIfSummonerSpell: ").Append(ShowIfSummonerSpell).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolItemSetsItemSetBlock);
        }

        /// <summary>
        /// Returns true if LolItemSetsItemSetBlock instances are equal
        /// </summary>
        /// <param name="other">Instance of LolItemSetsItemSetBlock to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolItemSetsItemSetBlock other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.HideIfSummonerSpell == other.HideIfSummonerSpell ||
                    this.HideIfSummonerSpell != null &&
                    this.HideIfSummonerSpell.Equals(other.HideIfSummonerSpell)
                ) && 
                (
                    this.Items == other.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(other.Items)
                ) && 
                (
                    this.ShowIfSummonerSpell == other.ShowIfSummonerSpell ||
                    this.ShowIfSummonerSpell != null &&
                    this.ShowIfSummonerSpell.Equals(other.ShowIfSummonerSpell)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.HideIfSummonerSpell != null)
                    hash = hash * 59 + this.HideIfSummonerSpell.GetHashCode();
                if (this.Items != null)
                    hash = hash * 59 + this.Items.GetHashCode();
                if (this.ShowIfSummonerSpell != null)
                    hash = hash * 59 + this.ShowIfSummonerSpell.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
