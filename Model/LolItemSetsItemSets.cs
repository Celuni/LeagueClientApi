/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolItemSetsItemSets
    /// </summary>
    [DataContract]
    public partial class LolItemSetsItemSets :  IEquatable<LolItemSetsItemSets>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolItemSetsItemSets" /> class.
        /// </summary>
        /// <param name="AccountId">AccountId.</param>
        /// <param name="ItemSets">ItemSets.</param>
        /// <param name="Timestamp">Timestamp.</param>
        public LolItemSetsItemSets(long? AccountId = default(long?), List<LolItemSetsItemSet> ItemSets = default(List<LolItemSetsItemSet>), long? Timestamp = default(long?))
        {
            this.AccountId = AccountId;
            this.ItemSets = ItemSets;
            this.Timestamp = Timestamp;
        }
        
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public long? AccountId { get; set; }

        /// <summary>
        /// Gets or Sets ItemSets
        /// </summary>
        [DataMember(Name="itemSets", EmitDefaultValue=false)]
        public List<LolItemSetsItemSet> ItemSets { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public long? Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolItemSetsItemSets {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ItemSets: ").Append(ItemSets).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolItemSetsItemSets);
        }

        /// <summary>
        /// Returns true if LolItemSetsItemSets instances are equal
        /// </summary>
        /// <param name="other">Instance of LolItemSetsItemSets to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolItemSetsItemSets other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.ItemSets == other.ItemSets ||
                    this.ItemSets != null &&
                    this.ItemSets.SequenceEqual(other.ItemSets)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.ItemSets != null)
                    hash = hash * 59 + this.ItemSets.GetHashCode();
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
