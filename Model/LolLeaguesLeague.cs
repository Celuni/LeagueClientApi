/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLeaguesLeague
    /// </summary>
    [DataContract]
    public partial class LolLeaguesLeague :  IEquatable<LolLeaguesLeague>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLeaguesLeague" /> class.
        /// </summary>
        /// <param name="ChallengerNextPromotionUpdateInMs">ChallengerNextPromotionUpdateInMs.</param>
        /// <param name="LeagueName">LeagueName.</param>
        /// <param name="LeagueTier">LeagueTier.</param>
        /// <param name="Leagues">Leagues.</param>
        /// <param name="Name">Name.</param>
        /// <param name="QueueType">QueueType.</param>
        /// <param name="RequesterLeagueRank">RequesterLeagueRank.</param>
        public LolLeaguesLeague(long? ChallengerNextPromotionUpdateInMs = default(long?), string LeagueName = default(string), LolLeaguesLeagueTier LeagueTier = default(LolLeaguesLeagueTier), List<LolLeaguesLeagueDivision> Leagues = default(List<LolLeaguesLeagueDivision>), string Name = default(string), LolLeaguesLeagueQueueType QueueType = default(LolLeaguesLeagueQueueType), LolLeaguesLeagueRank RequesterLeagueRank = default(LolLeaguesLeagueRank))
        {
            this.ChallengerNextPromotionUpdateInMs = ChallengerNextPromotionUpdateInMs;
            this.LeagueName = LeagueName;
            this.LeagueTier = LeagueTier;
            this.Leagues = Leagues;
            this.Name = Name;
            this.QueueType = QueueType;
            this.RequesterLeagueRank = RequesterLeagueRank;
        }
        
        /// <summary>
        /// Gets or Sets ChallengerNextPromotionUpdateInMs
        /// </summary>
        [DataMember(Name="challengerNextPromotionUpdateInMs", EmitDefaultValue=false)]
        public long? ChallengerNextPromotionUpdateInMs { get; set; }

        /// <summary>
        /// Gets or Sets LeagueName
        /// </summary>
        [DataMember(Name="leagueName", EmitDefaultValue=false)]
        public string LeagueName { get; set; }

        /// <summary>
        /// Gets or Sets LeagueTier
        /// </summary>
        [DataMember(Name="leagueTier", EmitDefaultValue=false)]
        public LolLeaguesLeagueTier LeagueTier { get; set; }

        /// <summary>
        /// Gets or Sets Leagues
        /// </summary>
        [DataMember(Name="leagues", EmitDefaultValue=false)]
        public List<LolLeaguesLeagueDivision> Leagues { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets QueueType
        /// </summary>
        [DataMember(Name="queueType", EmitDefaultValue=false)]
        public LolLeaguesLeagueQueueType QueueType { get; set; }

        /// <summary>
        /// Gets or Sets RequesterLeagueRank
        /// </summary>
        [DataMember(Name="requesterLeagueRank", EmitDefaultValue=false)]
        public LolLeaguesLeagueRank RequesterLeagueRank { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLeaguesLeague {\n");
            sb.Append("  ChallengerNextPromotionUpdateInMs: ").Append(ChallengerNextPromotionUpdateInMs).Append("\n");
            sb.Append("  LeagueName: ").Append(LeagueName).Append("\n");
            sb.Append("  LeagueTier: ").Append(LeagueTier).Append("\n");
            sb.Append("  Leagues: ").Append(Leagues).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  QueueType: ").Append(QueueType).Append("\n");
            sb.Append("  RequesterLeagueRank: ").Append(RequesterLeagueRank).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLeaguesLeague);
        }

        /// <summary>
        /// Returns true if LolLeaguesLeague instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLeaguesLeague to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLeaguesLeague other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ChallengerNextPromotionUpdateInMs == other.ChallengerNextPromotionUpdateInMs ||
                    this.ChallengerNextPromotionUpdateInMs != null &&
                    this.ChallengerNextPromotionUpdateInMs.Equals(other.ChallengerNextPromotionUpdateInMs)
                ) && 
                (
                    this.LeagueName == other.LeagueName ||
                    this.LeagueName != null &&
                    this.LeagueName.Equals(other.LeagueName)
                ) && 
                (
                    this.LeagueTier == other.LeagueTier ||
                    this.LeagueTier != null &&
                    this.LeagueTier.Equals(other.LeagueTier)
                ) && 
                (
                    this.Leagues == other.Leagues ||
                    this.Leagues != null &&
                    this.Leagues.SequenceEqual(other.Leagues)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.QueueType == other.QueueType ||
                    this.QueueType != null &&
                    this.QueueType.Equals(other.QueueType)
                ) && 
                (
                    this.RequesterLeagueRank == other.RequesterLeagueRank ||
                    this.RequesterLeagueRank != null &&
                    this.RequesterLeagueRank.Equals(other.RequesterLeagueRank)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ChallengerNextPromotionUpdateInMs != null)
                    hash = hash * 59 + this.ChallengerNextPromotionUpdateInMs.GetHashCode();
                if (this.LeagueName != null)
                    hash = hash * 59 + this.LeagueName.GetHashCode();
                if (this.LeagueTier != null)
                    hash = hash * 59 + this.LeagueTier.GetHashCode();
                if (this.Leagues != null)
                    hash = hash * 59 + this.Leagues.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.QueueType != null)
                    hash = hash * 59 + this.QueueType.GetHashCode();
                if (this.RequesterLeagueRank != null)
                    hash = hash * 59 + this.RequesterLeagueRank.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
