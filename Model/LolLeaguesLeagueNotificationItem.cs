/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLeaguesLeagueNotificationItem
    /// </summary>
    [DataContract]
    public partial class LolLeaguesLeagueNotificationItem :  IEquatable<LolLeaguesLeagueNotificationItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLeaguesLeagueNotificationItem" /> class.
        /// </summary>
        /// <param name="DemotionWarning">DemotionWarning.</param>
        /// <param name="DisplayDecayWarning">DisplayDecayWarning.</param>
        /// <param name="Emblems">Emblems.</param>
        /// <param name="GameId">GameId.</param>
        /// <param name="Inactive">Inactive.</param>
        /// <param name="InactivityStatus">InactivityStatus.</param>
        /// <param name="LastPlayed">LastPlayed.</param>
        /// <param name="LeagueName">LeagueName.</param>
        /// <param name="LeaguePointsDelta">LeaguePointsDelta.</param>
        /// <param name="Losses">Losses.</param>
        /// <param name="MinGamesForSeeding">MinGamesForSeeding.</param>
        /// <param name="MiniseriesResults">MiniseriesResults.</param>
        /// <param name="MiniseriesTimeLeftToPlayMillis">MiniseriesTimeLeftToPlayMillis.</param>
        /// <param name="MiniseriesWins">MiniseriesWins.</param>
        /// <param name="NotifyReason">NotifyReason.</param>
        /// <param name="PlayerOrTeamId">PlayerOrTeamId.</param>
        /// <param name="PlayerOrTeamName">PlayerOrTeamName.</param>
        /// <param name="Points">Points.</param>
        /// <param name="PreviousPosition">PreviousPosition.</param>
        /// <param name="QueueType">QueueType.</param>
        /// <param name="Rank">Rank.</param>
        /// <param name="SeasonEndApexPosition">SeasonEndApexPosition.</param>
        /// <param name="SeasonEndRank">SeasonEndRank.</param>
        /// <param name="SeasonEndTier">SeasonEndTier.</param>
        /// <param name="Tier">Tier.</param>
        /// <param name="TimeLastDecayMessageShown">TimeLastDecayMessageShown.</param>
        /// <param name="TimeUntilDecay">TimeUntilDecay.</param>
        /// <param name="TimeUntilInactivityStatusChanges">TimeUntilInactivityStatusChanges.</param>
        /// <param name="TotalPlayed">TotalPlayed.</param>
        /// <param name="Wins">Wins.</param>
        public LolLeaguesLeagueNotificationItem(long? DemotionWarning = default(long?), bool? DisplayDecayWarning = default(bool?), List<LolLeaguesLeagueEmblem> Emblems = default(List<LolLeaguesLeagueEmblem>), long? GameId = default(long?), bool? Inactive = default(bool?), string InactivityStatus = default(string), long? LastPlayed = default(long?), string LeagueName = default(string), long? LeaguePointsDelta = default(long?), long? Losses = default(long?), long? MinGamesForSeeding = default(long?), List<LolLeaguesMiniseries> MiniseriesResults = default(List<LolLeaguesMiniseries>), long? MiniseriesTimeLeftToPlayMillis = default(long?), long? MiniseriesWins = default(long?), string NotifyReason = default(string), string PlayerOrTeamId = default(string), string PlayerOrTeamName = default(string), long? Points = default(long?), long? PreviousPosition = default(long?), string QueueType = default(string), string Rank = default(string), long? SeasonEndApexPosition = default(long?), string SeasonEndRank = default(string), string SeasonEndTier = default(string), string Tier = default(string), long? TimeLastDecayMessageShown = default(long?), long? TimeUntilDecay = default(long?), long? TimeUntilInactivityStatusChanges = default(long?), long? TotalPlayed = default(long?), long? Wins = default(long?))
        {
            this.DemotionWarning = DemotionWarning;
            this.DisplayDecayWarning = DisplayDecayWarning;
            this.Emblems = Emblems;
            this.GameId = GameId;
            this.Inactive = Inactive;
            this.InactivityStatus = InactivityStatus;
            this.LastPlayed = LastPlayed;
            this.LeagueName = LeagueName;
            this.LeaguePointsDelta = LeaguePointsDelta;
            this.Losses = Losses;
            this.MinGamesForSeeding = MinGamesForSeeding;
            this.MiniseriesResults = MiniseriesResults;
            this.MiniseriesTimeLeftToPlayMillis = MiniseriesTimeLeftToPlayMillis;
            this.MiniseriesWins = MiniseriesWins;
            this.NotifyReason = NotifyReason;
            this.PlayerOrTeamId = PlayerOrTeamId;
            this.PlayerOrTeamName = PlayerOrTeamName;
            this.Points = Points;
            this.PreviousPosition = PreviousPosition;
            this.QueueType = QueueType;
            this.Rank = Rank;
            this.SeasonEndApexPosition = SeasonEndApexPosition;
            this.SeasonEndRank = SeasonEndRank;
            this.SeasonEndTier = SeasonEndTier;
            this.Tier = Tier;
            this.TimeLastDecayMessageShown = TimeLastDecayMessageShown;
            this.TimeUntilDecay = TimeUntilDecay;
            this.TimeUntilInactivityStatusChanges = TimeUntilInactivityStatusChanges;
            this.TotalPlayed = TotalPlayed;
            this.Wins = Wins;
        }
        
        /// <summary>
        /// Gets or Sets DemotionWarning
        /// </summary>
        [DataMember(Name="demotionWarning", EmitDefaultValue=false)]
        public long? DemotionWarning { get; set; }

        /// <summary>
        /// Gets or Sets DisplayDecayWarning
        /// </summary>
        [DataMember(Name="displayDecayWarning", EmitDefaultValue=false)]
        public bool? DisplayDecayWarning { get; set; }

        /// <summary>
        /// Gets or Sets Emblems
        /// </summary>
        [DataMember(Name="emblems", EmitDefaultValue=false)]
        public List<LolLeaguesLeagueEmblem> Emblems { get; set; }

        /// <summary>
        /// Gets or Sets GameId
        /// </summary>
        [DataMember(Name="gameId", EmitDefaultValue=false)]
        public long? GameId { get; set; }

        /// <summary>
        /// Gets or Sets Inactive
        /// </summary>
        [DataMember(Name="inactive", EmitDefaultValue=false)]
        public bool? Inactive { get; set; }

        /// <summary>
        /// Gets or Sets InactivityStatus
        /// </summary>
        [DataMember(Name="inactivityStatus", EmitDefaultValue=false)]
        public string InactivityStatus { get; set; }

        /// <summary>
        /// Gets or Sets LastPlayed
        /// </summary>
        [DataMember(Name="lastPlayed", EmitDefaultValue=false)]
        public long? LastPlayed { get; set; }

        /// <summary>
        /// Gets or Sets LeagueName
        /// </summary>
        [DataMember(Name="leagueName", EmitDefaultValue=false)]
        public string LeagueName { get; set; }

        /// <summary>
        /// Gets or Sets LeaguePointsDelta
        /// </summary>
        [DataMember(Name="leaguePointsDelta", EmitDefaultValue=false)]
        public long? LeaguePointsDelta { get; set; }

        /// <summary>
        /// Gets or Sets Losses
        /// </summary>
        [DataMember(Name="losses", EmitDefaultValue=false)]
        public long? Losses { get; set; }

        /// <summary>
        /// Gets or Sets MinGamesForSeeding
        /// </summary>
        [DataMember(Name="minGamesForSeeding", EmitDefaultValue=false)]
        public long? MinGamesForSeeding { get; set; }

        /// <summary>
        /// Gets or Sets MiniseriesResults
        /// </summary>
        [DataMember(Name="miniseriesResults", EmitDefaultValue=false)]
        public List<LolLeaguesMiniseries> MiniseriesResults { get; set; }

        /// <summary>
        /// Gets or Sets MiniseriesTimeLeftToPlayMillis
        /// </summary>
        [DataMember(Name="miniseriesTimeLeftToPlayMillis", EmitDefaultValue=false)]
        public long? MiniseriesTimeLeftToPlayMillis { get; set; }

        /// <summary>
        /// Gets or Sets MiniseriesWins
        /// </summary>
        [DataMember(Name="miniseriesWins", EmitDefaultValue=false)]
        public long? MiniseriesWins { get; set; }

        /// <summary>
        /// Gets or Sets NotifyReason
        /// </summary>
        [DataMember(Name="notifyReason", EmitDefaultValue=false)]
        public string NotifyReason { get; set; }

        /// <summary>
        /// Gets or Sets PlayerOrTeamId
        /// </summary>
        [DataMember(Name="playerOrTeamId", EmitDefaultValue=false)]
        public string PlayerOrTeamId { get; set; }

        /// <summary>
        /// Gets or Sets PlayerOrTeamName
        /// </summary>
        [DataMember(Name="playerOrTeamName", EmitDefaultValue=false)]
        public string PlayerOrTeamName { get; set; }

        /// <summary>
        /// Gets or Sets Points
        /// </summary>
        [DataMember(Name="points", EmitDefaultValue=false)]
        public long? Points { get; set; }

        /// <summary>
        /// Gets or Sets PreviousPosition
        /// </summary>
        [DataMember(Name="previousPosition", EmitDefaultValue=false)]
        public long? PreviousPosition { get; set; }

        /// <summary>
        /// Gets or Sets QueueType
        /// </summary>
        [DataMember(Name="queueType", EmitDefaultValue=false)]
        public string QueueType { get; set; }

        /// <summary>
        /// Gets or Sets Rank
        /// </summary>
        [DataMember(Name="rank", EmitDefaultValue=false)]
        public string Rank { get; set; }

        /// <summary>
        /// Gets or Sets SeasonEndApexPosition
        /// </summary>
        [DataMember(Name="seasonEndApexPosition", EmitDefaultValue=false)]
        public long? SeasonEndApexPosition { get; set; }

        /// <summary>
        /// Gets or Sets SeasonEndRank
        /// </summary>
        [DataMember(Name="seasonEndRank", EmitDefaultValue=false)]
        public string SeasonEndRank { get; set; }

        /// <summary>
        /// Gets or Sets SeasonEndTier
        /// </summary>
        [DataMember(Name="seasonEndTier", EmitDefaultValue=false)]
        public string SeasonEndTier { get; set; }

        /// <summary>
        /// Gets or Sets Tier
        /// </summary>
        [DataMember(Name="tier", EmitDefaultValue=false)]
        public string Tier { get; set; }

        /// <summary>
        /// Gets or Sets TimeLastDecayMessageShown
        /// </summary>
        [DataMember(Name="timeLastDecayMessageShown", EmitDefaultValue=false)]
        public long? TimeLastDecayMessageShown { get; set; }

        /// <summary>
        /// Gets or Sets TimeUntilDecay
        /// </summary>
        [DataMember(Name="timeUntilDecay", EmitDefaultValue=false)]
        public long? TimeUntilDecay { get; set; }

        /// <summary>
        /// Gets or Sets TimeUntilInactivityStatusChanges
        /// </summary>
        [DataMember(Name="timeUntilInactivityStatusChanges", EmitDefaultValue=false)]
        public long? TimeUntilInactivityStatusChanges { get; set; }

        /// <summary>
        /// Gets or Sets TotalPlayed
        /// </summary>
        [DataMember(Name="totalPlayed", EmitDefaultValue=false)]
        public long? TotalPlayed { get; set; }

        /// <summary>
        /// Gets or Sets Wins
        /// </summary>
        [DataMember(Name="wins", EmitDefaultValue=false)]
        public long? Wins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLeaguesLeagueNotificationItem {\n");
            sb.Append("  DemotionWarning: ").Append(DemotionWarning).Append("\n");
            sb.Append("  DisplayDecayWarning: ").Append(DisplayDecayWarning).Append("\n");
            sb.Append("  Emblems: ").Append(Emblems).Append("\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  Inactive: ").Append(Inactive).Append("\n");
            sb.Append("  InactivityStatus: ").Append(InactivityStatus).Append("\n");
            sb.Append("  LastPlayed: ").Append(LastPlayed).Append("\n");
            sb.Append("  LeagueName: ").Append(LeagueName).Append("\n");
            sb.Append("  LeaguePointsDelta: ").Append(LeaguePointsDelta).Append("\n");
            sb.Append("  Losses: ").Append(Losses).Append("\n");
            sb.Append("  MinGamesForSeeding: ").Append(MinGamesForSeeding).Append("\n");
            sb.Append("  MiniseriesResults: ").Append(MiniseriesResults).Append("\n");
            sb.Append("  MiniseriesTimeLeftToPlayMillis: ").Append(MiniseriesTimeLeftToPlayMillis).Append("\n");
            sb.Append("  MiniseriesWins: ").Append(MiniseriesWins).Append("\n");
            sb.Append("  NotifyReason: ").Append(NotifyReason).Append("\n");
            sb.Append("  PlayerOrTeamId: ").Append(PlayerOrTeamId).Append("\n");
            sb.Append("  PlayerOrTeamName: ").Append(PlayerOrTeamName).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  PreviousPosition: ").Append(PreviousPosition).Append("\n");
            sb.Append("  QueueType: ").Append(QueueType).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("  SeasonEndApexPosition: ").Append(SeasonEndApexPosition).Append("\n");
            sb.Append("  SeasonEndRank: ").Append(SeasonEndRank).Append("\n");
            sb.Append("  SeasonEndTier: ").Append(SeasonEndTier).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  TimeLastDecayMessageShown: ").Append(TimeLastDecayMessageShown).Append("\n");
            sb.Append("  TimeUntilDecay: ").Append(TimeUntilDecay).Append("\n");
            sb.Append("  TimeUntilInactivityStatusChanges: ").Append(TimeUntilInactivityStatusChanges).Append("\n");
            sb.Append("  TotalPlayed: ").Append(TotalPlayed).Append("\n");
            sb.Append("  Wins: ").Append(Wins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLeaguesLeagueNotificationItem);
        }

        /// <summary>
        /// Returns true if LolLeaguesLeagueNotificationItem instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLeaguesLeagueNotificationItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLeaguesLeagueNotificationItem other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DemotionWarning == other.DemotionWarning ||
                    this.DemotionWarning != null &&
                    this.DemotionWarning.Equals(other.DemotionWarning)
                ) && 
                (
                    this.DisplayDecayWarning == other.DisplayDecayWarning ||
                    this.DisplayDecayWarning != null &&
                    this.DisplayDecayWarning.Equals(other.DisplayDecayWarning)
                ) && 
                (
                    this.Emblems == other.Emblems ||
                    this.Emblems != null &&
                    this.Emblems.SequenceEqual(other.Emblems)
                ) && 
                (
                    this.GameId == other.GameId ||
                    this.GameId != null &&
                    this.GameId.Equals(other.GameId)
                ) && 
                (
                    this.Inactive == other.Inactive ||
                    this.Inactive != null &&
                    this.Inactive.Equals(other.Inactive)
                ) && 
                (
                    this.InactivityStatus == other.InactivityStatus ||
                    this.InactivityStatus != null &&
                    this.InactivityStatus.Equals(other.InactivityStatus)
                ) && 
                (
                    this.LastPlayed == other.LastPlayed ||
                    this.LastPlayed != null &&
                    this.LastPlayed.Equals(other.LastPlayed)
                ) && 
                (
                    this.LeagueName == other.LeagueName ||
                    this.LeagueName != null &&
                    this.LeagueName.Equals(other.LeagueName)
                ) && 
                (
                    this.LeaguePointsDelta == other.LeaguePointsDelta ||
                    this.LeaguePointsDelta != null &&
                    this.LeaguePointsDelta.Equals(other.LeaguePointsDelta)
                ) && 
                (
                    this.Losses == other.Losses ||
                    this.Losses != null &&
                    this.Losses.Equals(other.Losses)
                ) && 
                (
                    this.MinGamesForSeeding == other.MinGamesForSeeding ||
                    this.MinGamesForSeeding != null &&
                    this.MinGamesForSeeding.Equals(other.MinGamesForSeeding)
                ) && 
                (
                    this.MiniseriesResults == other.MiniseriesResults ||
                    this.MiniseriesResults != null &&
                    this.MiniseriesResults.SequenceEqual(other.MiniseriesResults)
                ) && 
                (
                    this.MiniseriesTimeLeftToPlayMillis == other.MiniseriesTimeLeftToPlayMillis ||
                    this.MiniseriesTimeLeftToPlayMillis != null &&
                    this.MiniseriesTimeLeftToPlayMillis.Equals(other.MiniseriesTimeLeftToPlayMillis)
                ) && 
                (
                    this.MiniseriesWins == other.MiniseriesWins ||
                    this.MiniseriesWins != null &&
                    this.MiniseriesWins.Equals(other.MiniseriesWins)
                ) && 
                (
                    this.NotifyReason == other.NotifyReason ||
                    this.NotifyReason != null &&
                    this.NotifyReason.Equals(other.NotifyReason)
                ) && 
                (
                    this.PlayerOrTeamId == other.PlayerOrTeamId ||
                    this.PlayerOrTeamId != null &&
                    this.PlayerOrTeamId.Equals(other.PlayerOrTeamId)
                ) && 
                (
                    this.PlayerOrTeamName == other.PlayerOrTeamName ||
                    this.PlayerOrTeamName != null &&
                    this.PlayerOrTeamName.Equals(other.PlayerOrTeamName)
                ) && 
                (
                    this.Points == other.Points ||
                    this.Points != null &&
                    this.Points.Equals(other.Points)
                ) && 
                (
                    this.PreviousPosition == other.PreviousPosition ||
                    this.PreviousPosition != null &&
                    this.PreviousPosition.Equals(other.PreviousPosition)
                ) && 
                (
                    this.QueueType == other.QueueType ||
                    this.QueueType != null &&
                    this.QueueType.Equals(other.QueueType)
                ) && 
                (
                    this.Rank == other.Rank ||
                    this.Rank != null &&
                    this.Rank.Equals(other.Rank)
                ) && 
                (
                    this.SeasonEndApexPosition == other.SeasonEndApexPosition ||
                    this.SeasonEndApexPosition != null &&
                    this.SeasonEndApexPosition.Equals(other.SeasonEndApexPosition)
                ) && 
                (
                    this.SeasonEndRank == other.SeasonEndRank ||
                    this.SeasonEndRank != null &&
                    this.SeasonEndRank.Equals(other.SeasonEndRank)
                ) && 
                (
                    this.SeasonEndTier == other.SeasonEndTier ||
                    this.SeasonEndTier != null &&
                    this.SeasonEndTier.Equals(other.SeasonEndTier)
                ) && 
                (
                    this.Tier == other.Tier ||
                    this.Tier != null &&
                    this.Tier.Equals(other.Tier)
                ) && 
                (
                    this.TimeLastDecayMessageShown == other.TimeLastDecayMessageShown ||
                    this.TimeLastDecayMessageShown != null &&
                    this.TimeLastDecayMessageShown.Equals(other.TimeLastDecayMessageShown)
                ) && 
                (
                    this.TimeUntilDecay == other.TimeUntilDecay ||
                    this.TimeUntilDecay != null &&
                    this.TimeUntilDecay.Equals(other.TimeUntilDecay)
                ) && 
                (
                    this.TimeUntilInactivityStatusChanges == other.TimeUntilInactivityStatusChanges ||
                    this.TimeUntilInactivityStatusChanges != null &&
                    this.TimeUntilInactivityStatusChanges.Equals(other.TimeUntilInactivityStatusChanges)
                ) && 
                (
                    this.TotalPlayed == other.TotalPlayed ||
                    this.TotalPlayed != null &&
                    this.TotalPlayed.Equals(other.TotalPlayed)
                ) && 
                (
                    this.Wins == other.Wins ||
                    this.Wins != null &&
                    this.Wins.Equals(other.Wins)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DemotionWarning != null)
                    hash = hash * 59 + this.DemotionWarning.GetHashCode();
                if (this.DisplayDecayWarning != null)
                    hash = hash * 59 + this.DisplayDecayWarning.GetHashCode();
                if (this.Emblems != null)
                    hash = hash * 59 + this.Emblems.GetHashCode();
                if (this.GameId != null)
                    hash = hash * 59 + this.GameId.GetHashCode();
                if (this.Inactive != null)
                    hash = hash * 59 + this.Inactive.GetHashCode();
                if (this.InactivityStatus != null)
                    hash = hash * 59 + this.InactivityStatus.GetHashCode();
                if (this.LastPlayed != null)
                    hash = hash * 59 + this.LastPlayed.GetHashCode();
                if (this.LeagueName != null)
                    hash = hash * 59 + this.LeagueName.GetHashCode();
                if (this.LeaguePointsDelta != null)
                    hash = hash * 59 + this.LeaguePointsDelta.GetHashCode();
                if (this.Losses != null)
                    hash = hash * 59 + this.Losses.GetHashCode();
                if (this.MinGamesForSeeding != null)
                    hash = hash * 59 + this.MinGamesForSeeding.GetHashCode();
                if (this.MiniseriesResults != null)
                    hash = hash * 59 + this.MiniseriesResults.GetHashCode();
                if (this.MiniseriesTimeLeftToPlayMillis != null)
                    hash = hash * 59 + this.MiniseriesTimeLeftToPlayMillis.GetHashCode();
                if (this.MiniseriesWins != null)
                    hash = hash * 59 + this.MiniseriesWins.GetHashCode();
                if (this.NotifyReason != null)
                    hash = hash * 59 + this.NotifyReason.GetHashCode();
                if (this.PlayerOrTeamId != null)
                    hash = hash * 59 + this.PlayerOrTeamId.GetHashCode();
                if (this.PlayerOrTeamName != null)
                    hash = hash * 59 + this.PlayerOrTeamName.GetHashCode();
                if (this.Points != null)
                    hash = hash * 59 + this.Points.GetHashCode();
                if (this.PreviousPosition != null)
                    hash = hash * 59 + this.PreviousPosition.GetHashCode();
                if (this.QueueType != null)
                    hash = hash * 59 + this.QueueType.GetHashCode();
                if (this.Rank != null)
                    hash = hash * 59 + this.Rank.GetHashCode();
                if (this.SeasonEndApexPosition != null)
                    hash = hash * 59 + this.SeasonEndApexPosition.GetHashCode();
                if (this.SeasonEndRank != null)
                    hash = hash * 59 + this.SeasonEndRank.GetHashCode();
                if (this.SeasonEndTier != null)
                    hash = hash * 59 + this.SeasonEndTier.GetHashCode();
                if (this.Tier != null)
                    hash = hash * 59 + this.Tier.GetHashCode();
                if (this.TimeLastDecayMessageShown != null)
                    hash = hash * 59 + this.TimeLastDecayMessageShown.GetHashCode();
                if (this.TimeUntilDecay != null)
                    hash = hash * 59 + this.TimeUntilDecay.GetHashCode();
                if (this.TimeUntilInactivityStatusChanges != null)
                    hash = hash * 59 + this.TimeUntilInactivityStatusChanges.GetHashCode();
                if (this.TotalPlayed != null)
                    hash = hash * 59 + this.TotalPlayed.GetHashCode();
                if (this.Wins != null)
                    hash = hash * 59 + this.Wins.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
