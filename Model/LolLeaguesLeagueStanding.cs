/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLeaguesLeagueStanding
    /// </summary>
    [DataContract]
    public partial class LolLeaguesLeagueStanding :  IEquatable<LolLeaguesLeagueStanding>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLeaguesLeagueStanding" /> class.
        /// </summary>
        /// <param name="ApexDaysUntilDecay">ApexDaysUntilDecay.</param>
        /// <param name="Emblems">Emblems.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Inactive">Inactive.</param>
        /// <param name="InactivityStatus">InactivityStatus.</param>
        /// <param name="Losses">Losses.</param>
        /// <param name="MiniseriesResults">MiniseriesResults.</param>
        /// <param name="Name">Name.</param>
        /// <param name="PendingDemotion">PendingDemotion.</param>
        /// <param name="PendingPromotion">PendingPromotion.</param>
        /// <param name="Points">Points.</param>
        /// <param name="Position">Position.</param>
        /// <param name="PositionDelta">PositionDelta.</param>
        /// <param name="PreviousPosition">PreviousPosition.</param>
        /// <param name="Wins">Wins.</param>
        public LolLeaguesLeagueStanding(long? ApexDaysUntilDecay = default(long?), List<LolLeaguesLeagueEmblem> Emblems = default(List<LolLeaguesLeagueEmblem>), string Id = default(string), bool? Inactive = default(bool?), string InactivityStatus = default(string), long? Losses = default(long?), List<LolLeaguesMiniseries> MiniseriesResults = default(List<LolLeaguesMiniseries>), string Name = default(string), bool? PendingDemotion = default(bool?), bool? PendingPromotion = default(bool?), long? Points = default(long?), long? Position = default(long?), long? PositionDelta = default(long?), long? PreviousPosition = default(long?), long? Wins = default(long?))
        {
            this.ApexDaysUntilDecay = ApexDaysUntilDecay;
            this.Emblems = Emblems;
            this.Id = Id;
            this.Inactive = Inactive;
            this.InactivityStatus = InactivityStatus;
            this.Losses = Losses;
            this.MiniseriesResults = MiniseriesResults;
            this.Name = Name;
            this.PendingDemotion = PendingDemotion;
            this.PendingPromotion = PendingPromotion;
            this.Points = Points;
            this.Position = Position;
            this.PositionDelta = PositionDelta;
            this.PreviousPosition = PreviousPosition;
            this.Wins = Wins;
        }
        
        /// <summary>
        /// Gets or Sets ApexDaysUntilDecay
        /// </summary>
        [DataMember(Name="apexDaysUntilDecay", EmitDefaultValue=false)]
        public long? ApexDaysUntilDecay { get; set; }

        /// <summary>
        /// Gets or Sets Emblems
        /// </summary>
        [DataMember(Name="emblems", EmitDefaultValue=false)]
        public List<LolLeaguesLeagueEmblem> Emblems { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Inactive
        /// </summary>
        [DataMember(Name="inactive", EmitDefaultValue=false)]
        public bool? Inactive { get; set; }

        /// <summary>
        /// Gets or Sets InactivityStatus
        /// </summary>
        [DataMember(Name="inactivityStatus", EmitDefaultValue=false)]
        public string InactivityStatus { get; set; }

        /// <summary>
        /// Gets or Sets Losses
        /// </summary>
        [DataMember(Name="losses", EmitDefaultValue=false)]
        public long? Losses { get; set; }

        /// <summary>
        /// Gets or Sets MiniseriesResults
        /// </summary>
        [DataMember(Name="miniseriesResults", EmitDefaultValue=false)]
        public List<LolLeaguesMiniseries> MiniseriesResults { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PendingDemotion
        /// </summary>
        [DataMember(Name="pendingDemotion", EmitDefaultValue=false)]
        public bool? PendingDemotion { get; set; }

        /// <summary>
        /// Gets or Sets PendingPromotion
        /// </summary>
        [DataMember(Name="pendingPromotion", EmitDefaultValue=false)]
        public bool? PendingPromotion { get; set; }

        /// <summary>
        /// Gets or Sets Points
        /// </summary>
        [DataMember(Name="points", EmitDefaultValue=false)]
        public long? Points { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public long? Position { get; set; }

        /// <summary>
        /// Gets or Sets PositionDelta
        /// </summary>
        [DataMember(Name="positionDelta", EmitDefaultValue=false)]
        public long? PositionDelta { get; set; }

        /// <summary>
        /// Gets or Sets PreviousPosition
        /// </summary>
        [DataMember(Name="previousPosition", EmitDefaultValue=false)]
        public long? PreviousPosition { get; set; }

        /// <summary>
        /// Gets or Sets Wins
        /// </summary>
        [DataMember(Name="wins", EmitDefaultValue=false)]
        public long? Wins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLeaguesLeagueStanding {\n");
            sb.Append("  ApexDaysUntilDecay: ").Append(ApexDaysUntilDecay).Append("\n");
            sb.Append("  Emblems: ").Append(Emblems).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Inactive: ").Append(Inactive).Append("\n");
            sb.Append("  InactivityStatus: ").Append(InactivityStatus).Append("\n");
            sb.Append("  Losses: ").Append(Losses).Append("\n");
            sb.Append("  MiniseriesResults: ").Append(MiniseriesResults).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PendingDemotion: ").Append(PendingDemotion).Append("\n");
            sb.Append("  PendingPromotion: ").Append(PendingPromotion).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  PositionDelta: ").Append(PositionDelta).Append("\n");
            sb.Append("  PreviousPosition: ").Append(PreviousPosition).Append("\n");
            sb.Append("  Wins: ").Append(Wins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLeaguesLeagueStanding);
        }

        /// <summary>
        /// Returns true if LolLeaguesLeagueStanding instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLeaguesLeagueStanding to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLeaguesLeagueStanding other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ApexDaysUntilDecay == other.ApexDaysUntilDecay ||
                    this.ApexDaysUntilDecay != null &&
                    this.ApexDaysUntilDecay.Equals(other.ApexDaysUntilDecay)
                ) && 
                (
                    this.Emblems == other.Emblems ||
                    this.Emblems != null &&
                    this.Emblems.SequenceEqual(other.Emblems)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Inactive == other.Inactive ||
                    this.Inactive != null &&
                    this.Inactive.Equals(other.Inactive)
                ) && 
                (
                    this.InactivityStatus == other.InactivityStatus ||
                    this.InactivityStatus != null &&
                    this.InactivityStatus.Equals(other.InactivityStatus)
                ) && 
                (
                    this.Losses == other.Losses ||
                    this.Losses != null &&
                    this.Losses.Equals(other.Losses)
                ) && 
                (
                    this.MiniseriesResults == other.MiniseriesResults ||
                    this.MiniseriesResults != null &&
                    this.MiniseriesResults.SequenceEqual(other.MiniseriesResults)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.PendingDemotion == other.PendingDemotion ||
                    this.PendingDemotion != null &&
                    this.PendingDemotion.Equals(other.PendingDemotion)
                ) && 
                (
                    this.PendingPromotion == other.PendingPromotion ||
                    this.PendingPromotion != null &&
                    this.PendingPromotion.Equals(other.PendingPromotion)
                ) && 
                (
                    this.Points == other.Points ||
                    this.Points != null &&
                    this.Points.Equals(other.Points)
                ) && 
                (
                    this.Position == other.Position ||
                    this.Position != null &&
                    this.Position.Equals(other.Position)
                ) && 
                (
                    this.PositionDelta == other.PositionDelta ||
                    this.PositionDelta != null &&
                    this.PositionDelta.Equals(other.PositionDelta)
                ) && 
                (
                    this.PreviousPosition == other.PreviousPosition ||
                    this.PreviousPosition != null &&
                    this.PreviousPosition.Equals(other.PreviousPosition)
                ) && 
                (
                    this.Wins == other.Wins ||
                    this.Wins != null &&
                    this.Wins.Equals(other.Wins)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ApexDaysUntilDecay != null)
                    hash = hash * 59 + this.ApexDaysUntilDecay.GetHashCode();
                if (this.Emblems != null)
                    hash = hash * 59 + this.Emblems.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Inactive != null)
                    hash = hash * 59 + this.Inactive.GetHashCode();
                if (this.InactivityStatus != null)
                    hash = hash * 59 + this.InactivityStatus.GetHashCode();
                if (this.Losses != null)
                    hash = hash * 59 + this.Losses.GetHashCode();
                if (this.MiniseriesResults != null)
                    hash = hash * 59 + this.MiniseriesResults.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.PendingDemotion != null)
                    hash = hash * 59 + this.PendingDemotion.GetHashCode();
                if (this.PendingPromotion != null)
                    hash = hash * 59 + this.PendingPromotion.GetHashCode();
                if (this.Points != null)
                    hash = hash * 59 + this.Points.GetHashCode();
                if (this.Position != null)
                    hash = hash * 59 + this.Position.GetHashCode();
                if (this.PositionDelta != null)
                    hash = hash * 59 + this.PositionDelta.GetHashCode();
                if (this.PreviousPosition != null)
                    hash = hash * 59 + this.PreviousPosition.GetHashCode();
                if (this.Wins != null)
                    hash = hash * 59 + this.Wins.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
