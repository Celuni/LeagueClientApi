/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLoadoutsInventoryItemDTO
    /// </summary>
    [DataContract]
    public partial class LolLoadoutsInventoryItemDTO :  IEquatable<LolLoadoutsInventoryItemDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLoadoutsInventoryItemDTO" /> class.
        /// </summary>
        /// <param name="EneitlementTypeId">EneitlementTypeId.</param>
        /// <param name="EntitlementId">EntitlementId.</param>
        /// <param name="ExpirationDate">ExpirationDate.</param>
        /// <param name="F2p">F2p.</param>
        /// <param name="InstanceId">InstanceId.</param>
        /// <param name="InstanceTypeId">InstanceTypeId.</param>
        /// <param name="InventoryType">InventoryType.</param>
        /// <param name="ItemId">ItemId.</param>
        /// <param name="Lsb">Lsb.</param>
        /// <param name="PurchaseDate">PurchaseDate.</param>
        /// <param name="Quantity">Quantity.</param>
        /// <param name="Rental">Rental.</param>
        /// <param name="UsedInGameDate">UsedInGameDate.</param>
        /// <param name="Wins">Wins.</param>
        public LolLoadoutsInventoryItemDTO(string EneitlementTypeId = default(string), string EntitlementId = default(string), string ExpirationDate = default(string), bool? F2p = default(bool?), string InstanceId = default(string), string InstanceTypeId = default(string), string InventoryType = default(string), int? ItemId = default(int?), bool? Lsb = default(bool?), string PurchaseDate = default(string), long? Quantity = default(long?), bool? Rental = default(bool?), string UsedInGameDate = default(string), long? Wins = default(long?))
        {
            this.EneitlementTypeId = EneitlementTypeId;
            this.EntitlementId = EntitlementId;
            this.ExpirationDate = ExpirationDate;
            this.F2p = F2p;
            this.InstanceId = InstanceId;
            this.InstanceTypeId = InstanceTypeId;
            this.InventoryType = InventoryType;
            this.ItemId = ItemId;
            this.Lsb = Lsb;
            this.PurchaseDate = PurchaseDate;
            this.Quantity = Quantity;
            this.Rental = Rental;
            this.UsedInGameDate = UsedInGameDate;
            this.Wins = Wins;
        }
        
        /// <summary>
        /// Gets or Sets EneitlementTypeId
        /// </summary>
        [DataMember(Name="eneitlementTypeId", EmitDefaultValue=false)]
        public string EneitlementTypeId { get; set; }

        /// <summary>
        /// Gets or Sets EntitlementId
        /// </summary>
        [DataMember(Name="entitlementId", EmitDefaultValue=false)]
        public string EntitlementId { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public string ExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets F2p
        /// </summary>
        [DataMember(Name="f2p", EmitDefaultValue=false)]
        public bool? F2p { get; set; }

        /// <summary>
        /// Gets or Sets InstanceId
        /// </summary>
        [DataMember(Name="instanceId", EmitDefaultValue=false)]
        public string InstanceId { get; set; }

        /// <summary>
        /// Gets or Sets InstanceTypeId
        /// </summary>
        [DataMember(Name="instanceTypeId", EmitDefaultValue=false)]
        public string InstanceTypeId { get; set; }

        /// <summary>
        /// Gets or Sets InventoryType
        /// </summary>
        [DataMember(Name="inventoryType", EmitDefaultValue=false)]
        public string InventoryType { get; set; }

        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name="itemId", EmitDefaultValue=false)]
        public int? ItemId { get; set; }

        /// <summary>
        /// Gets or Sets Lsb
        /// </summary>
        [DataMember(Name="lsb", EmitDefaultValue=false)]
        public bool? Lsb { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseDate
        /// </summary>
        [DataMember(Name="purchaseDate", EmitDefaultValue=false)]
        public string PurchaseDate { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public long? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets Rental
        /// </summary>
        [DataMember(Name="rental", EmitDefaultValue=false)]
        public bool? Rental { get; set; }

        /// <summary>
        /// Gets or Sets UsedInGameDate
        /// </summary>
        [DataMember(Name="usedInGameDate", EmitDefaultValue=false)]
        public string UsedInGameDate { get; set; }

        /// <summary>
        /// Gets or Sets Wins
        /// </summary>
        [DataMember(Name="wins", EmitDefaultValue=false)]
        public long? Wins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLoadoutsInventoryItemDTO {\n");
            sb.Append("  EneitlementTypeId: ").Append(EneitlementTypeId).Append("\n");
            sb.Append("  EntitlementId: ").Append(EntitlementId).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  F2p: ").Append(F2p).Append("\n");
            sb.Append("  InstanceId: ").Append(InstanceId).Append("\n");
            sb.Append("  InstanceTypeId: ").Append(InstanceTypeId).Append("\n");
            sb.Append("  InventoryType: ").Append(InventoryType).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  Lsb: ").Append(Lsb).Append("\n");
            sb.Append("  PurchaseDate: ").Append(PurchaseDate).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Rental: ").Append(Rental).Append("\n");
            sb.Append("  UsedInGameDate: ").Append(UsedInGameDate).Append("\n");
            sb.Append("  Wins: ").Append(Wins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLoadoutsInventoryItemDTO);
        }

        /// <summary>
        /// Returns true if LolLoadoutsInventoryItemDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLoadoutsInventoryItemDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLoadoutsInventoryItemDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.EneitlementTypeId == other.EneitlementTypeId ||
                    this.EneitlementTypeId != null &&
                    this.EneitlementTypeId.Equals(other.EneitlementTypeId)
                ) && 
                (
                    this.EntitlementId == other.EntitlementId ||
                    this.EntitlementId != null &&
                    this.EntitlementId.Equals(other.EntitlementId)
                ) && 
                (
                    this.ExpirationDate == other.ExpirationDate ||
                    this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(other.ExpirationDate)
                ) && 
                (
                    this.F2p == other.F2p ||
                    this.F2p != null &&
                    this.F2p.Equals(other.F2p)
                ) && 
                (
                    this.InstanceId == other.InstanceId ||
                    this.InstanceId != null &&
                    this.InstanceId.Equals(other.InstanceId)
                ) && 
                (
                    this.InstanceTypeId == other.InstanceTypeId ||
                    this.InstanceTypeId != null &&
                    this.InstanceTypeId.Equals(other.InstanceTypeId)
                ) && 
                (
                    this.InventoryType == other.InventoryType ||
                    this.InventoryType != null &&
                    this.InventoryType.Equals(other.InventoryType)
                ) && 
                (
                    this.ItemId == other.ItemId ||
                    this.ItemId != null &&
                    this.ItemId.Equals(other.ItemId)
                ) && 
                (
                    this.Lsb == other.Lsb ||
                    this.Lsb != null &&
                    this.Lsb.Equals(other.Lsb)
                ) && 
                (
                    this.PurchaseDate == other.PurchaseDate ||
                    this.PurchaseDate != null &&
                    this.PurchaseDate.Equals(other.PurchaseDate)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                ) && 
                (
                    this.Rental == other.Rental ||
                    this.Rental != null &&
                    this.Rental.Equals(other.Rental)
                ) && 
                (
                    this.UsedInGameDate == other.UsedInGameDate ||
                    this.UsedInGameDate != null &&
                    this.UsedInGameDate.Equals(other.UsedInGameDate)
                ) && 
                (
                    this.Wins == other.Wins ||
                    this.Wins != null &&
                    this.Wins.Equals(other.Wins)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.EneitlementTypeId != null)
                    hash = hash * 59 + this.EneitlementTypeId.GetHashCode();
                if (this.EntitlementId != null)
                    hash = hash * 59 + this.EntitlementId.GetHashCode();
                if (this.ExpirationDate != null)
                    hash = hash * 59 + this.ExpirationDate.GetHashCode();
                if (this.F2p != null)
                    hash = hash * 59 + this.F2p.GetHashCode();
                if (this.InstanceId != null)
                    hash = hash * 59 + this.InstanceId.GetHashCode();
                if (this.InstanceTypeId != null)
                    hash = hash * 59 + this.InstanceTypeId.GetHashCode();
                if (this.InventoryType != null)
                    hash = hash * 59 + this.InventoryType.GetHashCode();
                if (this.ItemId != null)
                    hash = hash * 59 + this.ItemId.GetHashCode();
                if (this.Lsb != null)
                    hash = hash * 59 + this.Lsb.GetHashCode();
                if (this.PurchaseDate != null)
                    hash = hash * 59 + this.PurchaseDate.GetHashCode();
                if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                if (this.Rental != null)
                    hash = hash * 59 + this.Rental.GetHashCode();
                if (this.UsedInGameDate != null)
                    hash = hash * 59 + this.UsedInGameDate.GetHashCode();
                if (this.Wins != null)
                    hash = hash * 59 + this.Wins.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
