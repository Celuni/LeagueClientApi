/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLobbyAmbassadorMessage
    /// </summary>
    [DataContract]
    public partial class LolLobbyAmbassadorMessage :  IEquatable<LolLobbyAmbassadorMessage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLobbyAmbassadorMessage" /> class.
        /// </summary>
        /// <param name="ErrorCode">ErrorCode.</param>
        /// <param name="HttpStatus">HttpStatus.</param>
        /// <param name="ImplementationDetails">ImplementationDetails.</param>
        /// <param name="Message">Message.</param>
        /// <param name="Payload">Payload.</param>
        public LolLobbyAmbassadorMessage(string ErrorCode = default(string), int? HttpStatus = default(int?), string ImplementationDetails = default(string), string Message = default(string), Object Payload = default(Object))
        {
            this.ErrorCode = ErrorCode;
            this.HttpStatus = HttpStatus;
            this.ImplementationDetails = ImplementationDetails;
            this.Message = Message;
            this.Payload = Payload;
        }
        
        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [DataMember(Name="errorCode", EmitDefaultValue=false)]
        public string ErrorCode { get; set; }

        /// <summary>
        /// Gets or Sets HttpStatus
        /// </summary>
        [DataMember(Name="httpStatus", EmitDefaultValue=false)]
        public int? HttpStatus { get; set; }

        /// <summary>
        /// Gets or Sets ImplementationDetails
        /// </summary>
        [DataMember(Name="implementationDetails", EmitDefaultValue=false)]
        public string ImplementationDetails { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Payload
        /// </summary>
        [DataMember(Name="payload", EmitDefaultValue=false)]
        public Object Payload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLobbyAmbassadorMessage {\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  HttpStatus: ").Append(HttpStatus).Append("\n");
            sb.Append("  ImplementationDetails: ").Append(ImplementationDetails).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLobbyAmbassadorMessage);
        }

        /// <summary>
        /// Returns true if LolLobbyAmbassadorMessage instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLobbyAmbassadorMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLobbyAmbassadorMessage other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ErrorCode == other.ErrorCode ||
                    this.ErrorCode != null &&
                    this.ErrorCode.Equals(other.ErrorCode)
                ) && 
                (
                    this.HttpStatus == other.HttpStatus ||
                    this.HttpStatus != null &&
                    this.HttpStatus.Equals(other.HttpStatus)
                ) && 
                (
                    this.ImplementationDetails == other.ImplementationDetails ||
                    this.ImplementationDetails != null &&
                    this.ImplementationDetails.Equals(other.ImplementationDetails)
                ) && 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) && 
                (
                    this.Payload == other.Payload ||
                    this.Payload != null &&
                    this.Payload.Equals(other.Payload)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ErrorCode != null)
                    hash = hash * 59 + this.ErrorCode.GetHashCode();
                if (this.HttpStatus != null)
                    hash = hash * 59 + this.HttpStatus.GetHashCode();
                if (this.ImplementationDetails != null)
                    hash = hash * 59 + this.ImplementationDetails.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.Payload != null)
                    hash = hash * 59 + this.Payload.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
