/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLobbyLobby
    /// </summary>
    [DataContract]
    public partial class LolLobbyLobby :  IEquatable<LolLobbyLobby>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLobbyLobby" /> class.
        /// </summary>
        /// <param name="AllowablePremadeSizes">AllowablePremadeSizes.</param>
        /// <param name="AutoFillEligible">AutoFillEligible.</param>
        /// <param name="AutoFillProtectedForPromos">AutoFillProtectedForPromos.</param>
        /// <param name="AutoFillProtectedForStreaking">AutoFillProtectedForStreaking.</param>
        /// <param name="CanStartMatchmaking">CanStartMatchmaking.</param>
        /// <param name="ChatRoomId">ChatRoomId.</param>
        /// <param name="ChatRoomKey">ChatRoomKey.</param>
        /// <param name="CustomGameLobby">CustomGameLobby.</param>
        /// <param name="GameMode">GameMode.</param>
        /// <param name="InvitationId">InvitationId.</param>
        /// <param name="Invitations">Invitations.</param>
        /// <param name="IsCustom">IsCustom.</param>
        /// <param name="IsTeamBuilderManaged">IsTeamBuilderManaged.</param>
        /// <param name="LocalMember">LocalMember.</param>
        /// <param name="MapId">MapId.</param>
        /// <param name="MaximumParticipantListSize">MaximumParticipantListSize.</param>
        /// <param name="Members">Members.</param>
        /// <param name="PremadeSizeAllowed">PremadeSizeAllowed.</param>
        /// <param name="QueueAvailability">QueueAvailability.</param>
        /// <param name="QueueId">QueueId.</param>
        /// <param name="RemovalReason">RemovalReason.</param>
        /// <param name="RequiredPositionCoverageMet">RequiredPositionCoverageMet.</param>
        /// <param name="ShowPositionExcluder">ShowPositionExcluder.</param>
        /// <param name="ShowPositionSelector">ShowPositionSelector.</param>
        /// <param name="SpecifiablePositionPreferences">SpecifiablePositionPreferences.</param>
        /// <param name="WasKicked">WasKicked.</param>
        public LolLobbyLobby(List<int?> AllowablePremadeSizes = default(List<int?>), bool? AutoFillEligible = default(bool?), bool? AutoFillProtectedForPromos = default(bool?), bool? AutoFillProtectedForStreaking = default(bool?), bool? CanStartMatchmaking = default(bool?), string ChatRoomId = default(string), string ChatRoomKey = default(string), LolLobbyLobbyCustomGameLobby CustomGameLobby = default(LolLobbyLobbyCustomGameLobby), string GameMode = default(string), string InvitationId = default(string), List<LolLobbyLobbyInvitation> Invitations = default(List<LolLobbyLobbyInvitation>), bool? IsCustom = default(bool?), bool? IsTeamBuilderManaged = default(bool?), LolLobbyLobbyMember LocalMember = default(LolLobbyLobbyMember), int? MapId = default(int?), int? MaximumParticipantListSize = default(int?), List<LolLobbyLobbyMember> Members = default(List<LolLobbyLobbyMember>), bool? PremadeSizeAllowed = default(bool?), LolLobbyQueueAvailability QueueAvailability = default(LolLobbyQueueAvailability), int? QueueId = default(int?), LolLobbyLobbyRemovedFromGameReason RemovalReason = default(LolLobbyLobbyRemovedFromGameReason), bool? RequiredPositionCoverageMet = default(bool?), bool? ShowPositionExcluder = default(bool?), bool? ShowPositionSelector = default(bool?), List<string> SpecifiablePositionPreferences = default(List<string>), bool? WasKicked = default(bool?))
        {
            this.AllowablePremadeSizes = AllowablePremadeSizes;
            this.AutoFillEligible = AutoFillEligible;
            this.AutoFillProtectedForPromos = AutoFillProtectedForPromos;
            this.AutoFillProtectedForStreaking = AutoFillProtectedForStreaking;
            this.CanStartMatchmaking = CanStartMatchmaking;
            this.ChatRoomId = ChatRoomId;
            this.ChatRoomKey = ChatRoomKey;
            this.CustomGameLobby = CustomGameLobby;
            this.GameMode = GameMode;
            this.InvitationId = InvitationId;
            this.Invitations = Invitations;
            this.IsCustom = IsCustom;
            this.IsTeamBuilderManaged = IsTeamBuilderManaged;
            this.LocalMember = LocalMember;
            this.MapId = MapId;
            this.MaximumParticipantListSize = MaximumParticipantListSize;
            this.Members = Members;
            this.PremadeSizeAllowed = PremadeSizeAllowed;
            this.QueueAvailability = QueueAvailability;
            this.QueueId = QueueId;
            this.RemovalReason = RemovalReason;
            this.RequiredPositionCoverageMet = RequiredPositionCoverageMet;
            this.ShowPositionExcluder = ShowPositionExcluder;
            this.ShowPositionSelector = ShowPositionSelector;
            this.SpecifiablePositionPreferences = SpecifiablePositionPreferences;
            this.WasKicked = WasKicked;
        }
        
        /// <summary>
        /// Gets or Sets AllowablePremadeSizes
        /// </summary>
        [DataMember(Name="allowablePremadeSizes", EmitDefaultValue=false)]
        public List<int?> AllowablePremadeSizes { get; set; }

        /// <summary>
        /// Gets or Sets AutoFillEligible
        /// </summary>
        [DataMember(Name="autoFillEligible", EmitDefaultValue=false)]
        public bool? AutoFillEligible { get; set; }

        /// <summary>
        /// Gets or Sets AutoFillProtectedForPromos
        /// </summary>
        [DataMember(Name="autoFillProtectedForPromos", EmitDefaultValue=false)]
        public bool? AutoFillProtectedForPromos { get; set; }

        /// <summary>
        /// Gets or Sets AutoFillProtectedForStreaking
        /// </summary>
        [DataMember(Name="autoFillProtectedForStreaking", EmitDefaultValue=false)]
        public bool? AutoFillProtectedForStreaking { get; set; }

        /// <summary>
        /// Gets or Sets CanStartMatchmaking
        /// </summary>
        [DataMember(Name="canStartMatchmaking", EmitDefaultValue=false)]
        public bool? CanStartMatchmaking { get; set; }

        /// <summary>
        /// Gets or Sets ChatRoomId
        /// </summary>
        [DataMember(Name="chatRoomId", EmitDefaultValue=false)]
        public string ChatRoomId { get; set; }

        /// <summary>
        /// Gets or Sets ChatRoomKey
        /// </summary>
        [DataMember(Name="chatRoomKey", EmitDefaultValue=false)]
        public string ChatRoomKey { get; set; }

        /// <summary>
        /// Gets or Sets CustomGameLobby
        /// </summary>
        [DataMember(Name="customGameLobby", EmitDefaultValue=false)]
        public LolLobbyLobbyCustomGameLobby CustomGameLobby { get; set; }

        /// <summary>
        /// Gets or Sets GameMode
        /// </summary>
        [DataMember(Name="gameMode", EmitDefaultValue=false)]
        public string GameMode { get; set; }

        /// <summary>
        /// Gets or Sets InvitationId
        /// </summary>
        [DataMember(Name="invitationId", EmitDefaultValue=false)]
        public string InvitationId { get; set; }

        /// <summary>
        /// Gets or Sets Invitations
        /// </summary>
        [DataMember(Name="invitations", EmitDefaultValue=false)]
        public List<LolLobbyLobbyInvitation> Invitations { get; set; }

        /// <summary>
        /// Gets or Sets IsCustom
        /// </summary>
        [DataMember(Name="isCustom", EmitDefaultValue=false)]
        public bool? IsCustom { get; set; }

        /// <summary>
        /// Gets or Sets IsTeamBuilderManaged
        /// </summary>
        [DataMember(Name="isTeamBuilderManaged", EmitDefaultValue=false)]
        public bool? IsTeamBuilderManaged { get; set; }

        /// <summary>
        /// Gets or Sets LocalMember
        /// </summary>
        [DataMember(Name="localMember", EmitDefaultValue=false)]
        public LolLobbyLobbyMember LocalMember { get; set; }

        /// <summary>
        /// Gets or Sets MapId
        /// </summary>
        [DataMember(Name="mapId", EmitDefaultValue=false)]
        public int? MapId { get; set; }

        /// <summary>
        /// Gets or Sets MaximumParticipantListSize
        /// </summary>
        [DataMember(Name="maximumParticipantListSize", EmitDefaultValue=false)]
        public int? MaximumParticipantListSize { get; set; }

        /// <summary>
        /// Gets or Sets Members
        /// </summary>
        [DataMember(Name="members", EmitDefaultValue=false)]
        public List<LolLobbyLobbyMember> Members { get; set; }

        /// <summary>
        /// Gets or Sets PremadeSizeAllowed
        /// </summary>
        [DataMember(Name="premadeSizeAllowed", EmitDefaultValue=false)]
        public bool? PremadeSizeAllowed { get; set; }

        /// <summary>
        /// Gets or Sets QueueAvailability
        /// </summary>
        [DataMember(Name="queueAvailability", EmitDefaultValue=false)]
        public LolLobbyQueueAvailability QueueAvailability { get; set; }

        /// <summary>
        /// Gets or Sets QueueId
        /// </summary>
        [DataMember(Name="queueId", EmitDefaultValue=false)]
        public int? QueueId { get; set; }

        /// <summary>
        /// Gets or Sets RemovalReason
        /// </summary>
        [DataMember(Name="removalReason", EmitDefaultValue=false)]
        public LolLobbyLobbyRemovedFromGameReason RemovalReason { get; set; }

        /// <summary>
        /// Gets or Sets RequiredPositionCoverageMet
        /// </summary>
        [DataMember(Name="requiredPositionCoverageMet", EmitDefaultValue=false)]
        public bool? RequiredPositionCoverageMet { get; set; }

        /// <summary>
        /// Gets or Sets ShowPositionExcluder
        /// </summary>
        [DataMember(Name="showPositionExcluder", EmitDefaultValue=false)]
        public bool? ShowPositionExcluder { get; set; }

        /// <summary>
        /// Gets or Sets ShowPositionSelector
        /// </summary>
        [DataMember(Name="showPositionSelector", EmitDefaultValue=false)]
        public bool? ShowPositionSelector { get; set; }

        /// <summary>
        /// Gets or Sets SpecifiablePositionPreferences
        /// </summary>
        [DataMember(Name="specifiablePositionPreferences", EmitDefaultValue=false)]
        public List<string> SpecifiablePositionPreferences { get; set; }

        /// <summary>
        /// Gets or Sets WasKicked
        /// </summary>
        [DataMember(Name="wasKicked", EmitDefaultValue=false)]
        public bool? WasKicked { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLobbyLobby {\n");
            sb.Append("  AllowablePremadeSizes: ").Append(AllowablePremadeSizes).Append("\n");
            sb.Append("  AutoFillEligible: ").Append(AutoFillEligible).Append("\n");
            sb.Append("  AutoFillProtectedForPromos: ").Append(AutoFillProtectedForPromos).Append("\n");
            sb.Append("  AutoFillProtectedForStreaking: ").Append(AutoFillProtectedForStreaking).Append("\n");
            sb.Append("  CanStartMatchmaking: ").Append(CanStartMatchmaking).Append("\n");
            sb.Append("  ChatRoomId: ").Append(ChatRoomId).Append("\n");
            sb.Append("  ChatRoomKey: ").Append(ChatRoomKey).Append("\n");
            sb.Append("  CustomGameLobby: ").Append(CustomGameLobby).Append("\n");
            sb.Append("  GameMode: ").Append(GameMode).Append("\n");
            sb.Append("  InvitationId: ").Append(InvitationId).Append("\n");
            sb.Append("  Invitations: ").Append(Invitations).Append("\n");
            sb.Append("  IsCustom: ").Append(IsCustom).Append("\n");
            sb.Append("  IsTeamBuilderManaged: ").Append(IsTeamBuilderManaged).Append("\n");
            sb.Append("  LocalMember: ").Append(LocalMember).Append("\n");
            sb.Append("  MapId: ").Append(MapId).Append("\n");
            sb.Append("  MaximumParticipantListSize: ").Append(MaximumParticipantListSize).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  PremadeSizeAllowed: ").Append(PremadeSizeAllowed).Append("\n");
            sb.Append("  QueueAvailability: ").Append(QueueAvailability).Append("\n");
            sb.Append("  QueueId: ").Append(QueueId).Append("\n");
            sb.Append("  RemovalReason: ").Append(RemovalReason).Append("\n");
            sb.Append("  RequiredPositionCoverageMet: ").Append(RequiredPositionCoverageMet).Append("\n");
            sb.Append("  ShowPositionExcluder: ").Append(ShowPositionExcluder).Append("\n");
            sb.Append("  ShowPositionSelector: ").Append(ShowPositionSelector).Append("\n");
            sb.Append("  SpecifiablePositionPreferences: ").Append(SpecifiablePositionPreferences).Append("\n");
            sb.Append("  WasKicked: ").Append(WasKicked).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLobbyLobby);
        }

        /// <summary>
        /// Returns true if LolLobbyLobby instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLobbyLobby to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLobbyLobby other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AllowablePremadeSizes == other.AllowablePremadeSizes ||
                    this.AllowablePremadeSizes != null &&
                    this.AllowablePremadeSizes.SequenceEqual(other.AllowablePremadeSizes)
                ) && 
                (
                    this.AutoFillEligible == other.AutoFillEligible ||
                    this.AutoFillEligible != null &&
                    this.AutoFillEligible.Equals(other.AutoFillEligible)
                ) && 
                (
                    this.AutoFillProtectedForPromos == other.AutoFillProtectedForPromos ||
                    this.AutoFillProtectedForPromos != null &&
                    this.AutoFillProtectedForPromos.Equals(other.AutoFillProtectedForPromos)
                ) && 
                (
                    this.AutoFillProtectedForStreaking == other.AutoFillProtectedForStreaking ||
                    this.AutoFillProtectedForStreaking != null &&
                    this.AutoFillProtectedForStreaking.Equals(other.AutoFillProtectedForStreaking)
                ) && 
                (
                    this.CanStartMatchmaking == other.CanStartMatchmaking ||
                    this.CanStartMatchmaking != null &&
                    this.CanStartMatchmaking.Equals(other.CanStartMatchmaking)
                ) && 
                (
                    this.ChatRoomId == other.ChatRoomId ||
                    this.ChatRoomId != null &&
                    this.ChatRoomId.Equals(other.ChatRoomId)
                ) && 
                (
                    this.ChatRoomKey == other.ChatRoomKey ||
                    this.ChatRoomKey != null &&
                    this.ChatRoomKey.Equals(other.ChatRoomKey)
                ) && 
                (
                    this.CustomGameLobby == other.CustomGameLobby ||
                    this.CustomGameLobby != null &&
                    this.CustomGameLobby.Equals(other.CustomGameLobby)
                ) && 
                (
                    this.GameMode == other.GameMode ||
                    this.GameMode != null &&
                    this.GameMode.Equals(other.GameMode)
                ) && 
                (
                    this.InvitationId == other.InvitationId ||
                    this.InvitationId != null &&
                    this.InvitationId.Equals(other.InvitationId)
                ) && 
                (
                    this.Invitations == other.Invitations ||
                    this.Invitations != null &&
                    this.Invitations.SequenceEqual(other.Invitations)
                ) && 
                (
                    this.IsCustom == other.IsCustom ||
                    this.IsCustom != null &&
                    this.IsCustom.Equals(other.IsCustom)
                ) && 
                (
                    this.IsTeamBuilderManaged == other.IsTeamBuilderManaged ||
                    this.IsTeamBuilderManaged != null &&
                    this.IsTeamBuilderManaged.Equals(other.IsTeamBuilderManaged)
                ) && 
                (
                    this.LocalMember == other.LocalMember ||
                    this.LocalMember != null &&
                    this.LocalMember.Equals(other.LocalMember)
                ) && 
                (
                    this.MapId == other.MapId ||
                    this.MapId != null &&
                    this.MapId.Equals(other.MapId)
                ) && 
                (
                    this.MaximumParticipantListSize == other.MaximumParticipantListSize ||
                    this.MaximumParticipantListSize != null &&
                    this.MaximumParticipantListSize.Equals(other.MaximumParticipantListSize)
                ) && 
                (
                    this.Members == other.Members ||
                    this.Members != null &&
                    this.Members.SequenceEqual(other.Members)
                ) && 
                (
                    this.PremadeSizeAllowed == other.PremadeSizeAllowed ||
                    this.PremadeSizeAllowed != null &&
                    this.PremadeSizeAllowed.Equals(other.PremadeSizeAllowed)
                ) && 
                (
                    this.QueueAvailability == other.QueueAvailability ||
                    this.QueueAvailability != null &&
                    this.QueueAvailability.Equals(other.QueueAvailability)
                ) && 
                (
                    this.QueueId == other.QueueId ||
                    this.QueueId != null &&
                    this.QueueId.Equals(other.QueueId)
                ) && 
                (
                    this.RemovalReason == other.RemovalReason ||
                    this.RemovalReason != null &&
                    this.RemovalReason.Equals(other.RemovalReason)
                ) && 
                (
                    this.RequiredPositionCoverageMet == other.RequiredPositionCoverageMet ||
                    this.RequiredPositionCoverageMet != null &&
                    this.RequiredPositionCoverageMet.Equals(other.RequiredPositionCoverageMet)
                ) && 
                (
                    this.ShowPositionExcluder == other.ShowPositionExcluder ||
                    this.ShowPositionExcluder != null &&
                    this.ShowPositionExcluder.Equals(other.ShowPositionExcluder)
                ) && 
                (
                    this.ShowPositionSelector == other.ShowPositionSelector ||
                    this.ShowPositionSelector != null &&
                    this.ShowPositionSelector.Equals(other.ShowPositionSelector)
                ) && 
                (
                    this.SpecifiablePositionPreferences == other.SpecifiablePositionPreferences ||
                    this.SpecifiablePositionPreferences != null &&
                    this.SpecifiablePositionPreferences.SequenceEqual(other.SpecifiablePositionPreferences)
                ) && 
                (
                    this.WasKicked == other.WasKicked ||
                    this.WasKicked != null &&
                    this.WasKicked.Equals(other.WasKicked)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AllowablePremadeSizes != null)
                    hash = hash * 59 + this.AllowablePremadeSizes.GetHashCode();
                if (this.AutoFillEligible != null)
                    hash = hash * 59 + this.AutoFillEligible.GetHashCode();
                if (this.AutoFillProtectedForPromos != null)
                    hash = hash * 59 + this.AutoFillProtectedForPromos.GetHashCode();
                if (this.AutoFillProtectedForStreaking != null)
                    hash = hash * 59 + this.AutoFillProtectedForStreaking.GetHashCode();
                if (this.CanStartMatchmaking != null)
                    hash = hash * 59 + this.CanStartMatchmaking.GetHashCode();
                if (this.ChatRoomId != null)
                    hash = hash * 59 + this.ChatRoomId.GetHashCode();
                if (this.ChatRoomKey != null)
                    hash = hash * 59 + this.ChatRoomKey.GetHashCode();
                if (this.CustomGameLobby != null)
                    hash = hash * 59 + this.CustomGameLobby.GetHashCode();
                if (this.GameMode != null)
                    hash = hash * 59 + this.GameMode.GetHashCode();
                if (this.InvitationId != null)
                    hash = hash * 59 + this.InvitationId.GetHashCode();
                if (this.Invitations != null)
                    hash = hash * 59 + this.Invitations.GetHashCode();
                if (this.IsCustom != null)
                    hash = hash * 59 + this.IsCustom.GetHashCode();
                if (this.IsTeamBuilderManaged != null)
                    hash = hash * 59 + this.IsTeamBuilderManaged.GetHashCode();
                if (this.LocalMember != null)
                    hash = hash * 59 + this.LocalMember.GetHashCode();
                if (this.MapId != null)
                    hash = hash * 59 + this.MapId.GetHashCode();
                if (this.MaximumParticipantListSize != null)
                    hash = hash * 59 + this.MaximumParticipantListSize.GetHashCode();
                if (this.Members != null)
                    hash = hash * 59 + this.Members.GetHashCode();
                if (this.PremadeSizeAllowed != null)
                    hash = hash * 59 + this.PremadeSizeAllowed.GetHashCode();
                if (this.QueueAvailability != null)
                    hash = hash * 59 + this.QueueAvailability.GetHashCode();
                if (this.QueueId != null)
                    hash = hash * 59 + this.QueueId.GetHashCode();
                if (this.RemovalReason != null)
                    hash = hash * 59 + this.RemovalReason.GetHashCode();
                if (this.RequiredPositionCoverageMet != null)
                    hash = hash * 59 + this.RequiredPositionCoverageMet.GetHashCode();
                if (this.ShowPositionExcluder != null)
                    hash = hash * 59 + this.ShowPositionExcluder.GetHashCode();
                if (this.ShowPositionSelector != null)
                    hash = hash * 59 + this.ShowPositionSelector.GetHashCode();
                if (this.SpecifiablePositionPreferences != null)
                    hash = hash * 59 + this.SpecifiablePositionPreferences.GetHashCode();
                if (this.WasKicked != null)
                    hash = hash * 59 + this.WasKicked.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
