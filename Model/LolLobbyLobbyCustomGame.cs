/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLobbyLobbyCustomGame
    /// </summary>
    [DataContract]
    public partial class LolLobbyLobbyCustomGame :  IEquatable<LolLobbyLobbyCustomGame>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLobbyLobbyCustomGame" /> class.
        /// </summary>
        /// <param name="FilledPlayerSlots">FilledPlayerSlots.</param>
        /// <param name="FilledSpectatorSlots">FilledSpectatorSlots.</param>
        /// <param name="GameType">GameType.</param>
        /// <param name="HasPassword">HasPassword.</param>
        /// <param name="Id">Id.</param>
        /// <param name="LobbyName">LobbyName.</param>
        /// <param name="MapId">MapId.</param>
        /// <param name="MaxPlayerSlots">MaxPlayerSlots.</param>
        /// <param name="MaxSpectatorSlots">MaxSpectatorSlots.</param>
        /// <param name="OwnerSummonerName">OwnerSummonerName.</param>
        /// <param name="PassbackUrl">PassbackUrl.</param>
        /// <param name="SpectatorPolicy">SpectatorPolicy.</param>
        public LolLobbyLobbyCustomGame(int? FilledPlayerSlots = default(int?), int? FilledSpectatorSlots = default(int?), string GameType = default(string), bool? HasPassword = default(bool?), long? Id = default(long?), string LobbyName = default(string), int? MapId = default(int?), int? MaxPlayerSlots = default(int?), long? MaxSpectatorSlots = default(long?), string OwnerSummonerName = default(string), string PassbackUrl = default(string), string SpectatorPolicy = default(string))
        {
            this.FilledPlayerSlots = FilledPlayerSlots;
            this.FilledSpectatorSlots = FilledSpectatorSlots;
            this.GameType = GameType;
            this.HasPassword = HasPassword;
            this.Id = Id;
            this.LobbyName = LobbyName;
            this.MapId = MapId;
            this.MaxPlayerSlots = MaxPlayerSlots;
            this.MaxSpectatorSlots = MaxSpectatorSlots;
            this.OwnerSummonerName = OwnerSummonerName;
            this.PassbackUrl = PassbackUrl;
            this.SpectatorPolicy = SpectatorPolicy;
        }
        
        /// <summary>
        /// Gets or Sets FilledPlayerSlots
        /// </summary>
        [DataMember(Name="filledPlayerSlots", EmitDefaultValue=false)]
        public int? FilledPlayerSlots { get; set; }

        /// <summary>
        /// Gets or Sets FilledSpectatorSlots
        /// </summary>
        [DataMember(Name="filledSpectatorSlots", EmitDefaultValue=false)]
        public int? FilledSpectatorSlots { get; set; }

        /// <summary>
        /// Gets or Sets GameType
        /// </summary>
        [DataMember(Name="gameType", EmitDefaultValue=false)]
        public string GameType { get; set; }

        /// <summary>
        /// Gets or Sets HasPassword
        /// </summary>
        [DataMember(Name="hasPassword", EmitDefaultValue=false)]
        public bool? HasPassword { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets LobbyName
        /// </summary>
        [DataMember(Name="lobbyName", EmitDefaultValue=false)]
        public string LobbyName { get; set; }

        /// <summary>
        /// Gets or Sets MapId
        /// </summary>
        [DataMember(Name="mapId", EmitDefaultValue=false)]
        public int? MapId { get; set; }

        /// <summary>
        /// Gets or Sets MaxPlayerSlots
        /// </summary>
        [DataMember(Name="maxPlayerSlots", EmitDefaultValue=false)]
        public int? MaxPlayerSlots { get; set; }

        /// <summary>
        /// Gets or Sets MaxSpectatorSlots
        /// </summary>
        [DataMember(Name="maxSpectatorSlots", EmitDefaultValue=false)]
        public long? MaxSpectatorSlots { get; set; }

        /// <summary>
        /// Gets or Sets OwnerSummonerName
        /// </summary>
        [DataMember(Name="ownerSummonerName", EmitDefaultValue=false)]
        public string OwnerSummonerName { get; set; }

        /// <summary>
        /// Gets or Sets PassbackUrl
        /// </summary>
        [DataMember(Name="passbackUrl", EmitDefaultValue=false)]
        public string PassbackUrl { get; set; }

        /// <summary>
        /// Gets or Sets SpectatorPolicy
        /// </summary>
        [DataMember(Name="spectatorPolicy", EmitDefaultValue=false)]
        public string SpectatorPolicy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLobbyLobbyCustomGame {\n");
            sb.Append("  FilledPlayerSlots: ").Append(FilledPlayerSlots).Append("\n");
            sb.Append("  FilledSpectatorSlots: ").Append(FilledSpectatorSlots).Append("\n");
            sb.Append("  GameType: ").Append(GameType).Append("\n");
            sb.Append("  HasPassword: ").Append(HasPassword).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LobbyName: ").Append(LobbyName).Append("\n");
            sb.Append("  MapId: ").Append(MapId).Append("\n");
            sb.Append("  MaxPlayerSlots: ").Append(MaxPlayerSlots).Append("\n");
            sb.Append("  MaxSpectatorSlots: ").Append(MaxSpectatorSlots).Append("\n");
            sb.Append("  OwnerSummonerName: ").Append(OwnerSummonerName).Append("\n");
            sb.Append("  PassbackUrl: ").Append(PassbackUrl).Append("\n");
            sb.Append("  SpectatorPolicy: ").Append(SpectatorPolicy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLobbyLobbyCustomGame);
        }

        /// <summary>
        /// Returns true if LolLobbyLobbyCustomGame instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLobbyLobbyCustomGame to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLobbyLobbyCustomGame other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FilledPlayerSlots == other.FilledPlayerSlots ||
                    this.FilledPlayerSlots != null &&
                    this.FilledPlayerSlots.Equals(other.FilledPlayerSlots)
                ) && 
                (
                    this.FilledSpectatorSlots == other.FilledSpectatorSlots ||
                    this.FilledSpectatorSlots != null &&
                    this.FilledSpectatorSlots.Equals(other.FilledSpectatorSlots)
                ) && 
                (
                    this.GameType == other.GameType ||
                    this.GameType != null &&
                    this.GameType.Equals(other.GameType)
                ) && 
                (
                    this.HasPassword == other.HasPassword ||
                    this.HasPassword != null &&
                    this.HasPassword.Equals(other.HasPassword)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.LobbyName == other.LobbyName ||
                    this.LobbyName != null &&
                    this.LobbyName.Equals(other.LobbyName)
                ) && 
                (
                    this.MapId == other.MapId ||
                    this.MapId != null &&
                    this.MapId.Equals(other.MapId)
                ) && 
                (
                    this.MaxPlayerSlots == other.MaxPlayerSlots ||
                    this.MaxPlayerSlots != null &&
                    this.MaxPlayerSlots.Equals(other.MaxPlayerSlots)
                ) && 
                (
                    this.MaxSpectatorSlots == other.MaxSpectatorSlots ||
                    this.MaxSpectatorSlots != null &&
                    this.MaxSpectatorSlots.Equals(other.MaxSpectatorSlots)
                ) && 
                (
                    this.OwnerSummonerName == other.OwnerSummonerName ||
                    this.OwnerSummonerName != null &&
                    this.OwnerSummonerName.Equals(other.OwnerSummonerName)
                ) && 
                (
                    this.PassbackUrl == other.PassbackUrl ||
                    this.PassbackUrl != null &&
                    this.PassbackUrl.Equals(other.PassbackUrl)
                ) && 
                (
                    this.SpectatorPolicy == other.SpectatorPolicy ||
                    this.SpectatorPolicy != null &&
                    this.SpectatorPolicy.Equals(other.SpectatorPolicy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FilledPlayerSlots != null)
                    hash = hash * 59 + this.FilledPlayerSlots.GetHashCode();
                if (this.FilledSpectatorSlots != null)
                    hash = hash * 59 + this.FilledSpectatorSlots.GetHashCode();
                if (this.GameType != null)
                    hash = hash * 59 + this.GameType.GetHashCode();
                if (this.HasPassword != null)
                    hash = hash * 59 + this.HasPassword.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.LobbyName != null)
                    hash = hash * 59 + this.LobbyName.GetHashCode();
                if (this.MapId != null)
                    hash = hash * 59 + this.MapId.GetHashCode();
                if (this.MaxPlayerSlots != null)
                    hash = hash * 59 + this.MaxPlayerSlots.GetHashCode();
                if (this.MaxSpectatorSlots != null)
                    hash = hash * 59 + this.MaxSpectatorSlots.GetHashCode();
                if (this.OwnerSummonerName != null)
                    hash = hash * 59 + this.OwnerSummonerName.GetHashCode();
                if (this.PassbackUrl != null)
                    hash = hash * 59 + this.PassbackUrl.GetHashCode();
                if (this.SpectatorPolicy != null)
                    hash = hash * 59 + this.SpectatorPolicy.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
