/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLobbyLobbyCustomGameConfiguration
    /// </summary>
    [DataContract]
    public partial class LolLobbyLobbyCustomGameConfiguration :  IEquatable<LolLobbyLobbyCustomGameConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLobbyLobbyCustomGameConfiguration" /> class.
        /// </summary>
        /// <param name="GameMode">GameMode.</param>
        /// <param name="GameMutator">GameMutator.</param>
        /// <param name="GameServerRegion">GameServerRegion.</param>
        /// <param name="GameTypeConfig">GameTypeConfig.</param>
        /// <param name="MapId">MapId.</param>
        /// <param name="MaxPlayerCount">MaxPlayerCount.</param>
        /// <param name="Mutators">Mutators.</param>
        /// <param name="SpectatorPolicy">SpectatorPolicy.</param>
        /// <param name="TeamSize">TeamSize.</param>
        /// <param name="TournamentGameMode">TournamentGameMode.</param>
        /// <param name="TournamentPassbackDataPacket">TournamentPassbackDataPacket.</param>
        /// <param name="TournamentPassbackUrl">TournamentPassbackUrl.</param>
        public LolLobbyLobbyCustomGameConfiguration(string GameMode = default(string), string GameMutator = default(string), string GameServerRegion = default(string), LolLobbyQueueGameTypeConfig GameTypeConfig = default(LolLobbyQueueGameTypeConfig), int? MapId = default(int?), int? MaxPlayerCount = default(int?), LolLobbyQueueGameTypeConfig Mutators = default(LolLobbyQueueGameTypeConfig), LolLobbyQueueCustomGameSpectatorPolicy SpectatorPolicy = default(LolLobbyQueueCustomGameSpectatorPolicy), int? TeamSize = default(int?), string TournamentGameMode = default(string), string TournamentPassbackDataPacket = default(string), string TournamentPassbackUrl = default(string))
        {
            this.GameMode = GameMode;
            this.GameMutator = GameMutator;
            this.GameServerRegion = GameServerRegion;
            this.GameTypeConfig = GameTypeConfig;
            this.MapId = MapId;
            this.MaxPlayerCount = MaxPlayerCount;
            this.Mutators = Mutators;
            this.SpectatorPolicy = SpectatorPolicy;
            this.TeamSize = TeamSize;
            this.TournamentGameMode = TournamentGameMode;
            this.TournamentPassbackDataPacket = TournamentPassbackDataPacket;
            this.TournamentPassbackUrl = TournamentPassbackUrl;
        }
        
        /// <summary>
        /// Gets or Sets GameMode
        /// </summary>
        [DataMember(Name="gameMode", EmitDefaultValue=false)]
        public string GameMode { get; set; }

        /// <summary>
        /// Gets or Sets GameMutator
        /// </summary>
        [DataMember(Name="gameMutator", EmitDefaultValue=false)]
        public string GameMutator { get; set; }

        /// <summary>
        /// Gets or Sets GameServerRegion
        /// </summary>
        [DataMember(Name="gameServerRegion", EmitDefaultValue=false)]
        public string GameServerRegion { get; set; }

        /// <summary>
        /// Gets or Sets GameTypeConfig
        /// </summary>
        [DataMember(Name="gameTypeConfig", EmitDefaultValue=false)]
        public LolLobbyQueueGameTypeConfig GameTypeConfig { get; set; }

        /// <summary>
        /// Gets or Sets MapId
        /// </summary>
        [DataMember(Name="mapId", EmitDefaultValue=false)]
        public int? MapId { get; set; }

        /// <summary>
        /// Gets or Sets MaxPlayerCount
        /// </summary>
        [DataMember(Name="maxPlayerCount", EmitDefaultValue=false)]
        public int? MaxPlayerCount { get; set; }

        /// <summary>
        /// Gets or Sets Mutators
        /// </summary>
        [DataMember(Name="mutators", EmitDefaultValue=false)]
        public LolLobbyQueueGameTypeConfig Mutators { get; set; }

        /// <summary>
        /// Gets or Sets SpectatorPolicy
        /// </summary>
        [DataMember(Name="spectatorPolicy", EmitDefaultValue=false)]
        public LolLobbyQueueCustomGameSpectatorPolicy SpectatorPolicy { get; set; }

        /// <summary>
        /// Gets or Sets TeamSize
        /// </summary>
        [DataMember(Name="teamSize", EmitDefaultValue=false)]
        public int? TeamSize { get; set; }

        /// <summary>
        /// Gets or Sets TournamentGameMode
        /// </summary>
        [DataMember(Name="tournamentGameMode", EmitDefaultValue=false)]
        public string TournamentGameMode { get; set; }

        /// <summary>
        /// Gets or Sets TournamentPassbackDataPacket
        /// </summary>
        [DataMember(Name="tournamentPassbackDataPacket", EmitDefaultValue=false)]
        public string TournamentPassbackDataPacket { get; set; }

        /// <summary>
        /// Gets or Sets TournamentPassbackUrl
        /// </summary>
        [DataMember(Name="tournamentPassbackUrl", EmitDefaultValue=false)]
        public string TournamentPassbackUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLobbyLobbyCustomGameConfiguration {\n");
            sb.Append("  GameMode: ").Append(GameMode).Append("\n");
            sb.Append("  GameMutator: ").Append(GameMutator).Append("\n");
            sb.Append("  GameServerRegion: ").Append(GameServerRegion).Append("\n");
            sb.Append("  GameTypeConfig: ").Append(GameTypeConfig).Append("\n");
            sb.Append("  MapId: ").Append(MapId).Append("\n");
            sb.Append("  MaxPlayerCount: ").Append(MaxPlayerCount).Append("\n");
            sb.Append("  Mutators: ").Append(Mutators).Append("\n");
            sb.Append("  SpectatorPolicy: ").Append(SpectatorPolicy).Append("\n");
            sb.Append("  TeamSize: ").Append(TeamSize).Append("\n");
            sb.Append("  TournamentGameMode: ").Append(TournamentGameMode).Append("\n");
            sb.Append("  TournamentPassbackDataPacket: ").Append(TournamentPassbackDataPacket).Append("\n");
            sb.Append("  TournamentPassbackUrl: ").Append(TournamentPassbackUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLobbyLobbyCustomGameConfiguration);
        }

        /// <summary>
        /// Returns true if LolLobbyLobbyCustomGameConfiguration instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLobbyLobbyCustomGameConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLobbyLobbyCustomGameConfiguration other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.GameMode == other.GameMode ||
                    this.GameMode != null &&
                    this.GameMode.Equals(other.GameMode)
                ) && 
                (
                    this.GameMutator == other.GameMutator ||
                    this.GameMutator != null &&
                    this.GameMutator.Equals(other.GameMutator)
                ) && 
                (
                    this.GameServerRegion == other.GameServerRegion ||
                    this.GameServerRegion != null &&
                    this.GameServerRegion.Equals(other.GameServerRegion)
                ) && 
                (
                    this.GameTypeConfig == other.GameTypeConfig ||
                    this.GameTypeConfig != null &&
                    this.GameTypeConfig.Equals(other.GameTypeConfig)
                ) && 
                (
                    this.MapId == other.MapId ||
                    this.MapId != null &&
                    this.MapId.Equals(other.MapId)
                ) && 
                (
                    this.MaxPlayerCount == other.MaxPlayerCount ||
                    this.MaxPlayerCount != null &&
                    this.MaxPlayerCount.Equals(other.MaxPlayerCount)
                ) && 
                (
                    this.Mutators == other.Mutators ||
                    this.Mutators != null &&
                    this.Mutators.Equals(other.Mutators)
                ) && 
                (
                    this.SpectatorPolicy == other.SpectatorPolicy ||
                    this.SpectatorPolicy != null &&
                    this.SpectatorPolicy.Equals(other.SpectatorPolicy)
                ) && 
                (
                    this.TeamSize == other.TeamSize ||
                    this.TeamSize != null &&
                    this.TeamSize.Equals(other.TeamSize)
                ) && 
                (
                    this.TournamentGameMode == other.TournamentGameMode ||
                    this.TournamentGameMode != null &&
                    this.TournamentGameMode.Equals(other.TournamentGameMode)
                ) && 
                (
                    this.TournamentPassbackDataPacket == other.TournamentPassbackDataPacket ||
                    this.TournamentPassbackDataPacket != null &&
                    this.TournamentPassbackDataPacket.Equals(other.TournamentPassbackDataPacket)
                ) && 
                (
                    this.TournamentPassbackUrl == other.TournamentPassbackUrl ||
                    this.TournamentPassbackUrl != null &&
                    this.TournamentPassbackUrl.Equals(other.TournamentPassbackUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.GameMode != null)
                    hash = hash * 59 + this.GameMode.GetHashCode();
                if (this.GameMutator != null)
                    hash = hash * 59 + this.GameMutator.GetHashCode();
                if (this.GameServerRegion != null)
                    hash = hash * 59 + this.GameServerRegion.GetHashCode();
                if (this.GameTypeConfig != null)
                    hash = hash * 59 + this.GameTypeConfig.GetHashCode();
                if (this.MapId != null)
                    hash = hash * 59 + this.MapId.GetHashCode();
                if (this.MaxPlayerCount != null)
                    hash = hash * 59 + this.MaxPlayerCount.GetHashCode();
                if (this.Mutators != null)
                    hash = hash * 59 + this.Mutators.GetHashCode();
                if (this.SpectatorPolicy != null)
                    hash = hash * 59 + this.SpectatorPolicy.GetHashCode();
                if (this.TeamSize != null)
                    hash = hash * 59 + this.TeamSize.GetHashCode();
                if (this.TournamentGameMode != null)
                    hash = hash * 59 + this.TournamentGameMode.GetHashCode();
                if (this.TournamentPassbackDataPacket != null)
                    hash = hash * 59 + this.TournamentPassbackDataPacket.GetHashCode();
                if (this.TournamentPassbackUrl != null)
                    hash = hash * 59 + this.TournamentPassbackUrl.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
