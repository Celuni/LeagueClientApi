/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLobbyLobbyCustomGameLobby
    /// </summary>
    [DataContract]
    public partial class LolLobbyLobbyCustomGameLobby :  IEquatable<LolLobbyLobbyCustomGameLobby>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLobbyLobbyCustomGameLobby" /> class.
        /// </summary>
        /// <param name="Configuration">Configuration.</param>
        /// <param name="GameId">GameId.</param>
        /// <param name="LobbyName">LobbyName.</param>
        /// <param name="LobbyPassword">LobbyPassword.</param>
        /// <param name="PracticeGameRewardsDisabledReasons">PracticeGameRewardsDisabledReasons.</param>
        /// <param name="Spectators">Spectators.</param>
        /// <param name="TeamOne">TeamOne.</param>
        /// <param name="TeamTwo">TeamTwo.</param>
        public LolLobbyLobbyCustomGameLobby(LolLobbyLobbyCustomGameConfiguration Configuration = default(LolLobbyLobbyCustomGameConfiguration), long? GameId = default(long?), string LobbyName = default(string), string LobbyPassword = default(string), List<string> PracticeGameRewardsDisabledReasons = default(List<string>), List<LolLobbyLobbyMember> Spectators = default(List<LolLobbyLobbyMember>), List<LolLobbyLobbyMember> TeamOne = default(List<LolLobbyLobbyMember>), List<LolLobbyLobbyMember> TeamTwo = default(List<LolLobbyLobbyMember>))
        {
            this.Configuration = Configuration;
            this.GameId = GameId;
            this.LobbyName = LobbyName;
            this.LobbyPassword = LobbyPassword;
            this.PracticeGameRewardsDisabledReasons = PracticeGameRewardsDisabledReasons;
            this.Spectators = Spectators;
            this.TeamOne = TeamOne;
            this.TeamTwo = TeamTwo;
        }
        
        /// <summary>
        /// Gets or Sets Configuration
        /// </summary>
        [DataMember(Name="configuration", EmitDefaultValue=false)]
        public LolLobbyLobbyCustomGameConfiguration Configuration { get; set; }

        /// <summary>
        /// Gets or Sets GameId
        /// </summary>
        [DataMember(Name="gameId", EmitDefaultValue=false)]
        public long? GameId { get; set; }

        /// <summary>
        /// Gets or Sets LobbyName
        /// </summary>
        [DataMember(Name="lobbyName", EmitDefaultValue=false)]
        public string LobbyName { get; set; }

        /// <summary>
        /// Gets or Sets LobbyPassword
        /// </summary>
        [DataMember(Name="lobbyPassword", EmitDefaultValue=false)]
        public string LobbyPassword { get; set; }

        /// <summary>
        /// Gets or Sets PracticeGameRewardsDisabledReasons
        /// </summary>
        [DataMember(Name="practiceGameRewardsDisabledReasons", EmitDefaultValue=false)]
        public List<string> PracticeGameRewardsDisabledReasons { get; set; }

        /// <summary>
        /// Gets or Sets Spectators
        /// </summary>
        [DataMember(Name="spectators", EmitDefaultValue=false)]
        public List<LolLobbyLobbyMember> Spectators { get; set; }

        /// <summary>
        /// Gets or Sets TeamOne
        /// </summary>
        [DataMember(Name="teamOne", EmitDefaultValue=false)]
        public List<LolLobbyLobbyMember> TeamOne { get; set; }

        /// <summary>
        /// Gets or Sets TeamTwo
        /// </summary>
        [DataMember(Name="teamTwo", EmitDefaultValue=false)]
        public List<LolLobbyLobbyMember> TeamTwo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLobbyLobbyCustomGameLobby {\n");
            sb.Append("  Configuration: ").Append(Configuration).Append("\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  LobbyName: ").Append(LobbyName).Append("\n");
            sb.Append("  LobbyPassword: ").Append(LobbyPassword).Append("\n");
            sb.Append("  PracticeGameRewardsDisabledReasons: ").Append(PracticeGameRewardsDisabledReasons).Append("\n");
            sb.Append("  Spectators: ").Append(Spectators).Append("\n");
            sb.Append("  TeamOne: ").Append(TeamOne).Append("\n");
            sb.Append("  TeamTwo: ").Append(TeamTwo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLobbyLobbyCustomGameLobby);
        }

        /// <summary>
        /// Returns true if LolLobbyLobbyCustomGameLobby instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLobbyLobbyCustomGameLobby to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLobbyLobbyCustomGameLobby other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Configuration == other.Configuration ||
                    this.Configuration != null &&
                    this.Configuration.Equals(other.Configuration)
                ) && 
                (
                    this.GameId == other.GameId ||
                    this.GameId != null &&
                    this.GameId.Equals(other.GameId)
                ) && 
                (
                    this.LobbyName == other.LobbyName ||
                    this.LobbyName != null &&
                    this.LobbyName.Equals(other.LobbyName)
                ) && 
                (
                    this.LobbyPassword == other.LobbyPassword ||
                    this.LobbyPassword != null &&
                    this.LobbyPassword.Equals(other.LobbyPassword)
                ) && 
                (
                    this.PracticeGameRewardsDisabledReasons == other.PracticeGameRewardsDisabledReasons ||
                    this.PracticeGameRewardsDisabledReasons != null &&
                    this.PracticeGameRewardsDisabledReasons.SequenceEqual(other.PracticeGameRewardsDisabledReasons)
                ) && 
                (
                    this.Spectators == other.Spectators ||
                    this.Spectators != null &&
                    this.Spectators.SequenceEqual(other.Spectators)
                ) && 
                (
                    this.TeamOne == other.TeamOne ||
                    this.TeamOne != null &&
                    this.TeamOne.SequenceEqual(other.TeamOne)
                ) && 
                (
                    this.TeamTwo == other.TeamTwo ||
                    this.TeamTwo != null &&
                    this.TeamTwo.SequenceEqual(other.TeamTwo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Configuration != null)
                    hash = hash * 59 + this.Configuration.GetHashCode();
                if (this.GameId != null)
                    hash = hash * 59 + this.GameId.GetHashCode();
                if (this.LobbyName != null)
                    hash = hash * 59 + this.LobbyName.GetHashCode();
                if (this.LobbyPassword != null)
                    hash = hash * 59 + this.LobbyPassword.GetHashCode();
                if (this.PracticeGameRewardsDisabledReasons != null)
                    hash = hash * 59 + this.PracticeGameRewardsDisabledReasons.GetHashCode();
                if (this.Spectators != null)
                    hash = hash * 59 + this.Spectators.GetHashCode();
                if (this.TeamOne != null)
                    hash = hash * 59 + this.TeamOne.GetHashCode();
                if (this.TeamTwo != null)
                    hash = hash * 59 + this.TeamTwo.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
