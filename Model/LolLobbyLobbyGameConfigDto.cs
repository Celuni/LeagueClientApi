/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLobbyLobbyGameConfigDto
    /// </summary>
    [DataContract]
    public partial class LolLobbyLobbyGameConfigDto :  IEquatable<LolLobbyLobbyGameConfigDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLobbyLobbyGameConfigDto" /> class.
        /// </summary>
        /// <param name="AllowablePremadeSizes">AllowablePremadeSizes.</param>
        /// <param name="CustomLobbyName">CustomLobbyName.</param>
        /// <param name="CustomMutatorName">CustomMutatorName.</param>
        /// <param name="CustomRewardsDisabledReasons">CustomRewardsDisabledReasons.</param>
        /// <param name="CustomSpectatorPolicy">CustomSpectatorPolicy.</param>
        /// <param name="CustomSpectators">CustomSpectators.</param>
        /// <param name="CustomTeam100">CustomTeam100.</param>
        /// <param name="CustomTeam200">CustomTeam200.</param>
        /// <param name="GameMode">GameMode.</param>
        /// <param name="GameMutator">GameMutator.</param>
        /// <param name="IsCustom">IsCustom.</param>
        /// <param name="IsLobbyFull">IsLobbyFull.</param>
        /// <param name="IsTeamBuilderManaged">IsTeamBuilderManaged.</param>
        /// <param name="MapId">MapId.</param>
        /// <param name="MaxHumanPlayers">MaxHumanPlayers.</param>
        /// <param name="MaxLobbySize">MaxLobbySize.</param>
        /// <param name="MaxTeamSize">MaxTeamSize.</param>
        /// <param name="PickType">PickType.</param>
        /// <param name="PremadeSizeAllowed">PremadeSizeAllowed.</param>
        /// <param name="QueueId">QueueId.</param>
        /// <param name="ShowPositionSelector">ShowPositionSelector.</param>
        public LolLobbyLobbyGameConfigDto(List<int?> AllowablePremadeSizes = default(List<int?>), string CustomLobbyName = default(string), string CustomMutatorName = default(string), List<string> CustomRewardsDisabledReasons = default(List<string>), LolLobbyQueueCustomGameSpectatorPolicy CustomSpectatorPolicy = default(LolLobbyQueueCustomGameSpectatorPolicy), List<LolLobbyLobbyParticipantDto> CustomSpectators = default(List<LolLobbyLobbyParticipantDto>), List<LolLobbyLobbyParticipantDto> CustomTeam100 = default(List<LolLobbyLobbyParticipantDto>), List<LolLobbyLobbyParticipantDto> CustomTeam200 = default(List<LolLobbyLobbyParticipantDto>), string GameMode = default(string), string GameMutator = default(string), bool? IsCustom = default(bool?), bool? IsLobbyFull = default(bool?), bool? IsTeamBuilderManaged = default(bool?), int? MapId = default(int?), int? MaxHumanPlayers = default(int?), int? MaxLobbySize = default(int?), int? MaxTeamSize = default(int?), string PickType = default(string), bool? PremadeSizeAllowed = default(bool?), int? QueueId = default(int?), bool? ShowPositionSelector = default(bool?))
        {
            this.AllowablePremadeSizes = AllowablePremadeSizes;
            this.CustomLobbyName = CustomLobbyName;
            this.CustomMutatorName = CustomMutatorName;
            this.CustomRewardsDisabledReasons = CustomRewardsDisabledReasons;
            this.CustomSpectatorPolicy = CustomSpectatorPolicy;
            this.CustomSpectators = CustomSpectators;
            this.CustomTeam100 = CustomTeam100;
            this.CustomTeam200 = CustomTeam200;
            this.GameMode = GameMode;
            this.GameMutator = GameMutator;
            this.IsCustom = IsCustom;
            this.IsLobbyFull = IsLobbyFull;
            this.IsTeamBuilderManaged = IsTeamBuilderManaged;
            this.MapId = MapId;
            this.MaxHumanPlayers = MaxHumanPlayers;
            this.MaxLobbySize = MaxLobbySize;
            this.MaxTeamSize = MaxTeamSize;
            this.PickType = PickType;
            this.PremadeSizeAllowed = PremadeSizeAllowed;
            this.QueueId = QueueId;
            this.ShowPositionSelector = ShowPositionSelector;
        }
        
        /// <summary>
        /// Gets or Sets AllowablePremadeSizes
        /// </summary>
        [DataMember(Name="allowablePremadeSizes", EmitDefaultValue=false)]
        public List<int?> AllowablePremadeSizes { get; set; }

        /// <summary>
        /// Gets or Sets CustomLobbyName
        /// </summary>
        [DataMember(Name="customLobbyName", EmitDefaultValue=false)]
        public string CustomLobbyName { get; set; }

        /// <summary>
        /// Gets or Sets CustomMutatorName
        /// </summary>
        [DataMember(Name="customMutatorName", EmitDefaultValue=false)]
        public string CustomMutatorName { get; set; }

        /// <summary>
        /// Gets or Sets CustomRewardsDisabledReasons
        /// </summary>
        [DataMember(Name="customRewardsDisabledReasons", EmitDefaultValue=false)]
        public List<string> CustomRewardsDisabledReasons { get; set; }

        /// <summary>
        /// Gets or Sets CustomSpectatorPolicy
        /// </summary>
        [DataMember(Name="customSpectatorPolicy", EmitDefaultValue=false)]
        public LolLobbyQueueCustomGameSpectatorPolicy CustomSpectatorPolicy { get; set; }

        /// <summary>
        /// Gets or Sets CustomSpectators
        /// </summary>
        [DataMember(Name="customSpectators", EmitDefaultValue=false)]
        public List<LolLobbyLobbyParticipantDto> CustomSpectators { get; set; }

        /// <summary>
        /// Gets or Sets CustomTeam100
        /// </summary>
        [DataMember(Name="customTeam100", EmitDefaultValue=false)]
        public List<LolLobbyLobbyParticipantDto> CustomTeam100 { get; set; }

        /// <summary>
        /// Gets or Sets CustomTeam200
        /// </summary>
        [DataMember(Name="customTeam200", EmitDefaultValue=false)]
        public List<LolLobbyLobbyParticipantDto> CustomTeam200 { get; set; }

        /// <summary>
        /// Gets or Sets GameMode
        /// </summary>
        [DataMember(Name="gameMode", EmitDefaultValue=false)]
        public string GameMode { get; set; }

        /// <summary>
        /// Gets or Sets GameMutator
        /// </summary>
        [DataMember(Name="gameMutator", EmitDefaultValue=false)]
        public string GameMutator { get; set; }

        /// <summary>
        /// Gets or Sets IsCustom
        /// </summary>
        [DataMember(Name="isCustom", EmitDefaultValue=false)]
        public bool? IsCustom { get; set; }

        /// <summary>
        /// Gets or Sets IsLobbyFull
        /// </summary>
        [DataMember(Name="isLobbyFull", EmitDefaultValue=false)]
        public bool? IsLobbyFull { get; set; }

        /// <summary>
        /// Gets or Sets IsTeamBuilderManaged
        /// </summary>
        [DataMember(Name="isTeamBuilderManaged", EmitDefaultValue=false)]
        public bool? IsTeamBuilderManaged { get; set; }

        /// <summary>
        /// Gets or Sets MapId
        /// </summary>
        [DataMember(Name="mapId", EmitDefaultValue=false)]
        public int? MapId { get; set; }

        /// <summary>
        /// Gets or Sets MaxHumanPlayers
        /// </summary>
        [DataMember(Name="maxHumanPlayers", EmitDefaultValue=false)]
        public int? MaxHumanPlayers { get; set; }

        /// <summary>
        /// Gets or Sets MaxLobbySize
        /// </summary>
        [DataMember(Name="maxLobbySize", EmitDefaultValue=false)]
        public int? MaxLobbySize { get; set; }

        /// <summary>
        /// Gets or Sets MaxTeamSize
        /// </summary>
        [DataMember(Name="maxTeamSize", EmitDefaultValue=false)]
        public int? MaxTeamSize { get; set; }

        /// <summary>
        /// Gets or Sets PickType
        /// </summary>
        [DataMember(Name="pickType", EmitDefaultValue=false)]
        public string PickType { get; set; }

        /// <summary>
        /// Gets or Sets PremadeSizeAllowed
        /// </summary>
        [DataMember(Name="premadeSizeAllowed", EmitDefaultValue=false)]
        public bool? PremadeSizeAllowed { get; set; }

        /// <summary>
        /// Gets or Sets QueueId
        /// </summary>
        [DataMember(Name="queueId", EmitDefaultValue=false)]
        public int? QueueId { get; set; }

        /// <summary>
        /// Gets or Sets ShowPositionSelector
        /// </summary>
        [DataMember(Name="showPositionSelector", EmitDefaultValue=false)]
        public bool? ShowPositionSelector { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLobbyLobbyGameConfigDto {\n");
            sb.Append("  AllowablePremadeSizes: ").Append(AllowablePremadeSizes).Append("\n");
            sb.Append("  CustomLobbyName: ").Append(CustomLobbyName).Append("\n");
            sb.Append("  CustomMutatorName: ").Append(CustomMutatorName).Append("\n");
            sb.Append("  CustomRewardsDisabledReasons: ").Append(CustomRewardsDisabledReasons).Append("\n");
            sb.Append("  CustomSpectatorPolicy: ").Append(CustomSpectatorPolicy).Append("\n");
            sb.Append("  CustomSpectators: ").Append(CustomSpectators).Append("\n");
            sb.Append("  CustomTeam100: ").Append(CustomTeam100).Append("\n");
            sb.Append("  CustomTeam200: ").Append(CustomTeam200).Append("\n");
            sb.Append("  GameMode: ").Append(GameMode).Append("\n");
            sb.Append("  GameMutator: ").Append(GameMutator).Append("\n");
            sb.Append("  IsCustom: ").Append(IsCustom).Append("\n");
            sb.Append("  IsLobbyFull: ").Append(IsLobbyFull).Append("\n");
            sb.Append("  IsTeamBuilderManaged: ").Append(IsTeamBuilderManaged).Append("\n");
            sb.Append("  MapId: ").Append(MapId).Append("\n");
            sb.Append("  MaxHumanPlayers: ").Append(MaxHumanPlayers).Append("\n");
            sb.Append("  MaxLobbySize: ").Append(MaxLobbySize).Append("\n");
            sb.Append("  MaxTeamSize: ").Append(MaxTeamSize).Append("\n");
            sb.Append("  PickType: ").Append(PickType).Append("\n");
            sb.Append("  PremadeSizeAllowed: ").Append(PremadeSizeAllowed).Append("\n");
            sb.Append("  QueueId: ").Append(QueueId).Append("\n");
            sb.Append("  ShowPositionSelector: ").Append(ShowPositionSelector).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLobbyLobbyGameConfigDto);
        }

        /// <summary>
        /// Returns true if LolLobbyLobbyGameConfigDto instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLobbyLobbyGameConfigDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLobbyLobbyGameConfigDto other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AllowablePremadeSizes == other.AllowablePremadeSizes ||
                    this.AllowablePremadeSizes != null &&
                    this.AllowablePremadeSizes.SequenceEqual(other.AllowablePremadeSizes)
                ) && 
                (
                    this.CustomLobbyName == other.CustomLobbyName ||
                    this.CustomLobbyName != null &&
                    this.CustomLobbyName.Equals(other.CustomLobbyName)
                ) && 
                (
                    this.CustomMutatorName == other.CustomMutatorName ||
                    this.CustomMutatorName != null &&
                    this.CustomMutatorName.Equals(other.CustomMutatorName)
                ) && 
                (
                    this.CustomRewardsDisabledReasons == other.CustomRewardsDisabledReasons ||
                    this.CustomRewardsDisabledReasons != null &&
                    this.CustomRewardsDisabledReasons.SequenceEqual(other.CustomRewardsDisabledReasons)
                ) && 
                (
                    this.CustomSpectatorPolicy == other.CustomSpectatorPolicy ||
                    this.CustomSpectatorPolicy != null &&
                    this.CustomSpectatorPolicy.Equals(other.CustomSpectatorPolicy)
                ) && 
                (
                    this.CustomSpectators == other.CustomSpectators ||
                    this.CustomSpectators != null &&
                    this.CustomSpectators.SequenceEqual(other.CustomSpectators)
                ) && 
                (
                    this.CustomTeam100 == other.CustomTeam100 ||
                    this.CustomTeam100 != null &&
                    this.CustomTeam100.SequenceEqual(other.CustomTeam100)
                ) && 
                (
                    this.CustomTeam200 == other.CustomTeam200 ||
                    this.CustomTeam200 != null &&
                    this.CustomTeam200.SequenceEqual(other.CustomTeam200)
                ) && 
                (
                    this.GameMode == other.GameMode ||
                    this.GameMode != null &&
                    this.GameMode.Equals(other.GameMode)
                ) && 
                (
                    this.GameMutator == other.GameMutator ||
                    this.GameMutator != null &&
                    this.GameMutator.Equals(other.GameMutator)
                ) && 
                (
                    this.IsCustom == other.IsCustom ||
                    this.IsCustom != null &&
                    this.IsCustom.Equals(other.IsCustom)
                ) && 
                (
                    this.IsLobbyFull == other.IsLobbyFull ||
                    this.IsLobbyFull != null &&
                    this.IsLobbyFull.Equals(other.IsLobbyFull)
                ) && 
                (
                    this.IsTeamBuilderManaged == other.IsTeamBuilderManaged ||
                    this.IsTeamBuilderManaged != null &&
                    this.IsTeamBuilderManaged.Equals(other.IsTeamBuilderManaged)
                ) && 
                (
                    this.MapId == other.MapId ||
                    this.MapId != null &&
                    this.MapId.Equals(other.MapId)
                ) && 
                (
                    this.MaxHumanPlayers == other.MaxHumanPlayers ||
                    this.MaxHumanPlayers != null &&
                    this.MaxHumanPlayers.Equals(other.MaxHumanPlayers)
                ) && 
                (
                    this.MaxLobbySize == other.MaxLobbySize ||
                    this.MaxLobbySize != null &&
                    this.MaxLobbySize.Equals(other.MaxLobbySize)
                ) && 
                (
                    this.MaxTeamSize == other.MaxTeamSize ||
                    this.MaxTeamSize != null &&
                    this.MaxTeamSize.Equals(other.MaxTeamSize)
                ) && 
                (
                    this.PickType == other.PickType ||
                    this.PickType != null &&
                    this.PickType.Equals(other.PickType)
                ) && 
                (
                    this.PremadeSizeAllowed == other.PremadeSizeAllowed ||
                    this.PremadeSizeAllowed != null &&
                    this.PremadeSizeAllowed.Equals(other.PremadeSizeAllowed)
                ) && 
                (
                    this.QueueId == other.QueueId ||
                    this.QueueId != null &&
                    this.QueueId.Equals(other.QueueId)
                ) && 
                (
                    this.ShowPositionSelector == other.ShowPositionSelector ||
                    this.ShowPositionSelector != null &&
                    this.ShowPositionSelector.Equals(other.ShowPositionSelector)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AllowablePremadeSizes != null)
                    hash = hash * 59 + this.AllowablePremadeSizes.GetHashCode();
                if (this.CustomLobbyName != null)
                    hash = hash * 59 + this.CustomLobbyName.GetHashCode();
                if (this.CustomMutatorName != null)
                    hash = hash * 59 + this.CustomMutatorName.GetHashCode();
                if (this.CustomRewardsDisabledReasons != null)
                    hash = hash * 59 + this.CustomRewardsDisabledReasons.GetHashCode();
                if (this.CustomSpectatorPolicy != null)
                    hash = hash * 59 + this.CustomSpectatorPolicy.GetHashCode();
                if (this.CustomSpectators != null)
                    hash = hash * 59 + this.CustomSpectators.GetHashCode();
                if (this.CustomTeam100 != null)
                    hash = hash * 59 + this.CustomTeam100.GetHashCode();
                if (this.CustomTeam200 != null)
                    hash = hash * 59 + this.CustomTeam200.GetHashCode();
                if (this.GameMode != null)
                    hash = hash * 59 + this.GameMode.GetHashCode();
                if (this.GameMutator != null)
                    hash = hash * 59 + this.GameMutator.GetHashCode();
                if (this.IsCustom != null)
                    hash = hash * 59 + this.IsCustom.GetHashCode();
                if (this.IsLobbyFull != null)
                    hash = hash * 59 + this.IsLobbyFull.GetHashCode();
                if (this.IsTeamBuilderManaged != null)
                    hash = hash * 59 + this.IsTeamBuilderManaged.GetHashCode();
                if (this.MapId != null)
                    hash = hash * 59 + this.MapId.GetHashCode();
                if (this.MaxHumanPlayers != null)
                    hash = hash * 59 + this.MaxHumanPlayers.GetHashCode();
                if (this.MaxLobbySize != null)
                    hash = hash * 59 + this.MaxLobbySize.GetHashCode();
                if (this.MaxTeamSize != null)
                    hash = hash * 59 + this.MaxTeamSize.GetHashCode();
                if (this.PickType != null)
                    hash = hash * 59 + this.PickType.GetHashCode();
                if (this.PremadeSizeAllowed != null)
                    hash = hash * 59 + this.PremadeSizeAllowed.GetHashCode();
                if (this.QueueId != null)
                    hash = hash * 59 + this.QueueId.GetHashCode();
                if (this.ShowPositionSelector != null)
                    hash = hash * 59 + this.ShowPositionSelector.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
