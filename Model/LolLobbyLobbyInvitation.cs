/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLobbyLobbyInvitation
    /// </summary>
    [DataContract]
    public partial class LolLobbyLobbyInvitation :  IEquatable<LolLobbyLobbyInvitation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLobbyLobbyInvitation" /> class.
        /// </summary>
        /// <param name="Eligibility">Eligibility.</param>
        /// <param name="ErrorType">ErrorType.</param>
        /// <param name="FromSummonerId">FromSummonerId.</param>
        /// <param name="FromSummonerName">FromSummonerName.</param>
        /// <param name="Id">Id.</param>
        /// <param name="InvitationMetaData">InvitationMetaData.</param>
        /// <param name="State">State.</param>
        /// <param name="Timestamp">Timestamp.</param>
        /// <param name="ToSummonerId">ToSummonerId.</param>
        /// <param name="ToSummonerName">ToSummonerName.</param>
        public LolLobbyLobbyInvitation(LolLobbyEligibility Eligibility = default(LolLobbyEligibility), string ErrorType = default(string), long? FromSummonerId = default(long?), string FromSummonerName = default(string), string Id = default(string), Object InvitationMetaData = default(Object), LolLobbyLobbyInvitationState State = default(LolLobbyLobbyInvitationState), string Timestamp = default(string), long? ToSummonerId = default(long?), string ToSummonerName = default(string))
        {
            this.Eligibility = Eligibility;
            this.ErrorType = ErrorType;
            this.FromSummonerId = FromSummonerId;
            this.FromSummonerName = FromSummonerName;
            this.Id = Id;
            this.InvitationMetaData = InvitationMetaData;
            this.State = State;
            this.Timestamp = Timestamp;
            this.ToSummonerId = ToSummonerId;
            this.ToSummonerName = ToSummonerName;
        }
        
        /// <summary>
        /// Gets or Sets Eligibility
        /// </summary>
        [DataMember(Name="eligibility", EmitDefaultValue=false)]
        public LolLobbyEligibility Eligibility { get; set; }

        /// <summary>
        /// Gets or Sets ErrorType
        /// </summary>
        [DataMember(Name="errorType", EmitDefaultValue=false)]
        public string ErrorType { get; set; }

        /// <summary>
        /// Gets or Sets FromSummonerId
        /// </summary>
        [DataMember(Name="fromSummonerId", EmitDefaultValue=false)]
        public long? FromSummonerId { get; set; }

        /// <summary>
        /// Gets or Sets FromSummonerName
        /// </summary>
        [DataMember(Name="fromSummonerName", EmitDefaultValue=false)]
        public string FromSummonerName { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets InvitationMetaData
        /// </summary>
        [DataMember(Name="invitationMetaData", EmitDefaultValue=false)]
        public Object InvitationMetaData { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public LolLobbyLobbyInvitationState State { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets ToSummonerId
        /// </summary>
        [DataMember(Name="toSummonerId", EmitDefaultValue=false)]
        public long? ToSummonerId { get; set; }

        /// <summary>
        /// Gets or Sets ToSummonerName
        /// </summary>
        [DataMember(Name="toSummonerName", EmitDefaultValue=false)]
        public string ToSummonerName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLobbyLobbyInvitation {\n");
            sb.Append("  Eligibility: ").Append(Eligibility).Append("\n");
            sb.Append("  ErrorType: ").Append(ErrorType).Append("\n");
            sb.Append("  FromSummonerId: ").Append(FromSummonerId).Append("\n");
            sb.Append("  FromSummonerName: ").Append(FromSummonerName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InvitationMetaData: ").Append(InvitationMetaData).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  ToSummonerId: ").Append(ToSummonerId).Append("\n");
            sb.Append("  ToSummonerName: ").Append(ToSummonerName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLobbyLobbyInvitation);
        }

        /// <summary>
        /// Returns true if LolLobbyLobbyInvitation instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLobbyLobbyInvitation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLobbyLobbyInvitation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Eligibility == other.Eligibility ||
                    this.Eligibility != null &&
                    this.Eligibility.Equals(other.Eligibility)
                ) && 
                (
                    this.ErrorType == other.ErrorType ||
                    this.ErrorType != null &&
                    this.ErrorType.Equals(other.ErrorType)
                ) && 
                (
                    this.FromSummonerId == other.FromSummonerId ||
                    this.FromSummonerId != null &&
                    this.FromSummonerId.Equals(other.FromSummonerId)
                ) && 
                (
                    this.FromSummonerName == other.FromSummonerName ||
                    this.FromSummonerName != null &&
                    this.FromSummonerName.Equals(other.FromSummonerName)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.InvitationMetaData == other.InvitationMetaData ||
                    this.InvitationMetaData != null &&
                    this.InvitationMetaData.Equals(other.InvitationMetaData)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    this.ToSummonerId == other.ToSummonerId ||
                    this.ToSummonerId != null &&
                    this.ToSummonerId.Equals(other.ToSummonerId)
                ) && 
                (
                    this.ToSummonerName == other.ToSummonerName ||
                    this.ToSummonerName != null &&
                    this.ToSummonerName.Equals(other.ToSummonerName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Eligibility != null)
                    hash = hash * 59 + this.Eligibility.GetHashCode();
                if (this.ErrorType != null)
                    hash = hash * 59 + this.ErrorType.GetHashCode();
                if (this.FromSummonerId != null)
                    hash = hash * 59 + this.FromSummonerId.GetHashCode();
                if (this.FromSummonerName != null)
                    hash = hash * 59 + this.FromSummonerName.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.InvitationMetaData != null)
                    hash = hash * 59 + this.InvitationMetaData.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                if (this.ToSummonerId != null)
                    hash = hash * 59 + this.ToSummonerId.GetHashCode();
                if (this.ToSummonerName != null)
                    hash = hash * 59 + this.ToSummonerName.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
