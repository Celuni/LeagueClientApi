/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLobbyLobbyLastQueuedLobby
    /// </summary>
    [DataContract]
    public partial class LolLobbyLobbyLastQueuedLobby :  IEquatable<LolLobbyLobbyLastQueuedLobby>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLobbyLobbyLastQueuedLobby" /> class.
        /// </summary>
        /// <param name="CanPlayAgain">CanPlayAgain.</param>
        /// <param name="Members">Members.</param>
        /// <param name="QueueId">QueueId.</param>
        /// <param name="WasOwner">WasOwner.</param>
        public LolLobbyLobbyLastQueuedLobby(bool? CanPlayAgain = default(bool?), List<LolLobbyLobbyLastQueuedMember> Members = default(List<LolLobbyLobbyLastQueuedMember>), int? QueueId = default(int?), bool? WasOwner = default(bool?))
        {
            this.CanPlayAgain = CanPlayAgain;
            this.Members = Members;
            this.QueueId = QueueId;
            this.WasOwner = WasOwner;
        }
        
        /// <summary>
        /// Gets or Sets CanPlayAgain
        /// </summary>
        [DataMember(Name="canPlayAgain", EmitDefaultValue=false)]
        public bool? CanPlayAgain { get; set; }

        /// <summary>
        /// Gets or Sets Members
        /// </summary>
        [DataMember(Name="members", EmitDefaultValue=false)]
        public List<LolLobbyLobbyLastQueuedMember> Members { get; set; }

        /// <summary>
        /// Gets or Sets QueueId
        /// </summary>
        [DataMember(Name="queueId", EmitDefaultValue=false)]
        public int? QueueId { get; set; }

        /// <summary>
        /// Gets or Sets WasOwner
        /// </summary>
        [DataMember(Name="wasOwner", EmitDefaultValue=false)]
        public bool? WasOwner { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLobbyLobbyLastQueuedLobby {\n");
            sb.Append("  CanPlayAgain: ").Append(CanPlayAgain).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  QueueId: ").Append(QueueId).Append("\n");
            sb.Append("  WasOwner: ").Append(WasOwner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLobbyLobbyLastQueuedLobby);
        }

        /// <summary>
        /// Returns true if LolLobbyLobbyLastQueuedLobby instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLobbyLobbyLastQueuedLobby to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLobbyLobbyLastQueuedLobby other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CanPlayAgain == other.CanPlayAgain ||
                    this.CanPlayAgain != null &&
                    this.CanPlayAgain.Equals(other.CanPlayAgain)
                ) && 
                (
                    this.Members == other.Members ||
                    this.Members != null &&
                    this.Members.SequenceEqual(other.Members)
                ) && 
                (
                    this.QueueId == other.QueueId ||
                    this.QueueId != null &&
                    this.QueueId.Equals(other.QueueId)
                ) && 
                (
                    this.WasOwner == other.WasOwner ||
                    this.WasOwner != null &&
                    this.WasOwner.Equals(other.WasOwner)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CanPlayAgain != null)
                    hash = hash * 59 + this.CanPlayAgain.GetHashCode();
                if (this.Members != null)
                    hash = hash * 59 + this.Members.GetHashCode();
                if (this.QueueId != null)
                    hash = hash * 59 + this.QueueId.GetHashCode();
                if (this.WasOwner != null)
                    hash = hash * 59 + this.WasOwner.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
