/* namespace LeagueClientApi.Model
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLobbyLobbyParticipantDto
    /// </summary>
    [DataContract]
    public partial class LolLobbyLobbyParticipantDto :  IEquatable<LolLobbyLobbyParticipantDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLobbyLobbyParticipantDto" /> class.
        /// </summary>
        /// <param name="AllowedChangeActivity">AllowedChangeActivity.</param>
        /// <param name="AllowedInviteOthers">AllowedInviteOthers.</param>
        /// <param name="AllowedKickOthers">AllowedKickOthers.</param>
        /// <param name="AllowedStartActivity">AllowedStartActivity.</param>
        /// <param name="AllowedToggleInvite">AllowedToggleInvite.</param>
        /// <param name="AutoFillEligible">AutoFillEligible.</param>
        /// <param name="AutoFillProtectedForPromos">AutoFillProtectedForPromos.</param>
        /// <param name="AutoFillProtectedForSoloing">AutoFillProtectedForSoloing.</param>
        /// <param name="AutoFillProtectedForStreaking">AutoFillProtectedForStreaking.</param>
        /// <param name="BotChampionId">BotChampionId.</param>
        /// <param name="BotDifficulty">BotDifficulty.</param>
        /// <param name="BotId">BotId.</param>
        /// <param name="FirstPositionPreference">FirstPositionPreference.</param>
        /// <param name="IsBot">IsBot.</param>
        /// <param name="IsLeader">IsLeader.</param>
        /// <param name="IsSpectator">IsSpectator.</param>
        /// <param name="Puuid">Puuid.</param>
        /// <param name="Ready">Ready.</param>
        /// <param name="SecondPositionPreference">SecondPositionPreference.</param>
        /// <param name="ShowGhostedBanner">ShowGhostedBanner.</param>
        /// <param name="SummonerIconId">SummonerIconId.</param>
        /// <param name="SummonerId">SummonerId.</param>
        /// <param name="SummonerName">SummonerName.</param>
        /// <param name="TeamId">TeamId.</param>
        public LolLobbyLobbyParticipantDto(bool? AllowedChangeActivity = default(bool?), bool? AllowedInviteOthers = default(bool?), bool? AllowedKickOthers = default(bool?), bool? AllowedStartActivity = default(bool?), bool? AllowedToggleInvite = default(bool?), bool? AutoFillEligible = default(bool?), bool? AutoFillProtectedForPromos = default(bool?), bool? AutoFillProtectedForSoloing = default(bool?), bool? AutoFillProtectedForStreaking = default(bool?), int? BotChampionId = default(int?), LolLobbyLobbyBotDifficulty BotDifficulty = default(LolLobbyLobbyBotDifficulty), string BotId = default(string), string FirstPositionPreference = default(string), bool? IsBot = default(bool?), bool? IsLeader = default(bool?), bool? IsSpectator = default(bool?), string Puuid = default(string), bool? Ready = default(bool?), string SecondPositionPreference = default(string), bool? ShowGhostedBanner = default(bool?), int? SummonerIconId = default(int?), long? SummonerId = default(long?), string SummonerName = default(string), int? TeamId = default(int?))
        {
            this.AllowedChangeActivity = AllowedChangeActivity;
            this.AllowedInviteOthers = AllowedInviteOthers;
            this.AllowedKickOthers = AllowedKickOthers;
            this.AllowedStartActivity = AllowedStartActivity;
            this.AllowedToggleInvite = AllowedToggleInvite;
            this.AutoFillEligible = AutoFillEligible;
            this.AutoFillProtectedForPromos = AutoFillProtectedForPromos;
            this.AutoFillProtectedForSoloing = AutoFillProtectedForSoloing;
            this.AutoFillProtectedForStreaking = AutoFillProtectedForStreaking;
            this.BotChampionId = BotChampionId;
            this.BotDifficulty = BotDifficulty;
            this.BotId = BotId;
            this.FirstPositionPreference = FirstPositionPreference;
            this.IsBot = IsBot;
            this.IsLeader = IsLeader;
            this.IsSpectator = IsSpectator;
            this.Puuid = Puuid;
            this.Ready = Ready;
            this.SecondPositionPreference = SecondPositionPreference;
            this.ShowGhostedBanner = ShowGhostedBanner;
            this.SummonerIconId = SummonerIconId;
            this.SummonerId = SummonerId;
            this.SummonerName = SummonerName;
            this.TeamId = TeamId;
        }
        
        /// <summary>
        /// Gets or Sets AllowedChangeActivity
        /// </summary>
        [DataMember(Name="allowedChangeActivity", EmitDefaultValue=false)]
        public bool? AllowedChangeActivity { get; set; }

        /// <summary>
        /// Gets or Sets AllowedInviteOthers
        /// </summary>
        [DataMember(Name="allowedInviteOthers", EmitDefaultValue=false)]
        public bool? AllowedInviteOthers { get; set; }

        /// <summary>
        /// Gets or Sets AllowedKickOthers
        /// </summary>
        [DataMember(Name="allowedKickOthers", EmitDefaultValue=false)]
        public bool? AllowedKickOthers { get; set; }

        /// <summary>
        /// Gets or Sets AllowedStartActivity
        /// </summary>
        [DataMember(Name="allowedStartActivity", EmitDefaultValue=false)]
        public bool? AllowedStartActivity { get; set; }

        /// <summary>
        /// Gets or Sets AllowedToggleInvite
        /// </summary>
        [DataMember(Name="allowedToggleInvite", EmitDefaultValue=false)]
        public bool? AllowedToggleInvite { get; set; }

        /// <summary>
        /// Gets or Sets AutoFillEligible
        /// </summary>
        [DataMember(Name="autoFillEligible", EmitDefaultValue=false)]
        public bool? AutoFillEligible { get; set; }

        /// <summary>
        /// Gets or Sets AutoFillProtectedForPromos
        /// </summary>
        [DataMember(Name="autoFillProtectedForPromos", EmitDefaultValue=false)]
        public bool? AutoFillProtectedForPromos { get; set; }

        /// <summary>
        /// Gets or Sets AutoFillProtectedForSoloing
        /// </summary>
        [DataMember(Name="autoFillProtectedForSoloing", EmitDefaultValue=false)]
        public bool? AutoFillProtectedForSoloing { get; set; }

        /// <summary>
        /// Gets or Sets AutoFillProtectedForStreaking
        /// </summary>
        [DataMember(Name="autoFillProtectedForStreaking", EmitDefaultValue=false)]
        public bool? AutoFillProtectedForStreaking { get; set; }

        /// <summary>
        /// Gets or Sets BotChampionId
        /// </summary>
        [DataMember(Name="botChampionId", EmitDefaultValue=false)]
        public int? BotChampionId { get; set; }

        /// <summary>
        /// Gets or Sets BotDifficulty
        /// </summary>
        [DataMember(Name="botDifficulty", EmitDefaultValue=false)]
        public LolLobbyLobbyBotDifficulty BotDifficulty { get; set; }

        /// <summary>
        /// Gets or Sets BotId
        /// </summary>
        [DataMember(Name="botId", EmitDefaultValue=false)]
        public string BotId { get; set; }

        /// <summary>
        /// Gets or Sets FirstPositionPreference
        /// </summary>
        [DataMember(Name="firstPositionPreference", EmitDefaultValue=false)]
        public string FirstPositionPreference { get; set; }

        /// <summary>
        /// Gets or Sets IsBot
        /// </summary>
        [DataMember(Name="isBot", EmitDefaultValue=false)]
        public bool? IsBot { get; set; }

        /// <summary>
        /// Gets or Sets IsLeader
        /// </summary>
        [DataMember(Name="isLeader", EmitDefaultValue=false)]
        public bool? IsLeader { get; set; }

        /// <summary>
        /// Gets or Sets IsSpectator
        /// </summary>
        [DataMember(Name="isSpectator", EmitDefaultValue=false)]
        public bool? IsSpectator { get; set; }

        /// <summary>
        /// Gets or Sets Puuid
        /// </summary>
        [DataMember(Name="puuid", EmitDefaultValue=false)]
        public string Puuid { get; set; }

        /// <summary>
        /// Gets or Sets Ready
        /// </summary>
        [DataMember(Name="ready", EmitDefaultValue=false)]
        public bool? Ready { get; set; }

        /// <summary>
        /// Gets or Sets SecondPositionPreference
        /// </summary>
        [DataMember(Name="secondPositionPreference", EmitDefaultValue=false)]
        public string SecondPositionPreference { get; set; }

        /// <summary>
        /// Gets or Sets ShowGhostedBanner
        /// </summary>
        [DataMember(Name="showGhostedBanner", EmitDefaultValue=false)]
        public bool? ShowGhostedBanner { get; set; }

        /// <summary>
        /// Gets or Sets SummonerIconId
        /// </summary>
        [DataMember(Name="summonerIconId", EmitDefaultValue=false)]
        public int? SummonerIconId { get; set; }

        /// <summary>
        /// Gets or Sets SummonerId
        /// </summary>
        [DataMember(Name="summonerId", EmitDefaultValue=false)]
        public long? SummonerId { get; set; }

        /// <summary>
        /// Gets or Sets SummonerName
        /// </summary>
        [DataMember(Name="summonerName", EmitDefaultValue=false)]
        public string SummonerName { get; set; }

        /// <summary>
        /// Gets or Sets TeamId
        /// </summary>
        [DataMember(Name="teamId", EmitDefaultValue=false)]
        public int? TeamId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLobbyLobbyParticipantDto {\n");
            sb.Append("  AllowedChangeActivity: ").Append(AllowedChangeActivity).Append("\n");
            sb.Append("  AllowedInviteOthers: ").Append(AllowedInviteOthers).Append("\n");
            sb.Append("  AllowedKickOthers: ").Append(AllowedKickOthers).Append("\n");
            sb.Append("  AllowedStartActivity: ").Append(AllowedStartActivity).Append("\n");
            sb.Append("  AllowedToggleInvite: ").Append(AllowedToggleInvite).Append("\n");
            sb.Append("  AutoFillEligible: ").Append(AutoFillEligible).Append("\n");
            sb.Append("  AutoFillProtectedForPromos: ").Append(AutoFillProtectedForPromos).Append("\n");
            sb.Append("  AutoFillProtectedForSoloing: ").Append(AutoFillProtectedForSoloing).Append("\n");
            sb.Append("  AutoFillProtectedForStreaking: ").Append(AutoFillProtectedForStreaking).Append("\n");
            sb.Append("  BotChampionId: ").Append(BotChampionId).Append("\n");
            sb.Append("  BotDifficulty: ").Append(BotDifficulty).Append("\n");
            sb.Append("  BotId: ").Append(BotId).Append("\n");
            sb.Append("  FirstPositionPreference: ").Append(FirstPositionPreference).Append("\n");
            sb.Append("  IsBot: ").Append(IsBot).Append("\n");
            sb.Append("  IsLeader: ").Append(IsLeader).Append("\n");
            sb.Append("  IsSpectator: ").Append(IsSpectator).Append("\n");
            sb.Append("  Puuid: ").Append(Puuid).Append("\n");
            sb.Append("  Ready: ").Append(Ready).Append("\n");
            sb.Append("  SecondPositionPreference: ").Append(SecondPositionPreference).Append("\n");
            sb.Append("  ShowGhostedBanner: ").Append(ShowGhostedBanner).Append("\n");
            sb.Append("  SummonerIconId: ").Append(SummonerIconId).Append("\n");
            sb.Append("  SummonerId: ").Append(SummonerId).Append("\n");
            sb.Append("  SummonerName: ").Append(SummonerName).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLobbyLobbyParticipantDto);
        }

        /// <summary>
        /// Returns true if LolLobbyLobbyParticipantDto instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLobbyLobbyParticipantDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLobbyLobbyParticipantDto other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AllowedChangeActivity == other.AllowedChangeActivity ||
                    this.AllowedChangeActivity != null &&
                    this.AllowedChangeActivity.Equals(other.AllowedChangeActivity)
                ) && 
                (
                    this.AllowedInviteOthers == other.AllowedInviteOthers ||
                    this.AllowedInviteOthers != null &&
                    this.AllowedInviteOthers.Equals(other.AllowedInviteOthers)
                ) && 
                (
                    this.AllowedKickOthers == other.AllowedKickOthers ||
                    this.AllowedKickOthers != null &&
                    this.AllowedKickOthers.Equals(other.AllowedKickOthers)
                ) && 
                (
                    this.AllowedStartActivity == other.AllowedStartActivity ||
                    this.AllowedStartActivity != null &&
                    this.AllowedStartActivity.Equals(other.AllowedStartActivity)
                ) && 
                (
                    this.AllowedToggleInvite == other.AllowedToggleInvite ||
                    this.AllowedToggleInvite != null &&
                    this.AllowedToggleInvite.Equals(other.AllowedToggleInvite)
                ) && 
                (
                    this.AutoFillEligible == other.AutoFillEligible ||
                    this.AutoFillEligible != null &&
                    this.AutoFillEligible.Equals(other.AutoFillEligible)
                ) && 
                (
                    this.AutoFillProtectedForPromos == other.AutoFillProtectedForPromos ||
                    this.AutoFillProtectedForPromos != null &&
                    this.AutoFillProtectedForPromos.Equals(other.AutoFillProtectedForPromos)
                ) && 
                (
                    this.AutoFillProtectedForSoloing == other.AutoFillProtectedForSoloing ||
                    this.AutoFillProtectedForSoloing != null &&
                    this.AutoFillProtectedForSoloing.Equals(other.AutoFillProtectedForSoloing)
                ) && 
                (
                    this.AutoFillProtectedForStreaking == other.AutoFillProtectedForStreaking ||
                    this.AutoFillProtectedForStreaking != null &&
                    this.AutoFillProtectedForStreaking.Equals(other.AutoFillProtectedForStreaking)
                ) && 
                (
                    this.BotChampionId == other.BotChampionId ||
                    this.BotChampionId != null &&
                    this.BotChampionId.Equals(other.BotChampionId)
                ) && 
                (
                    this.BotDifficulty == other.BotDifficulty ||
                    this.BotDifficulty != null &&
                    this.BotDifficulty.Equals(other.BotDifficulty)
                ) && 
                (
                    this.BotId == other.BotId ||
                    this.BotId != null &&
                    this.BotId.Equals(other.BotId)
                ) && 
                (
                    this.FirstPositionPreference == other.FirstPositionPreference ||
                    this.FirstPositionPreference != null &&
                    this.FirstPositionPreference.Equals(other.FirstPositionPreference)
                ) && 
                (
                    this.IsBot == other.IsBot ||
                    this.IsBot != null &&
                    this.IsBot.Equals(other.IsBot)
                ) && 
                (
                    this.IsLeader == other.IsLeader ||
                    this.IsLeader != null &&
                    this.IsLeader.Equals(other.IsLeader)
                ) && 
                (
                    this.IsSpectator == other.IsSpectator ||
                    this.IsSpectator != null &&
                    this.IsSpectator.Equals(other.IsSpectator)
                ) && 
                (
                    this.Puuid == other.Puuid ||
                    this.Puuid != null &&
                    this.Puuid.Equals(other.Puuid)
                ) && 
                (
                    this.Ready == other.Ready ||
                    this.Ready != null &&
                    this.Ready.Equals(other.Ready)
                ) && 
                (
                    this.SecondPositionPreference == other.SecondPositionPreference ||
                    this.SecondPositionPreference != null &&
                    this.SecondPositionPreference.Equals(other.SecondPositionPreference)
                ) && 
                (
                    this.ShowGhostedBanner == other.ShowGhostedBanner ||
                    this.ShowGhostedBanner != null &&
                    this.ShowGhostedBanner.Equals(other.ShowGhostedBanner)
                ) && 
                (
                    this.SummonerIconId == other.SummonerIconId ||
                    this.SummonerIconId != null &&
                    this.SummonerIconId.Equals(other.SummonerIconId)
                ) && 
                (
                    this.SummonerId == other.SummonerId ||
                    this.SummonerId != null &&
                    this.SummonerId.Equals(other.SummonerId)
                ) && 
                (
                    this.SummonerName == other.SummonerName ||
                    this.SummonerName != null &&
                    this.SummonerName.Equals(other.SummonerName)
                ) && 
                (
                    this.TeamId == other.TeamId ||
                    this.TeamId != null &&
                    this.TeamId.Equals(other.TeamId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AllowedChangeActivity != null)
                    hash = hash * 59 + this.AllowedChangeActivity.GetHashCode();
                if (this.AllowedInviteOthers != null)
                    hash = hash * 59 + this.AllowedInviteOthers.GetHashCode();
                if (this.AllowedKickOthers != null)
                    hash = hash * 59 + this.AllowedKickOthers.GetHashCode();
                if (this.AllowedStartActivity != null)
                    hash = hash * 59 + this.AllowedStartActivity.GetHashCode();
                if (this.AllowedToggleInvite != null)
                    hash = hash * 59 + this.AllowedToggleInvite.GetHashCode();
                if (this.AutoFillEligible != null)
                    hash = hash * 59 + this.AutoFillEligible.GetHashCode();
                if (this.AutoFillProtectedForPromos != null)
                    hash = hash * 59 + this.AutoFillProtectedForPromos.GetHashCode();
                if (this.AutoFillProtectedForSoloing != null)
                    hash = hash * 59 + this.AutoFillProtectedForSoloing.GetHashCode();
                if (this.AutoFillProtectedForStreaking != null)
                    hash = hash * 59 + this.AutoFillProtectedForStreaking.GetHashCode();
                if (this.BotChampionId != null)
                    hash = hash * 59 + this.BotChampionId.GetHashCode();
                if (this.BotDifficulty != null)
                    hash = hash * 59 + this.BotDifficulty.GetHashCode();
                if (this.BotId != null)
                    hash = hash * 59 + this.BotId.GetHashCode();
                if (this.FirstPositionPreference != null)
                    hash = hash * 59 + this.FirstPositionPreference.GetHashCode();
                if (this.IsBot != null)
                    hash = hash * 59 + this.IsBot.GetHashCode();
                if (this.IsLeader != null)
                    hash = hash * 59 + this.IsLeader.GetHashCode();
                if (this.IsSpectator != null)
                    hash = hash * 59 + this.IsSpectator.GetHashCode();
                if (this.Puuid != null)
                    hash = hash * 59 + this.Puuid.GetHashCode();
                if (this.Ready != null)
                    hash = hash * 59 + this.Ready.GetHashCode();
                if (this.SecondPositionPreference != null)
                    hash = hash * 59 + this.SecondPositionPreference.GetHashCode();
                if (this.ShowGhostedBanner != null)
                    hash = hash * 59 + this.ShowGhostedBanner.GetHashCode();
                if (this.SummonerIconId != null)
                    hash = hash * 59 + this.SummonerIconId.GetHashCode();
                if (this.SummonerId != null)
                    hash = hash * 59 + this.SummonerId.GetHashCode();
                if (this.SummonerName != null)
                    hash = hash * 59 + this.SummonerName.GetHashCode();
                if (this.TeamId != null)
                    hash = hash * 59 + this.TeamId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
