/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLobbyPartyDto
    /// </summary>
    [DataContract]
    public partial class LolLobbyPartyDto :  IEquatable<LolLobbyPartyDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLobbyPartyDto" /> class.
        /// </summary>
        /// <param name="ActiveRestrictions">ActiveRestrictions.</param>
        /// <param name="ActivityLocked">ActivityLocked.</param>
        /// <param name="ActivityResumeUtcMillis">ActivityResumeUtcMillis.</param>
        /// <param name="ActivityStartedUtcMillis">ActivityStartedUtcMillis.</param>
        /// <param name="Chat">Chat.</param>
        /// <param name="EligibilityHash">EligibilityHash.</param>
        /// <param name="GameMode">GameMode.</param>
        /// <param name="MaxPartySize">MaxPartySize.</param>
        /// <param name="PartyId">PartyId.</param>
        /// <param name="PartyType">PartyType.</param>
        /// <param name="PlatformId">PlatformId.</param>
        /// <param name="Players">Players.</param>
        /// <param name="Version">Version.</param>
        public LolLobbyPartyDto(LolLobbyQueueRestrictionDto ActiveRestrictions = default(LolLobbyQueueRestrictionDto), bool? ActivityLocked = default(bool?), long? ActivityResumeUtcMillis = default(long?), long? ActivityStartedUtcMillis = default(long?), LolLobbyPartyChatDto Chat = default(LolLobbyPartyChatDto), long? EligibilityHash = default(long?), LolLobbyGameModeDto GameMode = default(LolLobbyGameModeDto), int? MaxPartySize = default(int?), string PartyId = default(string), string PartyType = default(string), string PlatformId = default(string), List<LolLobbyPartyMemberDto> Players = default(List<LolLobbyPartyMemberDto>), long? Version = default(long?))
        {
            this.ActiveRestrictions = ActiveRestrictions;
            this.ActivityLocked = ActivityLocked;
            this.ActivityResumeUtcMillis = ActivityResumeUtcMillis;
            this.ActivityStartedUtcMillis = ActivityStartedUtcMillis;
            this.Chat = Chat;
            this.EligibilityHash = EligibilityHash;
            this.GameMode = GameMode;
            this.MaxPartySize = MaxPartySize;
            this.PartyId = PartyId;
            this.PartyType = PartyType;
            this.PlatformId = PlatformId;
            this.Players = Players;
            this.Version = Version;
        }
        
        /// <summary>
        /// Gets or Sets ActiveRestrictions
        /// </summary>
        [DataMember(Name="activeRestrictions", EmitDefaultValue=false)]
        public LolLobbyQueueRestrictionDto ActiveRestrictions { get; set; }

        /// <summary>
        /// Gets or Sets ActivityLocked
        /// </summary>
        [DataMember(Name="activityLocked", EmitDefaultValue=false)]
        public bool? ActivityLocked { get; set; }

        /// <summary>
        /// Gets or Sets ActivityResumeUtcMillis
        /// </summary>
        [DataMember(Name="activityResumeUtcMillis", EmitDefaultValue=false)]
        public long? ActivityResumeUtcMillis { get; set; }

        /// <summary>
        /// Gets or Sets ActivityStartedUtcMillis
        /// </summary>
        [DataMember(Name="activityStartedUtcMillis", EmitDefaultValue=false)]
        public long? ActivityStartedUtcMillis { get; set; }

        /// <summary>
        /// Gets or Sets Chat
        /// </summary>
        [DataMember(Name="chat", EmitDefaultValue=false)]
        public LolLobbyPartyChatDto Chat { get; set; }

        /// <summary>
        /// Gets or Sets EligibilityHash
        /// </summary>
        [DataMember(Name="eligibilityHash", EmitDefaultValue=false)]
        public long? EligibilityHash { get; set; }

        /// <summary>
        /// Gets or Sets GameMode
        /// </summary>
        [DataMember(Name="gameMode", EmitDefaultValue=false)]
        public LolLobbyGameModeDto GameMode { get; set; }

        /// <summary>
        /// Gets or Sets MaxPartySize
        /// </summary>
        [DataMember(Name="maxPartySize", EmitDefaultValue=false)]
        public int? MaxPartySize { get; set; }

        /// <summary>
        /// Gets or Sets PartyId
        /// </summary>
        [DataMember(Name="partyId", EmitDefaultValue=false)]
        public string PartyId { get; set; }

        /// <summary>
        /// Gets or Sets PartyType
        /// </summary>
        [DataMember(Name="partyType", EmitDefaultValue=false)]
        public string PartyType { get; set; }

        /// <summary>
        /// Gets or Sets PlatformId
        /// </summary>
        [DataMember(Name="platformId", EmitDefaultValue=false)]
        public string PlatformId { get; set; }

        /// <summary>
        /// Gets or Sets Players
        /// </summary>
        [DataMember(Name="players", EmitDefaultValue=false)]
        public List<LolLobbyPartyMemberDto> Players { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public long? Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLobbyPartyDto {\n");
            sb.Append("  ActiveRestrictions: ").Append(ActiveRestrictions).Append("\n");
            sb.Append("  ActivityLocked: ").Append(ActivityLocked).Append("\n");
            sb.Append("  ActivityResumeUtcMillis: ").Append(ActivityResumeUtcMillis).Append("\n");
            sb.Append("  ActivityStartedUtcMillis: ").Append(ActivityStartedUtcMillis).Append("\n");
            sb.Append("  Chat: ").Append(Chat).Append("\n");
            sb.Append("  EligibilityHash: ").Append(EligibilityHash).Append("\n");
            sb.Append("  GameMode: ").Append(GameMode).Append("\n");
            sb.Append("  MaxPartySize: ").Append(MaxPartySize).Append("\n");
            sb.Append("  PartyId: ").Append(PartyId).Append("\n");
            sb.Append("  PartyType: ").Append(PartyType).Append("\n");
            sb.Append("  PlatformId: ").Append(PlatformId).Append("\n");
            sb.Append("  Players: ").Append(Players).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLobbyPartyDto);
        }

        /// <summary>
        /// Returns true if LolLobbyPartyDto instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLobbyPartyDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLobbyPartyDto other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ActiveRestrictions == other.ActiveRestrictions ||
                    this.ActiveRestrictions != null &&
                    this.ActiveRestrictions.Equals(other.ActiveRestrictions)
                ) && 
                (
                    this.ActivityLocked == other.ActivityLocked ||
                    this.ActivityLocked != null &&
                    this.ActivityLocked.Equals(other.ActivityLocked)
                ) && 
                (
                    this.ActivityResumeUtcMillis == other.ActivityResumeUtcMillis ||
                    this.ActivityResumeUtcMillis != null &&
                    this.ActivityResumeUtcMillis.Equals(other.ActivityResumeUtcMillis)
                ) && 
                (
                    this.ActivityStartedUtcMillis == other.ActivityStartedUtcMillis ||
                    this.ActivityStartedUtcMillis != null &&
                    this.ActivityStartedUtcMillis.Equals(other.ActivityStartedUtcMillis)
                ) && 
                (
                    this.Chat == other.Chat ||
                    this.Chat != null &&
                    this.Chat.Equals(other.Chat)
                ) && 
                (
                    this.EligibilityHash == other.EligibilityHash ||
                    this.EligibilityHash != null &&
                    this.EligibilityHash.Equals(other.EligibilityHash)
                ) && 
                (
                    this.GameMode == other.GameMode ||
                    this.GameMode != null &&
                    this.GameMode.Equals(other.GameMode)
                ) && 
                (
                    this.MaxPartySize == other.MaxPartySize ||
                    this.MaxPartySize != null &&
                    this.MaxPartySize.Equals(other.MaxPartySize)
                ) && 
                (
                    this.PartyId == other.PartyId ||
                    this.PartyId != null &&
                    this.PartyId.Equals(other.PartyId)
                ) && 
                (
                    this.PartyType == other.PartyType ||
                    this.PartyType != null &&
                    this.PartyType.Equals(other.PartyType)
                ) && 
                (
                    this.PlatformId == other.PlatformId ||
                    this.PlatformId != null &&
                    this.PlatformId.Equals(other.PlatformId)
                ) && 
                (
                    this.Players == other.Players ||
                    this.Players != null &&
                    this.Players.SequenceEqual(other.Players)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ActiveRestrictions != null)
                    hash = hash * 59 + this.ActiveRestrictions.GetHashCode();
                if (this.ActivityLocked != null)
                    hash = hash * 59 + this.ActivityLocked.GetHashCode();
                if (this.ActivityResumeUtcMillis != null)
                    hash = hash * 59 + this.ActivityResumeUtcMillis.GetHashCode();
                if (this.ActivityStartedUtcMillis != null)
                    hash = hash * 59 + this.ActivityStartedUtcMillis.GetHashCode();
                if (this.Chat != null)
                    hash = hash * 59 + this.Chat.GetHashCode();
                if (this.EligibilityHash != null)
                    hash = hash * 59 + this.EligibilityHash.GetHashCode();
                if (this.GameMode != null)
                    hash = hash * 59 + this.GameMode.GetHashCode();
                if (this.MaxPartySize != null)
                    hash = hash * 59 + this.MaxPartySize.GetHashCode();
                if (this.PartyId != null)
                    hash = hash * 59 + this.PartyId.GetHashCode();
                if (this.PartyType != null)
                    hash = hash * 59 + this.PartyType.GetHashCode();
                if (this.PlatformId != null)
                    hash = hash * 59 + this.PlatformId.GetHashCode();
                if (this.Players != null)
                    hash = hash * 59 + this.Players.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
