/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLobbyPartyReward
    /// </summary>
    [DataContract]
    public partial class LolLobbyPartyReward :  IEquatable<LolLobbyPartyReward>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLobbyPartyReward" /> class.
        /// </summary>
        /// <param name="PremadeSize">PremadeSize.</param>
        /// <param name="Type">Type.</param>
        /// <param name="Value">Value.</param>
        public LolLobbyPartyReward(int? PremadeSize = default(int?), LolLobbyLobbyPartyRewardType Type = default(LolLobbyLobbyPartyRewardType), string Value = default(string))
        {
            this.PremadeSize = PremadeSize;
            this.Type = Type;
            this.Value = Value;
        }
        
        /// <summary>
        /// Gets or Sets PremadeSize
        /// </summary>
        [DataMember(Name="premadeSize", EmitDefaultValue=false)]
        public int? PremadeSize { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public LolLobbyLobbyPartyRewardType Type { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLobbyPartyReward {\n");
            sb.Append("  PremadeSize: ").Append(PremadeSize).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLobbyPartyReward);
        }

        /// <summary>
        /// Returns true if LolLobbyPartyReward instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLobbyPartyReward to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLobbyPartyReward other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PremadeSize == other.PremadeSize ||
                    this.PremadeSize != null &&
                    this.PremadeSize.Equals(other.PremadeSize)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PremadeSize != null)
                    hash = hash * 59 + this.PremadeSize.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
