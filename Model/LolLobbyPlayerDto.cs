/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLobbyPlayerDto
    /// </summary>
    [DataContract]
    public partial class LolLobbyPlayerDto :  IEquatable<LolLobbyPlayerDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLobbyPlayerDto" /> class.
        /// </summary>
        /// <param name="AccountId">AccountId.</param>
        /// <param name="AccountToken">AccountToken.</param>
        /// <param name="CreatedAt">CreatedAt.</param>
        /// <param name="CurrentParty">CurrentParty.</param>
        /// <param name="EligibilityHash">EligibilityHash.</param>
        /// <param name="InventoryToken">InventoryToken.</param>
        /// <param name="LeaguesToken">LeaguesToken.</param>
        /// <param name="Parties">Parties.</param>
        /// <param name="PlatformId">PlatformId.</param>
        /// <param name="Puuid">Puuid.</param>
        /// <param name="SummonerId">SummonerId.</param>
        /// <param name="SummonerToken">SummonerToken.</param>
        /// <param name="Version">Version.</param>
        public LolLobbyPlayerDto(long? AccountId = default(long?), string AccountToken = default(string), long? CreatedAt = default(long?), LolLobbyPartyDto CurrentParty = default(LolLobbyPartyDto), long? EligibilityHash = default(long?), string InventoryToken = default(string), string LeaguesToken = default(string), List<LolLobbyPartyMemberDto> Parties = default(List<LolLobbyPartyMemberDto>), string PlatformId = default(string), string Puuid = default(string), long? SummonerId = default(long?), string SummonerToken = default(string), long? Version = default(long?))
        {
            this.AccountId = AccountId;
            this.AccountToken = AccountToken;
            this.CreatedAt = CreatedAt;
            this.CurrentParty = CurrentParty;
            this.EligibilityHash = EligibilityHash;
            this.InventoryToken = InventoryToken;
            this.LeaguesToken = LeaguesToken;
            this.Parties = Parties;
            this.PlatformId = PlatformId;
            this.Puuid = Puuid;
            this.SummonerId = SummonerId;
            this.SummonerToken = SummonerToken;
            this.Version = Version;
        }
        
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public long? AccountId { get; set; }

        /// <summary>
        /// Gets or Sets AccountToken
        /// </summary>
        [DataMember(Name="accountToken", EmitDefaultValue=false)]
        public string AccountToken { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public long? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CurrentParty
        /// </summary>
        [DataMember(Name="currentParty", EmitDefaultValue=false)]
        public LolLobbyPartyDto CurrentParty { get; set; }

        /// <summary>
        /// Gets or Sets EligibilityHash
        /// </summary>
        [DataMember(Name="eligibilityHash", EmitDefaultValue=false)]
        public long? EligibilityHash { get; set; }

        /// <summary>
        /// Gets or Sets InventoryToken
        /// </summary>
        [DataMember(Name="inventoryToken", EmitDefaultValue=false)]
        public string InventoryToken { get; set; }

        /// <summary>
        /// Gets or Sets LeaguesToken
        /// </summary>
        [DataMember(Name="leaguesToken", EmitDefaultValue=false)]
        public string LeaguesToken { get; set; }

        /// <summary>
        /// Gets or Sets Parties
        /// </summary>
        [DataMember(Name="parties", EmitDefaultValue=false)]
        public List<LolLobbyPartyMemberDto> Parties { get; set; }

        /// <summary>
        /// Gets or Sets PlatformId
        /// </summary>
        [DataMember(Name="platformId", EmitDefaultValue=false)]
        public string PlatformId { get; set; }

        /// <summary>
        /// Gets or Sets Puuid
        /// </summary>
        [DataMember(Name="puuid", EmitDefaultValue=false)]
        public string Puuid { get; set; }

        /// <summary>
        /// Gets or Sets SummonerId
        /// </summary>
        [DataMember(Name="summonerId", EmitDefaultValue=false)]
        public long? SummonerId { get; set; }

        /// <summary>
        /// Gets or Sets SummonerToken
        /// </summary>
        [DataMember(Name="summonerToken", EmitDefaultValue=false)]
        public string SummonerToken { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public long? Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLobbyPlayerDto {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountToken: ").Append(AccountToken).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CurrentParty: ").Append(CurrentParty).Append("\n");
            sb.Append("  EligibilityHash: ").Append(EligibilityHash).Append("\n");
            sb.Append("  InventoryToken: ").Append(InventoryToken).Append("\n");
            sb.Append("  LeaguesToken: ").Append(LeaguesToken).Append("\n");
            sb.Append("  Parties: ").Append(Parties).Append("\n");
            sb.Append("  PlatformId: ").Append(PlatformId).Append("\n");
            sb.Append("  Puuid: ").Append(Puuid).Append("\n");
            sb.Append("  SummonerId: ").Append(SummonerId).Append("\n");
            sb.Append("  SummonerToken: ").Append(SummonerToken).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLobbyPlayerDto);
        }

        /// <summary>
        /// Returns true if LolLobbyPlayerDto instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLobbyPlayerDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLobbyPlayerDto other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.AccountToken == other.AccountToken ||
                    this.AccountToken != null &&
                    this.AccountToken.Equals(other.AccountToken)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.CurrentParty == other.CurrentParty ||
                    this.CurrentParty != null &&
                    this.CurrentParty.Equals(other.CurrentParty)
                ) && 
                (
                    this.EligibilityHash == other.EligibilityHash ||
                    this.EligibilityHash != null &&
                    this.EligibilityHash.Equals(other.EligibilityHash)
                ) && 
                (
                    this.InventoryToken == other.InventoryToken ||
                    this.InventoryToken != null &&
                    this.InventoryToken.Equals(other.InventoryToken)
                ) && 
                (
                    this.LeaguesToken == other.LeaguesToken ||
                    this.LeaguesToken != null &&
                    this.LeaguesToken.Equals(other.LeaguesToken)
                ) && 
                (
                    this.Parties == other.Parties ||
                    this.Parties != null &&
                    this.Parties.SequenceEqual(other.Parties)
                ) && 
                (
                    this.PlatformId == other.PlatformId ||
                    this.PlatformId != null &&
                    this.PlatformId.Equals(other.PlatformId)
                ) && 
                (
                    this.Puuid == other.Puuid ||
                    this.Puuid != null &&
                    this.Puuid.Equals(other.Puuid)
                ) && 
                (
                    this.SummonerId == other.SummonerId ||
                    this.SummonerId != null &&
                    this.SummonerId.Equals(other.SummonerId)
                ) && 
                (
                    this.SummonerToken == other.SummonerToken ||
                    this.SummonerToken != null &&
                    this.SummonerToken.Equals(other.SummonerToken)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.AccountToken != null)
                    hash = hash * 59 + this.AccountToken.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.CurrentParty != null)
                    hash = hash * 59 + this.CurrentParty.GetHashCode();
                if (this.EligibilityHash != null)
                    hash = hash * 59 + this.EligibilityHash.GetHashCode();
                if (this.InventoryToken != null)
                    hash = hash * 59 + this.InventoryToken.GetHashCode();
                if (this.LeaguesToken != null)
                    hash = hash * 59 + this.LeaguesToken.GetHashCode();
                if (this.Parties != null)
                    hash = hash * 59 + this.Parties.GetHashCode();
                if (this.PlatformId != null)
                    hash = hash * 59 + this.PlatformId.GetHashCode();
                if (this.Puuid != null)
                    hash = hash * 59 + this.Puuid.GetHashCode();
                if (this.SummonerId != null)
                    hash = hash * 59 + this.SummonerId.GetHashCode();
                if (this.SummonerToken != null)
                    hash = hash * 59 + this.SummonerToken.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
