/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLobbyReceivedInvitationDto
    /// </summary>
    [DataContract]
    public partial class LolLobbyReceivedInvitationDto :  IEquatable<LolLobbyReceivedInvitationDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLobbyReceivedInvitationDto" /> class.
        /// </summary>
        /// <param name="CanAcceptInvitation">CanAcceptInvitation.</param>
        /// <param name="FromSummonerId">FromSummonerId.</param>
        /// <param name="FromSummonerName">FromSummonerName.</param>
        /// <param name="GameConfig">GameConfig.</param>
        /// <param name="InvitationId">InvitationId.</param>
        /// <param name="Restrictions">Restrictions.</param>
        /// <param name="State">State.</param>
        /// <param name="Timestamp">Timestamp.</param>
        public LolLobbyReceivedInvitationDto(bool? CanAcceptInvitation = default(bool?), long? FromSummonerId = default(long?), string FromSummonerName = default(string), LolLobbyReceivedInvitationGameConfigDto GameConfig = default(LolLobbyReceivedInvitationGameConfigDto), string InvitationId = default(string), List<LolLobbyEligibilityRestriction> Restrictions = default(List<LolLobbyEligibilityRestriction>), LolLobbyLobbyInvitationState State = default(LolLobbyLobbyInvitationState), string Timestamp = default(string))
        {
            this.CanAcceptInvitation = CanAcceptInvitation;
            this.FromSummonerId = FromSummonerId;
            this.FromSummonerName = FromSummonerName;
            this.GameConfig = GameConfig;
            this.InvitationId = InvitationId;
            this.Restrictions = Restrictions;
            this.State = State;
            this.Timestamp = Timestamp;
        }
        
        /// <summary>
        /// Gets or Sets CanAcceptInvitation
        /// </summary>
        [DataMember(Name="canAcceptInvitation", EmitDefaultValue=false)]
        public bool? CanAcceptInvitation { get; set; }

        /// <summary>
        /// Gets or Sets FromSummonerId
        /// </summary>
        [DataMember(Name="fromSummonerId", EmitDefaultValue=false)]
        public long? FromSummonerId { get; set; }

        /// <summary>
        /// Gets or Sets FromSummonerName
        /// </summary>
        [DataMember(Name="fromSummonerName", EmitDefaultValue=false)]
        public string FromSummonerName { get; set; }

        /// <summary>
        /// Gets or Sets GameConfig
        /// </summary>
        [DataMember(Name="gameConfig", EmitDefaultValue=false)]
        public LolLobbyReceivedInvitationGameConfigDto GameConfig { get; set; }

        /// <summary>
        /// Gets or Sets InvitationId
        /// </summary>
        [DataMember(Name="invitationId", EmitDefaultValue=false)]
        public string InvitationId { get; set; }

        /// <summary>
        /// Gets or Sets Restrictions
        /// </summary>
        [DataMember(Name="restrictions", EmitDefaultValue=false)]
        public List<LolLobbyEligibilityRestriction> Restrictions { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public LolLobbyLobbyInvitationState State { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLobbyReceivedInvitationDto {\n");
            sb.Append("  CanAcceptInvitation: ").Append(CanAcceptInvitation).Append("\n");
            sb.Append("  FromSummonerId: ").Append(FromSummonerId).Append("\n");
            sb.Append("  FromSummonerName: ").Append(FromSummonerName).Append("\n");
            sb.Append("  GameConfig: ").Append(GameConfig).Append("\n");
            sb.Append("  InvitationId: ").Append(InvitationId).Append("\n");
            sb.Append("  Restrictions: ").Append(Restrictions).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLobbyReceivedInvitationDto);
        }

        /// <summary>
        /// Returns true if LolLobbyReceivedInvitationDto instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLobbyReceivedInvitationDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLobbyReceivedInvitationDto other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CanAcceptInvitation == other.CanAcceptInvitation ||
                    this.CanAcceptInvitation != null &&
                    this.CanAcceptInvitation.Equals(other.CanAcceptInvitation)
                ) && 
                (
                    this.FromSummonerId == other.FromSummonerId ||
                    this.FromSummonerId != null &&
                    this.FromSummonerId.Equals(other.FromSummonerId)
                ) && 
                (
                    this.FromSummonerName == other.FromSummonerName ||
                    this.FromSummonerName != null &&
                    this.FromSummonerName.Equals(other.FromSummonerName)
                ) && 
                (
                    this.GameConfig == other.GameConfig ||
                    this.GameConfig != null &&
                    this.GameConfig.Equals(other.GameConfig)
                ) && 
                (
                    this.InvitationId == other.InvitationId ||
                    this.InvitationId != null &&
                    this.InvitationId.Equals(other.InvitationId)
                ) && 
                (
                    this.Restrictions == other.Restrictions ||
                    this.Restrictions != null &&
                    this.Restrictions.SequenceEqual(other.Restrictions)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CanAcceptInvitation != null)
                    hash = hash * 59 + this.CanAcceptInvitation.GetHashCode();
                if (this.FromSummonerId != null)
                    hash = hash * 59 + this.FromSummonerId.GetHashCode();
                if (this.FromSummonerName != null)
                    hash = hash * 59 + this.FromSummonerName.GetHashCode();
                if (this.GameConfig != null)
                    hash = hash * 59 + this.GameConfig.GetHashCode();
                if (this.InvitationId != null)
                    hash = hash * 59 + this.InvitationId.GetHashCode();
                if (this.Restrictions != null)
                    hash = hash * 59 + this.Restrictions.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
