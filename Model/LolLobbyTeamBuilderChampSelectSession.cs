/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLobbyTeamBuilderChampSelectSession
    /// </summary>
    [DataContract]
    public partial class LolLobbyTeamBuilderChampSelectSession :  IEquatable<LolLobbyTeamBuilderChampSelectSession>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLobbyTeamBuilderChampSelectSession" /> class.
        /// </summary>
        /// <param name="Actions">Actions.</param>
        /// <param name="AllowBattleBoost">AllowBattleBoost.</param>
        /// <param name="AllowRerolling">AllowRerolling.</param>
        /// <param name="AllowSkinSelection">AllowSkinSelection.</param>
        /// <param name="ChatDetails">ChatDetails.</param>
        /// <param name="LocalPlayerCellId">LocalPlayerCellId.</param>
        /// <param name="MyTeam">MyTeam.</param>
        /// <param name="RerollsRemaining">RerollsRemaining.</param>
        /// <param name="TheirTeam">TheirTeam.</param>
        /// <param name="Timer">Timer.</param>
        /// <param name="Trades">Trades.</param>
        public LolLobbyTeamBuilderChampSelectSession(List<Object> Actions = default(List<Object>), bool? AllowBattleBoost = default(bool?), bool? AllowRerolling = default(bool?), bool? AllowSkinSelection = default(bool?), LolLobbyTeamBuilderChampSelectChatRoomDetails ChatDetails = default(LolLobbyTeamBuilderChampSelectChatRoomDetails), long? LocalPlayerCellId = default(long?), List<LolLobbyTeamBuilderChampSelectPlayerSelection> MyTeam = default(List<LolLobbyTeamBuilderChampSelectPlayerSelection>), int? RerollsRemaining = default(int?), List<LolLobbyTeamBuilderChampSelectPlayerSelection> TheirTeam = default(List<LolLobbyTeamBuilderChampSelectPlayerSelection>), LolLobbyTeamBuilderChampSelectTimer Timer = default(LolLobbyTeamBuilderChampSelectTimer), List<LolLobbyTeamBuilderChampSelectTradeContract> Trades = default(List<LolLobbyTeamBuilderChampSelectTradeContract>))
        {
            this.Actions = Actions;
            this.AllowBattleBoost = AllowBattleBoost;
            this.AllowRerolling = AllowRerolling;
            this.AllowSkinSelection = AllowSkinSelection;
            this.ChatDetails = ChatDetails;
            this.LocalPlayerCellId = LocalPlayerCellId;
            this.MyTeam = MyTeam;
            this.RerollsRemaining = RerollsRemaining;
            this.TheirTeam = TheirTeam;
            this.Timer = Timer;
            this.Trades = Trades;
        }
        
        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name="actions", EmitDefaultValue=false)]
        public List<Object> Actions { get; set; }

        /// <summary>
        /// Gets or Sets AllowBattleBoost
        /// </summary>
        [DataMember(Name="allowBattleBoost", EmitDefaultValue=false)]
        public bool? AllowBattleBoost { get; set; }

        /// <summary>
        /// Gets or Sets AllowRerolling
        /// </summary>
        [DataMember(Name="allowRerolling", EmitDefaultValue=false)]
        public bool? AllowRerolling { get; set; }

        /// <summary>
        /// Gets or Sets AllowSkinSelection
        /// </summary>
        [DataMember(Name="allowSkinSelection", EmitDefaultValue=false)]
        public bool? AllowSkinSelection { get; set; }

        /// <summary>
        /// Gets or Sets ChatDetails
        /// </summary>
        [DataMember(Name="chatDetails", EmitDefaultValue=false)]
        public LolLobbyTeamBuilderChampSelectChatRoomDetails ChatDetails { get; set; }

        /// <summary>
        /// Gets or Sets LocalPlayerCellId
        /// </summary>
        [DataMember(Name="localPlayerCellId", EmitDefaultValue=false)]
        public long? LocalPlayerCellId { get; set; }

        /// <summary>
        /// Gets or Sets MyTeam
        /// </summary>
        [DataMember(Name="myTeam", EmitDefaultValue=false)]
        public List<LolLobbyTeamBuilderChampSelectPlayerSelection> MyTeam { get; set; }

        /// <summary>
        /// Gets or Sets RerollsRemaining
        /// </summary>
        [DataMember(Name="rerollsRemaining", EmitDefaultValue=false)]
        public int? RerollsRemaining { get; set; }

        /// <summary>
        /// Gets or Sets TheirTeam
        /// </summary>
        [DataMember(Name="theirTeam", EmitDefaultValue=false)]
        public List<LolLobbyTeamBuilderChampSelectPlayerSelection> TheirTeam { get; set; }

        /// <summary>
        /// Gets or Sets Timer
        /// </summary>
        [DataMember(Name="timer", EmitDefaultValue=false)]
        public LolLobbyTeamBuilderChampSelectTimer Timer { get; set; }

        /// <summary>
        /// Gets or Sets Trades
        /// </summary>
        [DataMember(Name="trades", EmitDefaultValue=false)]
        public List<LolLobbyTeamBuilderChampSelectTradeContract> Trades { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLobbyTeamBuilderChampSelectSession {\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  AllowBattleBoost: ").Append(AllowBattleBoost).Append("\n");
            sb.Append("  AllowRerolling: ").Append(AllowRerolling).Append("\n");
            sb.Append("  AllowSkinSelection: ").Append(AllowSkinSelection).Append("\n");
            sb.Append("  ChatDetails: ").Append(ChatDetails).Append("\n");
            sb.Append("  LocalPlayerCellId: ").Append(LocalPlayerCellId).Append("\n");
            sb.Append("  MyTeam: ").Append(MyTeam).Append("\n");
            sb.Append("  RerollsRemaining: ").Append(RerollsRemaining).Append("\n");
            sb.Append("  TheirTeam: ").Append(TheirTeam).Append("\n");
            sb.Append("  Timer: ").Append(Timer).Append("\n");
            sb.Append("  Trades: ").Append(Trades).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLobbyTeamBuilderChampSelectSession);
        }

        /// <summary>
        /// Returns true if LolLobbyTeamBuilderChampSelectSession instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLobbyTeamBuilderChampSelectSession to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLobbyTeamBuilderChampSelectSession other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Actions == other.Actions ||
                    this.Actions != null &&
                    this.Actions.SequenceEqual(other.Actions)
                ) && 
                (
                    this.AllowBattleBoost == other.AllowBattleBoost ||
                    this.AllowBattleBoost != null &&
                    this.AllowBattleBoost.Equals(other.AllowBattleBoost)
                ) && 
                (
                    this.AllowRerolling == other.AllowRerolling ||
                    this.AllowRerolling != null &&
                    this.AllowRerolling.Equals(other.AllowRerolling)
                ) && 
                (
                    this.AllowSkinSelection == other.AllowSkinSelection ||
                    this.AllowSkinSelection != null &&
                    this.AllowSkinSelection.Equals(other.AllowSkinSelection)
                ) && 
                (
                    this.ChatDetails == other.ChatDetails ||
                    this.ChatDetails != null &&
                    this.ChatDetails.Equals(other.ChatDetails)
                ) && 
                (
                    this.LocalPlayerCellId == other.LocalPlayerCellId ||
                    this.LocalPlayerCellId != null &&
                    this.LocalPlayerCellId.Equals(other.LocalPlayerCellId)
                ) && 
                (
                    this.MyTeam == other.MyTeam ||
                    this.MyTeam != null &&
                    this.MyTeam.SequenceEqual(other.MyTeam)
                ) && 
                (
                    this.RerollsRemaining == other.RerollsRemaining ||
                    this.RerollsRemaining != null &&
                    this.RerollsRemaining.Equals(other.RerollsRemaining)
                ) && 
                (
                    this.TheirTeam == other.TheirTeam ||
                    this.TheirTeam != null &&
                    this.TheirTeam.SequenceEqual(other.TheirTeam)
                ) && 
                (
                    this.Timer == other.Timer ||
                    this.Timer != null &&
                    this.Timer.Equals(other.Timer)
                ) && 
                (
                    this.Trades == other.Trades ||
                    this.Trades != null &&
                    this.Trades.SequenceEqual(other.Trades)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Actions != null)
                    hash = hash * 59 + this.Actions.GetHashCode();
                if (this.AllowBattleBoost != null)
                    hash = hash * 59 + this.AllowBattleBoost.GetHashCode();
                if (this.AllowRerolling != null)
                    hash = hash * 59 + this.AllowRerolling.GetHashCode();
                if (this.AllowSkinSelection != null)
                    hash = hash * 59 + this.AllowSkinSelection.GetHashCode();
                if (this.ChatDetails != null)
                    hash = hash * 59 + this.ChatDetails.GetHashCode();
                if (this.LocalPlayerCellId != null)
                    hash = hash * 59 + this.LocalPlayerCellId.GetHashCode();
                if (this.MyTeam != null)
                    hash = hash * 59 + this.MyTeam.GetHashCode();
                if (this.RerollsRemaining != null)
                    hash = hash * 59 + this.RerollsRemaining.GetHashCode();
                if (this.TheirTeam != null)
                    hash = hash * 59 + this.TheirTeam.GetHashCode();
                if (this.Timer != null)
                    hash = hash * 59 + this.Timer.GetHashCode();
                if (this.Trades != null)
                    hash = hash * 59 + this.Trades.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
