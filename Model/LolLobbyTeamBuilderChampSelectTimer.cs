/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLobbyTeamBuilderChampSelectTimer
    /// </summary>
    [DataContract]
    public partial class LolLobbyTeamBuilderChampSelectTimer :  IEquatable<LolLobbyTeamBuilderChampSelectTimer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLobbyTeamBuilderChampSelectTimer" /> class.
        /// </summary>
        /// <param name="AdjustedTimeLeftInPhase">AdjustedTimeLeftInPhase.</param>
        /// <param name="AdjustedTimeLeftInPhaseInSec">AdjustedTimeLeftInPhaseInSec.</param>
        /// <param name="InternalNowInEpochMs">InternalNowInEpochMs.</param>
        /// <param name="IsInfinite">IsInfinite.</param>
        /// <param name="Phase">Phase.</param>
        /// <param name="TimeLeftInPhase">TimeLeftInPhase.</param>
        /// <param name="TimeLeftInPhaseInSec">TimeLeftInPhaseInSec.</param>
        /// <param name="TotalTimeInPhase">TotalTimeInPhase.</param>
        public LolLobbyTeamBuilderChampSelectTimer(long? AdjustedTimeLeftInPhase = default(long?), int? AdjustedTimeLeftInPhaseInSec = default(int?), long? InternalNowInEpochMs = default(long?), bool? IsInfinite = default(bool?), string Phase = default(string), long? TimeLeftInPhase = default(long?), int? TimeLeftInPhaseInSec = default(int?), long? TotalTimeInPhase = default(long?))
        {
            this.AdjustedTimeLeftInPhase = AdjustedTimeLeftInPhase;
            this.AdjustedTimeLeftInPhaseInSec = AdjustedTimeLeftInPhaseInSec;
            this.InternalNowInEpochMs = InternalNowInEpochMs;
            this.IsInfinite = IsInfinite;
            this.Phase = Phase;
            this.TimeLeftInPhase = TimeLeftInPhase;
            this.TimeLeftInPhaseInSec = TimeLeftInPhaseInSec;
            this.TotalTimeInPhase = TotalTimeInPhase;
        }
        
        /// <summary>
        /// Gets or Sets AdjustedTimeLeftInPhase
        /// </summary>
        [DataMember(Name="adjustedTimeLeftInPhase", EmitDefaultValue=false)]
        public long? AdjustedTimeLeftInPhase { get; set; }

        /// <summary>
        /// Gets or Sets AdjustedTimeLeftInPhaseInSec
        /// </summary>
        [DataMember(Name="adjustedTimeLeftInPhaseInSec", EmitDefaultValue=false)]
        public int? AdjustedTimeLeftInPhaseInSec { get; set; }

        /// <summary>
        /// Gets or Sets InternalNowInEpochMs
        /// </summary>
        [DataMember(Name="internalNowInEpochMs", EmitDefaultValue=false)]
        public long? InternalNowInEpochMs { get; set; }

        /// <summary>
        /// Gets or Sets IsInfinite
        /// </summary>
        [DataMember(Name="isInfinite", EmitDefaultValue=false)]
        public bool? IsInfinite { get; set; }

        /// <summary>
        /// Gets or Sets Phase
        /// </summary>
        [DataMember(Name="phase", EmitDefaultValue=false)]
        public string Phase { get; set; }

        /// <summary>
        /// Gets or Sets TimeLeftInPhase
        /// </summary>
        [DataMember(Name="timeLeftInPhase", EmitDefaultValue=false)]
        public long? TimeLeftInPhase { get; set; }

        /// <summary>
        /// Gets or Sets TimeLeftInPhaseInSec
        /// </summary>
        [DataMember(Name="timeLeftInPhaseInSec", EmitDefaultValue=false)]
        public int? TimeLeftInPhaseInSec { get; set; }

        /// <summary>
        /// Gets or Sets TotalTimeInPhase
        /// </summary>
        [DataMember(Name="totalTimeInPhase", EmitDefaultValue=false)]
        public long? TotalTimeInPhase { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLobbyTeamBuilderChampSelectTimer {\n");
            sb.Append("  AdjustedTimeLeftInPhase: ").Append(AdjustedTimeLeftInPhase).Append("\n");
            sb.Append("  AdjustedTimeLeftInPhaseInSec: ").Append(AdjustedTimeLeftInPhaseInSec).Append("\n");
            sb.Append("  InternalNowInEpochMs: ").Append(InternalNowInEpochMs).Append("\n");
            sb.Append("  IsInfinite: ").Append(IsInfinite).Append("\n");
            sb.Append("  Phase: ").Append(Phase).Append("\n");
            sb.Append("  TimeLeftInPhase: ").Append(TimeLeftInPhase).Append("\n");
            sb.Append("  TimeLeftInPhaseInSec: ").Append(TimeLeftInPhaseInSec).Append("\n");
            sb.Append("  TotalTimeInPhase: ").Append(TotalTimeInPhase).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLobbyTeamBuilderChampSelectTimer);
        }

        /// <summary>
        /// Returns true if LolLobbyTeamBuilderChampSelectTimer instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLobbyTeamBuilderChampSelectTimer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLobbyTeamBuilderChampSelectTimer other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AdjustedTimeLeftInPhase == other.AdjustedTimeLeftInPhase ||
                    this.AdjustedTimeLeftInPhase != null &&
                    this.AdjustedTimeLeftInPhase.Equals(other.AdjustedTimeLeftInPhase)
                ) && 
                (
                    this.AdjustedTimeLeftInPhaseInSec == other.AdjustedTimeLeftInPhaseInSec ||
                    this.AdjustedTimeLeftInPhaseInSec != null &&
                    this.AdjustedTimeLeftInPhaseInSec.Equals(other.AdjustedTimeLeftInPhaseInSec)
                ) && 
                (
                    this.InternalNowInEpochMs == other.InternalNowInEpochMs ||
                    this.InternalNowInEpochMs != null &&
                    this.InternalNowInEpochMs.Equals(other.InternalNowInEpochMs)
                ) && 
                (
                    this.IsInfinite == other.IsInfinite ||
                    this.IsInfinite != null &&
                    this.IsInfinite.Equals(other.IsInfinite)
                ) && 
                (
                    this.Phase == other.Phase ||
                    this.Phase != null &&
                    this.Phase.Equals(other.Phase)
                ) && 
                (
                    this.TimeLeftInPhase == other.TimeLeftInPhase ||
                    this.TimeLeftInPhase != null &&
                    this.TimeLeftInPhase.Equals(other.TimeLeftInPhase)
                ) && 
                (
                    this.TimeLeftInPhaseInSec == other.TimeLeftInPhaseInSec ||
                    this.TimeLeftInPhaseInSec != null &&
                    this.TimeLeftInPhaseInSec.Equals(other.TimeLeftInPhaseInSec)
                ) && 
                (
                    this.TotalTimeInPhase == other.TotalTimeInPhase ||
                    this.TotalTimeInPhase != null &&
                    this.TotalTimeInPhase.Equals(other.TotalTimeInPhase)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AdjustedTimeLeftInPhase != null)
                    hash = hash * 59 + this.AdjustedTimeLeftInPhase.GetHashCode();
                if (this.AdjustedTimeLeftInPhaseInSec != null)
                    hash = hash * 59 + this.AdjustedTimeLeftInPhaseInSec.GetHashCode();
                if (this.InternalNowInEpochMs != null)
                    hash = hash * 59 + this.InternalNowInEpochMs.GetHashCode();
                if (this.IsInfinite != null)
                    hash = hash * 59 + this.IsInfinite.GetHashCode();
                if (this.Phase != null)
                    hash = hash * 59 + this.Phase.GetHashCode();
                if (this.TimeLeftInPhase != null)
                    hash = hash * 59 + this.TimeLeftInPhase.GetHashCode();
                if (this.TimeLeftInPhaseInSec != null)
                    hash = hash * 59 + this.TimeLeftInPhaseInSec.GetHashCode();
                if (this.TotalTimeInPhase != null)
                    hash = hash * 59 + this.TotalTimeInPhase.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
