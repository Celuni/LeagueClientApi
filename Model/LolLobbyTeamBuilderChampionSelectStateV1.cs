/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLobbyTeamBuilderChampionSelectStateV1
    /// </summary>
    [DataContract]
    public partial class LolLobbyTeamBuilderChampionSelectStateV1 :  IEquatable<LolLobbyTeamBuilderChampionSelectStateV1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLobbyTeamBuilderChampionSelectStateV1" /> class.
        /// </summary>
        /// <param name="ActionSetList">ActionSetList.</param>
        /// <param name="AllowOptingOutOfBanning">AllowOptingOutOfBanning.</param>
        /// <param name="AllowSkinSelection">AllowSkinSelection.</param>
        /// <param name="BattleBoostState">BattleBoostState.</param>
        /// <param name="Cells">Cells.</param>
        /// <param name="CeremoniesByActionSetIndex">CeremoniesByActionSetIndex.</param>
        /// <param name="CurrentActionSetIndex">CurrentActionSetIndex.</param>
        /// <param name="CurrentTimeRemainingMillis">CurrentTimeRemainingMillis.</param>
        /// <param name="CurrentTotalTimeMillis">CurrentTotalTimeMillis.</param>
        /// <param name="LocalPlayerCellId">LocalPlayerCellId.</param>
        /// <param name="PickIntentClearedReason">PickIntentClearedReason.</param>
        /// <param name="RerollState">RerollState.</param>
        /// <param name="Subphase">Subphase.</param>
        /// <param name="TeamChatRoomId">TeamChatRoomId.</param>
        /// <param name="TeamId">TeamId.</param>
        /// <param name="Trades">Trades.</param>
        public LolLobbyTeamBuilderChampionSelectStateV1(List<Object> ActionSetList = default(List<Object>), bool? AllowOptingOutOfBanning = default(bool?), bool? AllowSkinSelection = default(bool?), LolLobbyTeamBuilderTeamBuilderBoostInfo BattleBoostState = default(LolLobbyTeamBuilderTeamBuilderBoostInfo), LolLobbyTeamBuilderCellsV1 Cells = default(LolLobbyTeamBuilderCellsV1), Dictionary<string, Object> CeremoniesByActionSetIndex = default(Dictionary<string, Object>), int? CurrentActionSetIndex = default(int?), long? CurrentTimeRemainingMillis = default(long?), long? CurrentTotalTimeMillis = default(long?), int? LocalPlayerCellId = default(int?), string PickIntentClearedReason = default(string), LolLobbyTeamBuilderRerollStateV1 RerollState = default(LolLobbyTeamBuilderRerollStateV1), string Subphase = default(string), string TeamChatRoomId = default(string), string TeamId = default(string), List<LolLobbyTeamBuilderTradeV1> Trades = default(List<LolLobbyTeamBuilderTradeV1>))
        {
            this.ActionSetList = ActionSetList;
            this.AllowOptingOutOfBanning = AllowOptingOutOfBanning;
            this.AllowSkinSelection = AllowSkinSelection;
            this.BattleBoostState = BattleBoostState;
            this.Cells = Cells;
            this.CeremoniesByActionSetIndex = CeremoniesByActionSetIndex;
            this.CurrentActionSetIndex = CurrentActionSetIndex;
            this.CurrentTimeRemainingMillis = CurrentTimeRemainingMillis;
            this.CurrentTotalTimeMillis = CurrentTotalTimeMillis;
            this.LocalPlayerCellId = LocalPlayerCellId;
            this.PickIntentClearedReason = PickIntentClearedReason;
            this.RerollState = RerollState;
            this.Subphase = Subphase;
            this.TeamChatRoomId = TeamChatRoomId;
            this.TeamId = TeamId;
            this.Trades = Trades;
        }
        
        /// <summary>
        /// Gets or Sets ActionSetList
        /// </summary>
        [DataMember(Name="actionSetList", EmitDefaultValue=false)]
        public List<Object> ActionSetList { get; set; }

        /// <summary>
        /// Gets or Sets AllowOptingOutOfBanning
        /// </summary>
        [DataMember(Name="allowOptingOutOfBanning", EmitDefaultValue=false)]
        public bool? AllowOptingOutOfBanning { get; set; }

        /// <summary>
        /// Gets or Sets AllowSkinSelection
        /// </summary>
        [DataMember(Name="allowSkinSelection", EmitDefaultValue=false)]
        public bool? AllowSkinSelection { get; set; }

        /// <summary>
        /// Gets or Sets BattleBoostState
        /// </summary>
        [DataMember(Name="battleBoostState", EmitDefaultValue=false)]
        public LolLobbyTeamBuilderTeamBuilderBoostInfo BattleBoostState { get; set; }

        /// <summary>
        /// Gets or Sets Cells
        /// </summary>
        [DataMember(Name="cells", EmitDefaultValue=false)]
        public LolLobbyTeamBuilderCellsV1 Cells { get; set; }

        /// <summary>
        /// Gets or Sets CeremoniesByActionSetIndex
        /// </summary>
        [DataMember(Name="ceremoniesByActionSetIndex", EmitDefaultValue=false)]
        public Dictionary<string, Object> CeremoniesByActionSetIndex { get; set; }

        /// <summary>
        /// Gets or Sets CurrentActionSetIndex
        /// </summary>
        [DataMember(Name="currentActionSetIndex", EmitDefaultValue=false)]
        public int? CurrentActionSetIndex { get; set; }

        /// <summary>
        /// Gets or Sets CurrentTimeRemainingMillis
        /// </summary>
        [DataMember(Name="currentTimeRemainingMillis", EmitDefaultValue=false)]
        public long? CurrentTimeRemainingMillis { get; set; }

        /// <summary>
        /// Gets or Sets CurrentTotalTimeMillis
        /// </summary>
        [DataMember(Name="currentTotalTimeMillis", EmitDefaultValue=false)]
        public long? CurrentTotalTimeMillis { get; set; }

        /// <summary>
        /// Gets or Sets LocalPlayerCellId
        /// </summary>
        [DataMember(Name="localPlayerCellId", EmitDefaultValue=false)]
        public int? LocalPlayerCellId { get; set; }

        /// <summary>
        /// Gets or Sets PickIntentClearedReason
        /// </summary>
        [DataMember(Name="pickIntentClearedReason", EmitDefaultValue=false)]
        public string PickIntentClearedReason { get; set; }

        /// <summary>
        /// Gets or Sets RerollState
        /// </summary>
        [DataMember(Name="rerollState", EmitDefaultValue=false)]
        public LolLobbyTeamBuilderRerollStateV1 RerollState { get; set; }

        /// <summary>
        /// Gets or Sets Subphase
        /// </summary>
        [DataMember(Name="subphase", EmitDefaultValue=false)]
        public string Subphase { get; set; }

        /// <summary>
        /// Gets or Sets TeamChatRoomId
        /// </summary>
        [DataMember(Name="teamChatRoomId", EmitDefaultValue=false)]
        public string TeamChatRoomId { get; set; }

        /// <summary>
        /// Gets or Sets TeamId
        /// </summary>
        [DataMember(Name="teamId", EmitDefaultValue=false)]
        public string TeamId { get; set; }

        /// <summary>
        /// Gets or Sets Trades
        /// </summary>
        [DataMember(Name="trades", EmitDefaultValue=false)]
        public List<LolLobbyTeamBuilderTradeV1> Trades { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLobbyTeamBuilderChampionSelectStateV1 {\n");
            sb.Append("  ActionSetList: ").Append(ActionSetList).Append("\n");
            sb.Append("  AllowOptingOutOfBanning: ").Append(AllowOptingOutOfBanning).Append("\n");
            sb.Append("  AllowSkinSelection: ").Append(AllowSkinSelection).Append("\n");
            sb.Append("  BattleBoostState: ").Append(BattleBoostState).Append("\n");
            sb.Append("  Cells: ").Append(Cells).Append("\n");
            sb.Append("  CeremoniesByActionSetIndex: ").Append(CeremoniesByActionSetIndex).Append("\n");
            sb.Append("  CurrentActionSetIndex: ").Append(CurrentActionSetIndex).Append("\n");
            sb.Append("  CurrentTimeRemainingMillis: ").Append(CurrentTimeRemainingMillis).Append("\n");
            sb.Append("  CurrentTotalTimeMillis: ").Append(CurrentTotalTimeMillis).Append("\n");
            sb.Append("  LocalPlayerCellId: ").Append(LocalPlayerCellId).Append("\n");
            sb.Append("  PickIntentClearedReason: ").Append(PickIntentClearedReason).Append("\n");
            sb.Append("  RerollState: ").Append(RerollState).Append("\n");
            sb.Append("  Subphase: ").Append(Subphase).Append("\n");
            sb.Append("  TeamChatRoomId: ").Append(TeamChatRoomId).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  Trades: ").Append(Trades).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLobbyTeamBuilderChampionSelectStateV1);
        }

        /// <summary>
        /// Returns true if LolLobbyTeamBuilderChampionSelectStateV1 instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLobbyTeamBuilderChampionSelectStateV1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLobbyTeamBuilderChampionSelectStateV1 other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ActionSetList == other.ActionSetList ||
                    this.ActionSetList != null &&
                    this.ActionSetList.SequenceEqual(other.ActionSetList)
                ) && 
                (
                    this.AllowOptingOutOfBanning == other.AllowOptingOutOfBanning ||
                    this.AllowOptingOutOfBanning != null &&
                    this.AllowOptingOutOfBanning.Equals(other.AllowOptingOutOfBanning)
                ) && 
                (
                    this.AllowSkinSelection == other.AllowSkinSelection ||
                    this.AllowSkinSelection != null &&
                    this.AllowSkinSelection.Equals(other.AllowSkinSelection)
                ) && 
                (
                    this.BattleBoostState == other.BattleBoostState ||
                    this.BattleBoostState != null &&
                    this.BattleBoostState.Equals(other.BattleBoostState)
                ) && 
                (
                    this.Cells == other.Cells ||
                    this.Cells != null &&
                    this.Cells.Equals(other.Cells)
                ) && 
                (
                    this.CeremoniesByActionSetIndex == other.CeremoniesByActionSetIndex ||
                    this.CeremoniesByActionSetIndex != null &&
                    this.CeremoniesByActionSetIndex.SequenceEqual(other.CeremoniesByActionSetIndex)
                ) && 
                (
                    this.CurrentActionSetIndex == other.CurrentActionSetIndex ||
                    this.CurrentActionSetIndex != null &&
                    this.CurrentActionSetIndex.Equals(other.CurrentActionSetIndex)
                ) && 
                (
                    this.CurrentTimeRemainingMillis == other.CurrentTimeRemainingMillis ||
                    this.CurrentTimeRemainingMillis != null &&
                    this.CurrentTimeRemainingMillis.Equals(other.CurrentTimeRemainingMillis)
                ) && 
                (
                    this.CurrentTotalTimeMillis == other.CurrentTotalTimeMillis ||
                    this.CurrentTotalTimeMillis != null &&
                    this.CurrentTotalTimeMillis.Equals(other.CurrentTotalTimeMillis)
                ) && 
                (
                    this.LocalPlayerCellId == other.LocalPlayerCellId ||
                    this.LocalPlayerCellId != null &&
                    this.LocalPlayerCellId.Equals(other.LocalPlayerCellId)
                ) && 
                (
                    this.PickIntentClearedReason == other.PickIntentClearedReason ||
                    this.PickIntentClearedReason != null &&
                    this.PickIntentClearedReason.Equals(other.PickIntentClearedReason)
                ) && 
                (
                    this.RerollState == other.RerollState ||
                    this.RerollState != null &&
                    this.RerollState.Equals(other.RerollState)
                ) && 
                (
                    this.Subphase == other.Subphase ||
                    this.Subphase != null &&
                    this.Subphase.Equals(other.Subphase)
                ) && 
                (
                    this.TeamChatRoomId == other.TeamChatRoomId ||
                    this.TeamChatRoomId != null &&
                    this.TeamChatRoomId.Equals(other.TeamChatRoomId)
                ) && 
                (
                    this.TeamId == other.TeamId ||
                    this.TeamId != null &&
                    this.TeamId.Equals(other.TeamId)
                ) && 
                (
                    this.Trades == other.Trades ||
                    this.Trades != null &&
                    this.Trades.SequenceEqual(other.Trades)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ActionSetList != null)
                    hash = hash * 59 + this.ActionSetList.GetHashCode();
                if (this.AllowOptingOutOfBanning != null)
                    hash = hash * 59 + this.AllowOptingOutOfBanning.GetHashCode();
                if (this.AllowSkinSelection != null)
                    hash = hash * 59 + this.AllowSkinSelection.GetHashCode();
                if (this.BattleBoostState != null)
                    hash = hash * 59 + this.BattleBoostState.GetHashCode();
                if (this.Cells != null)
                    hash = hash * 59 + this.Cells.GetHashCode();
                if (this.CeremoniesByActionSetIndex != null)
                    hash = hash * 59 + this.CeremoniesByActionSetIndex.GetHashCode();
                if (this.CurrentActionSetIndex != null)
                    hash = hash * 59 + this.CurrentActionSetIndex.GetHashCode();
                if (this.CurrentTimeRemainingMillis != null)
                    hash = hash * 59 + this.CurrentTimeRemainingMillis.GetHashCode();
                if (this.CurrentTotalTimeMillis != null)
                    hash = hash * 59 + this.CurrentTotalTimeMillis.GetHashCode();
                if (this.LocalPlayerCellId != null)
                    hash = hash * 59 + this.LocalPlayerCellId.GetHashCode();
                if (this.PickIntentClearedReason != null)
                    hash = hash * 59 + this.PickIntentClearedReason.GetHashCode();
                if (this.RerollState != null)
                    hash = hash * 59 + this.RerollState.GetHashCode();
                if (this.Subphase != null)
                    hash = hash * 59 + this.Subphase.GetHashCode();
                if (this.TeamChatRoomId != null)
                    hash = hash * 59 + this.TeamChatRoomId.GetHashCode();
                if (this.TeamId != null)
                    hash = hash * 59 + this.TeamId.GetHashCode();
                if (this.Trades != null)
                    hash = hash * 59 + this.Trades.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
