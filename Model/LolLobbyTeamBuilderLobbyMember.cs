/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLobbyTeamBuilderLobbyMember
    /// </summary>
    [DataContract]
    public partial class LolLobbyTeamBuilderLobbyMember :  IEquatable<LolLobbyTeamBuilderLobbyMember>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLobbyTeamBuilderLobbyMember" /> class.
        /// </summary>
        /// <param name="AutoFillEligible">AutoFillEligible.</param>
        /// <param name="AutoFillProtectedForPromos">AutoFillProtectedForPromos.</param>
        /// <param name="AutoFillProtectedForSoloing">AutoFillProtectedForSoloing.</param>
        /// <param name="AutoFillProtectedForStreaking">AutoFillProtectedForStreaking.</param>
        /// <param name="CanInviteOthers">CanInviteOthers.</param>
        /// <param name="ExcludedPositionPreference">ExcludedPositionPreference.</param>
        /// <param name="Id">Id.</param>
        /// <param name="IsOwner">IsOwner.</param>
        /// <param name="PositionPreferences">PositionPreferences.</param>
        /// <param name="ShowPositionExcluder">ShowPositionExcluder.</param>
        public LolLobbyTeamBuilderLobbyMember(bool? AutoFillEligible = default(bool?), bool? AutoFillProtectedForPromos = default(bool?), bool? AutoFillProtectedForSoloing = default(bool?), bool? AutoFillProtectedForStreaking = default(bool?), bool? CanInviteOthers = default(bool?), string ExcludedPositionPreference = default(string), long? Id = default(long?), bool? IsOwner = default(bool?), LolLobbyTeamBuilderLobbyPositionPreferences PositionPreferences = default(LolLobbyTeamBuilderLobbyPositionPreferences), bool? ShowPositionExcluder = default(bool?))
        {
            this.AutoFillEligible = AutoFillEligible;
            this.AutoFillProtectedForPromos = AutoFillProtectedForPromos;
            this.AutoFillProtectedForSoloing = AutoFillProtectedForSoloing;
            this.AutoFillProtectedForStreaking = AutoFillProtectedForStreaking;
            this.CanInviteOthers = CanInviteOthers;
            this.ExcludedPositionPreference = ExcludedPositionPreference;
            this.Id = Id;
            this.IsOwner = IsOwner;
            this.PositionPreferences = PositionPreferences;
            this.ShowPositionExcluder = ShowPositionExcluder;
        }
        
        /// <summary>
        /// Gets or Sets AutoFillEligible
        /// </summary>
        [DataMember(Name="autoFillEligible", EmitDefaultValue=false)]
        public bool? AutoFillEligible { get; set; }

        /// <summary>
        /// Gets or Sets AutoFillProtectedForPromos
        /// </summary>
        [DataMember(Name="autoFillProtectedForPromos", EmitDefaultValue=false)]
        public bool? AutoFillProtectedForPromos { get; set; }

        /// <summary>
        /// Gets or Sets AutoFillProtectedForSoloing
        /// </summary>
        [DataMember(Name="autoFillProtectedForSoloing", EmitDefaultValue=false)]
        public bool? AutoFillProtectedForSoloing { get; set; }

        /// <summary>
        /// Gets or Sets AutoFillProtectedForStreaking
        /// </summary>
        [DataMember(Name="autoFillProtectedForStreaking", EmitDefaultValue=false)]
        public bool? AutoFillProtectedForStreaking { get; set; }

        /// <summary>
        /// Gets or Sets CanInviteOthers
        /// </summary>
        [DataMember(Name="canInviteOthers", EmitDefaultValue=false)]
        public bool? CanInviteOthers { get; set; }

        /// <summary>
        /// Gets or Sets ExcludedPositionPreference
        /// </summary>
        [DataMember(Name="excludedPositionPreference", EmitDefaultValue=false)]
        public string ExcludedPositionPreference { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets IsOwner
        /// </summary>
        [DataMember(Name="isOwner", EmitDefaultValue=false)]
        public bool? IsOwner { get; set; }

        /// <summary>
        /// Gets or Sets PositionPreferences
        /// </summary>
        [DataMember(Name="positionPreferences", EmitDefaultValue=false)]
        public LolLobbyTeamBuilderLobbyPositionPreferences PositionPreferences { get; set; }

        /// <summary>
        /// Gets or Sets ShowPositionExcluder
        /// </summary>
        [DataMember(Name="showPositionExcluder", EmitDefaultValue=false)]
        public bool? ShowPositionExcluder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLobbyTeamBuilderLobbyMember {\n");
            sb.Append("  AutoFillEligible: ").Append(AutoFillEligible).Append("\n");
            sb.Append("  AutoFillProtectedForPromos: ").Append(AutoFillProtectedForPromos).Append("\n");
            sb.Append("  AutoFillProtectedForSoloing: ").Append(AutoFillProtectedForSoloing).Append("\n");
            sb.Append("  AutoFillProtectedForStreaking: ").Append(AutoFillProtectedForStreaking).Append("\n");
            sb.Append("  CanInviteOthers: ").Append(CanInviteOthers).Append("\n");
            sb.Append("  ExcludedPositionPreference: ").Append(ExcludedPositionPreference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsOwner: ").Append(IsOwner).Append("\n");
            sb.Append("  PositionPreferences: ").Append(PositionPreferences).Append("\n");
            sb.Append("  ShowPositionExcluder: ").Append(ShowPositionExcluder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLobbyTeamBuilderLobbyMember);
        }

        /// <summary>
        /// Returns true if LolLobbyTeamBuilderLobbyMember instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLobbyTeamBuilderLobbyMember to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLobbyTeamBuilderLobbyMember other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AutoFillEligible == other.AutoFillEligible ||
                    this.AutoFillEligible != null &&
                    this.AutoFillEligible.Equals(other.AutoFillEligible)
                ) && 
                (
                    this.AutoFillProtectedForPromos == other.AutoFillProtectedForPromos ||
                    this.AutoFillProtectedForPromos != null &&
                    this.AutoFillProtectedForPromos.Equals(other.AutoFillProtectedForPromos)
                ) && 
                (
                    this.AutoFillProtectedForSoloing == other.AutoFillProtectedForSoloing ||
                    this.AutoFillProtectedForSoloing != null &&
                    this.AutoFillProtectedForSoloing.Equals(other.AutoFillProtectedForSoloing)
                ) && 
                (
                    this.AutoFillProtectedForStreaking == other.AutoFillProtectedForStreaking ||
                    this.AutoFillProtectedForStreaking != null &&
                    this.AutoFillProtectedForStreaking.Equals(other.AutoFillProtectedForStreaking)
                ) && 
                (
                    this.CanInviteOthers == other.CanInviteOthers ||
                    this.CanInviteOthers != null &&
                    this.CanInviteOthers.Equals(other.CanInviteOthers)
                ) && 
                (
                    this.ExcludedPositionPreference == other.ExcludedPositionPreference ||
                    this.ExcludedPositionPreference != null &&
                    this.ExcludedPositionPreference.Equals(other.ExcludedPositionPreference)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.IsOwner == other.IsOwner ||
                    this.IsOwner != null &&
                    this.IsOwner.Equals(other.IsOwner)
                ) && 
                (
                    this.PositionPreferences == other.PositionPreferences ||
                    this.PositionPreferences != null &&
                    this.PositionPreferences.Equals(other.PositionPreferences)
                ) && 
                (
                    this.ShowPositionExcluder == other.ShowPositionExcluder ||
                    this.ShowPositionExcluder != null &&
                    this.ShowPositionExcluder.Equals(other.ShowPositionExcluder)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AutoFillEligible != null)
                    hash = hash * 59 + this.AutoFillEligible.GetHashCode();
                if (this.AutoFillProtectedForPromos != null)
                    hash = hash * 59 + this.AutoFillProtectedForPromos.GetHashCode();
                if (this.AutoFillProtectedForSoloing != null)
                    hash = hash * 59 + this.AutoFillProtectedForSoloing.GetHashCode();
                if (this.AutoFillProtectedForStreaking != null)
                    hash = hash * 59 + this.AutoFillProtectedForStreaking.GetHashCode();
                if (this.CanInviteOthers != null)
                    hash = hash * 59 + this.CanInviteOthers.GetHashCode();
                if (this.ExcludedPositionPreference != null)
                    hash = hash * 59 + this.ExcludedPositionPreference.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.IsOwner != null)
                    hash = hash * 59 + this.IsOwner.GetHashCode();
                if (this.PositionPreferences != null)
                    hash = hash * 59 + this.PositionPreferences.GetHashCode();
                if (this.ShowPositionExcluder != null)
                    hash = hash * 59 + this.ShowPositionExcluder.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
