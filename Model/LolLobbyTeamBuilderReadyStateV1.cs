/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLobbyTeamBuilderReadyStateV1
    /// </summary>
    [DataContract]
    public partial class LolLobbyTeamBuilderReadyStateV1 :  IEquatable<LolLobbyTeamBuilderReadyStateV1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLobbyTeamBuilderReadyStateV1" /> class.
        /// </summary>
        /// <param name="AllowablePremadeSizes">AllowablePremadeSizes.</param>
        /// <param name="PremadeSizeAllowed">PremadeSizeAllowed.</param>
        /// <param name="ReadyToMatchmake">ReadyToMatchmake.</param>
        /// <param name="RequiredPositionCoverageMet">RequiredPositionCoverageMet.</param>
        public LolLobbyTeamBuilderReadyStateV1(List<int?> AllowablePremadeSizes = default(List<int?>), bool? PremadeSizeAllowed = default(bool?), bool? ReadyToMatchmake = default(bool?), bool? RequiredPositionCoverageMet = default(bool?))
        {
            this.AllowablePremadeSizes = AllowablePremadeSizes;
            this.PremadeSizeAllowed = PremadeSizeAllowed;
            this.ReadyToMatchmake = ReadyToMatchmake;
            this.RequiredPositionCoverageMet = RequiredPositionCoverageMet;
        }
        
        /// <summary>
        /// Gets or Sets AllowablePremadeSizes
        /// </summary>
        [DataMember(Name="allowablePremadeSizes", EmitDefaultValue=false)]
        public List<int?> AllowablePremadeSizes { get; set; }

        /// <summary>
        /// Gets or Sets PremadeSizeAllowed
        /// </summary>
        [DataMember(Name="premadeSizeAllowed", EmitDefaultValue=false)]
        public bool? PremadeSizeAllowed { get; set; }

        /// <summary>
        /// Gets or Sets ReadyToMatchmake
        /// </summary>
        [DataMember(Name="readyToMatchmake", EmitDefaultValue=false)]
        public bool? ReadyToMatchmake { get; set; }

        /// <summary>
        /// Gets or Sets RequiredPositionCoverageMet
        /// </summary>
        [DataMember(Name="requiredPositionCoverageMet", EmitDefaultValue=false)]
        public bool? RequiredPositionCoverageMet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLobbyTeamBuilderReadyStateV1 {\n");
            sb.Append("  AllowablePremadeSizes: ").Append(AllowablePremadeSizes).Append("\n");
            sb.Append("  PremadeSizeAllowed: ").Append(PremadeSizeAllowed).Append("\n");
            sb.Append("  ReadyToMatchmake: ").Append(ReadyToMatchmake).Append("\n");
            sb.Append("  RequiredPositionCoverageMet: ").Append(RequiredPositionCoverageMet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLobbyTeamBuilderReadyStateV1);
        }

        /// <summary>
        /// Returns true if LolLobbyTeamBuilderReadyStateV1 instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLobbyTeamBuilderReadyStateV1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLobbyTeamBuilderReadyStateV1 other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AllowablePremadeSizes == other.AllowablePremadeSizes ||
                    this.AllowablePremadeSizes != null &&
                    this.AllowablePremadeSizes.SequenceEqual(other.AllowablePremadeSizes)
                ) && 
                (
                    this.PremadeSizeAllowed == other.PremadeSizeAllowed ||
                    this.PremadeSizeAllowed != null &&
                    this.PremadeSizeAllowed.Equals(other.PremadeSizeAllowed)
                ) && 
                (
                    this.ReadyToMatchmake == other.ReadyToMatchmake ||
                    this.ReadyToMatchmake != null &&
                    this.ReadyToMatchmake.Equals(other.ReadyToMatchmake)
                ) && 
                (
                    this.RequiredPositionCoverageMet == other.RequiredPositionCoverageMet ||
                    this.RequiredPositionCoverageMet != null &&
                    this.RequiredPositionCoverageMet.Equals(other.RequiredPositionCoverageMet)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AllowablePremadeSizes != null)
                    hash = hash * 59 + this.AllowablePremadeSizes.GetHashCode();
                if (this.PremadeSizeAllowed != null)
                    hash = hash * 59 + this.PremadeSizeAllowed.GetHashCode();
                if (this.ReadyToMatchmake != null)
                    hash = hash * 59 + this.ReadyToMatchmake.GetHashCode();
                if (this.RequiredPositionCoverageMet != null)
                    hash = hash * 59 + this.RequiredPositionCoverageMet.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
