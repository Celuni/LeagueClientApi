/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLobbyTeamBuilderTbLobbyPremadeStateResource
    /// </summary>
    [DataContract]
    public partial class LolLobbyTeamBuilderTbLobbyPremadeStateResource :  IEquatable<LolLobbyTeamBuilderTbLobbyPremadeStateResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLobbyTeamBuilderTbLobbyPremadeStateResource" /> class.
        /// </summary>
        /// <param name="AutoFillEligible">AutoFillEligible.</param>
        /// <param name="AutoFillProtectedForPromos">AutoFillProtectedForPromos.</param>
        /// <param name="AutoFillProtectedForStreaking">AutoFillProtectedForStreaking.</param>
        /// <param name="BackwardsToPremadeTransitionReason">BackwardsToPremadeTransitionReason.</param>
        /// <param name="CaptainSlotId">CaptainSlotId.</param>
        /// <param name="DraftPremadeId">DraftPremadeId.</param>
        /// <param name="DraftSlots">DraftSlots.</param>
        /// <param name="LocalPlayerSlotId">LocalPlayerSlotId.</param>
        /// <param name="PlayableDraftPositions">PlayableDraftPositions.</param>
        /// <param name="PremadeChatRoomId">PremadeChatRoomId.</param>
        /// <param name="ReadyState">ReadyState.</param>
        /// <param name="ReadyToMatchmake">ReadyToMatchmake.</param>
        /// <param name="ShowPositionExcluder">ShowPositionExcluder.</param>
        /// <param name="ShowPositionSelector">ShowPositionSelector.</param>
        /// <param name="Timer">Timer.</param>
        public LolLobbyTeamBuilderTbLobbyPremadeStateResource(bool? AutoFillEligible = default(bool?), bool? AutoFillProtectedForPromos = default(bool?), bool? AutoFillProtectedForStreaking = default(bool?), LolLobbyTeamBuilderTbLobbyBackwardsToPremadeTransitionResource BackwardsToPremadeTransitionReason = default(LolLobbyTeamBuilderTbLobbyBackwardsToPremadeTransitionResource), int? CaptainSlotId = default(int?), string DraftPremadeId = default(string), List<LolLobbyTeamBuilderTbLobbySlotResource> DraftSlots = default(List<LolLobbyTeamBuilderTbLobbySlotResource>), int? LocalPlayerSlotId = default(int?), List<string> PlayableDraftPositions = default(List<string>), string PremadeChatRoomId = default(string), LolLobbyTeamBuilderReadyStateV1 ReadyState = default(LolLobbyTeamBuilderReadyStateV1), bool? ReadyToMatchmake = default(bool?), bool? ShowPositionExcluder = default(bool?), bool? ShowPositionSelector = default(bool?), long? Timer = default(long?))
        {
            this.AutoFillEligible = AutoFillEligible;
            this.AutoFillProtectedForPromos = AutoFillProtectedForPromos;
            this.AutoFillProtectedForStreaking = AutoFillProtectedForStreaking;
            this.BackwardsToPremadeTransitionReason = BackwardsToPremadeTransitionReason;
            this.CaptainSlotId = CaptainSlotId;
            this.DraftPremadeId = DraftPremadeId;
            this.DraftSlots = DraftSlots;
            this.LocalPlayerSlotId = LocalPlayerSlotId;
            this.PlayableDraftPositions = PlayableDraftPositions;
            this.PremadeChatRoomId = PremadeChatRoomId;
            this.ReadyState = ReadyState;
            this.ReadyToMatchmake = ReadyToMatchmake;
            this.ShowPositionExcluder = ShowPositionExcluder;
            this.ShowPositionSelector = ShowPositionSelector;
            this.Timer = Timer;
        }
        
        /// <summary>
        /// Gets or Sets AutoFillEligible
        /// </summary>
        [DataMember(Name="autoFillEligible", EmitDefaultValue=false)]
        public bool? AutoFillEligible { get; set; }

        /// <summary>
        /// Gets or Sets AutoFillProtectedForPromos
        /// </summary>
        [DataMember(Name="autoFillProtectedForPromos", EmitDefaultValue=false)]
        public bool? AutoFillProtectedForPromos { get; set; }

        /// <summary>
        /// Gets or Sets AutoFillProtectedForStreaking
        /// </summary>
        [DataMember(Name="autoFillProtectedForStreaking", EmitDefaultValue=false)]
        public bool? AutoFillProtectedForStreaking { get; set; }

        /// <summary>
        /// Gets or Sets BackwardsToPremadeTransitionReason
        /// </summary>
        [DataMember(Name="backwardsToPremadeTransitionReason", EmitDefaultValue=false)]
        public LolLobbyTeamBuilderTbLobbyBackwardsToPremadeTransitionResource BackwardsToPremadeTransitionReason { get; set; }

        /// <summary>
        /// Gets or Sets CaptainSlotId
        /// </summary>
        [DataMember(Name="captainSlotId", EmitDefaultValue=false)]
        public int? CaptainSlotId { get; set; }

        /// <summary>
        /// Gets or Sets DraftPremadeId
        /// </summary>
        [DataMember(Name="draftPremadeId", EmitDefaultValue=false)]
        public string DraftPremadeId { get; set; }

        /// <summary>
        /// Gets or Sets DraftSlots
        /// </summary>
        [DataMember(Name="draftSlots", EmitDefaultValue=false)]
        public List<LolLobbyTeamBuilderTbLobbySlotResource> DraftSlots { get; set; }

        /// <summary>
        /// Gets or Sets LocalPlayerSlotId
        /// </summary>
        [DataMember(Name="localPlayerSlotId", EmitDefaultValue=false)]
        public int? LocalPlayerSlotId { get; set; }

        /// <summary>
        /// Gets or Sets PlayableDraftPositions
        /// </summary>
        [DataMember(Name="playableDraftPositions", EmitDefaultValue=false)]
        public List<string> PlayableDraftPositions { get; set; }

        /// <summary>
        /// Gets or Sets PremadeChatRoomId
        /// </summary>
        [DataMember(Name="premadeChatRoomId", EmitDefaultValue=false)]
        public string PremadeChatRoomId { get; set; }

        /// <summary>
        /// Gets or Sets ReadyState
        /// </summary>
        [DataMember(Name="readyState", EmitDefaultValue=false)]
        public LolLobbyTeamBuilderReadyStateV1 ReadyState { get; set; }

        /// <summary>
        /// Gets or Sets ReadyToMatchmake
        /// </summary>
        [DataMember(Name="readyToMatchmake", EmitDefaultValue=false)]
        public bool? ReadyToMatchmake { get; set; }

        /// <summary>
        /// Gets or Sets ShowPositionExcluder
        /// </summary>
        [DataMember(Name="showPositionExcluder", EmitDefaultValue=false)]
        public bool? ShowPositionExcluder { get; set; }

        /// <summary>
        /// Gets or Sets ShowPositionSelector
        /// </summary>
        [DataMember(Name="showPositionSelector", EmitDefaultValue=false)]
        public bool? ShowPositionSelector { get; set; }

        /// <summary>
        /// Gets or Sets Timer
        /// </summary>
        [DataMember(Name="timer", EmitDefaultValue=false)]
        public long? Timer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLobbyTeamBuilderTbLobbyPremadeStateResource {\n");
            sb.Append("  AutoFillEligible: ").Append(AutoFillEligible).Append("\n");
            sb.Append("  AutoFillProtectedForPromos: ").Append(AutoFillProtectedForPromos).Append("\n");
            sb.Append("  AutoFillProtectedForStreaking: ").Append(AutoFillProtectedForStreaking).Append("\n");
            sb.Append("  BackwardsToPremadeTransitionReason: ").Append(BackwardsToPremadeTransitionReason).Append("\n");
            sb.Append("  CaptainSlotId: ").Append(CaptainSlotId).Append("\n");
            sb.Append("  DraftPremadeId: ").Append(DraftPremadeId).Append("\n");
            sb.Append("  DraftSlots: ").Append(DraftSlots).Append("\n");
            sb.Append("  LocalPlayerSlotId: ").Append(LocalPlayerSlotId).Append("\n");
            sb.Append("  PlayableDraftPositions: ").Append(PlayableDraftPositions).Append("\n");
            sb.Append("  PremadeChatRoomId: ").Append(PremadeChatRoomId).Append("\n");
            sb.Append("  ReadyState: ").Append(ReadyState).Append("\n");
            sb.Append("  ReadyToMatchmake: ").Append(ReadyToMatchmake).Append("\n");
            sb.Append("  ShowPositionExcluder: ").Append(ShowPositionExcluder).Append("\n");
            sb.Append("  ShowPositionSelector: ").Append(ShowPositionSelector).Append("\n");
            sb.Append("  Timer: ").Append(Timer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLobbyTeamBuilderTbLobbyPremadeStateResource);
        }

        /// <summary>
        /// Returns true if LolLobbyTeamBuilderTbLobbyPremadeStateResource instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLobbyTeamBuilderTbLobbyPremadeStateResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLobbyTeamBuilderTbLobbyPremadeStateResource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AutoFillEligible == other.AutoFillEligible ||
                    this.AutoFillEligible != null &&
                    this.AutoFillEligible.Equals(other.AutoFillEligible)
                ) && 
                (
                    this.AutoFillProtectedForPromos == other.AutoFillProtectedForPromos ||
                    this.AutoFillProtectedForPromos != null &&
                    this.AutoFillProtectedForPromos.Equals(other.AutoFillProtectedForPromos)
                ) && 
                (
                    this.AutoFillProtectedForStreaking == other.AutoFillProtectedForStreaking ||
                    this.AutoFillProtectedForStreaking != null &&
                    this.AutoFillProtectedForStreaking.Equals(other.AutoFillProtectedForStreaking)
                ) && 
                (
                    this.BackwardsToPremadeTransitionReason == other.BackwardsToPremadeTransitionReason ||
                    this.BackwardsToPremadeTransitionReason != null &&
                    this.BackwardsToPremadeTransitionReason.Equals(other.BackwardsToPremadeTransitionReason)
                ) && 
                (
                    this.CaptainSlotId == other.CaptainSlotId ||
                    this.CaptainSlotId != null &&
                    this.CaptainSlotId.Equals(other.CaptainSlotId)
                ) && 
                (
                    this.DraftPremadeId == other.DraftPremadeId ||
                    this.DraftPremadeId != null &&
                    this.DraftPremadeId.Equals(other.DraftPremadeId)
                ) && 
                (
                    this.DraftSlots == other.DraftSlots ||
                    this.DraftSlots != null &&
                    this.DraftSlots.SequenceEqual(other.DraftSlots)
                ) && 
                (
                    this.LocalPlayerSlotId == other.LocalPlayerSlotId ||
                    this.LocalPlayerSlotId != null &&
                    this.LocalPlayerSlotId.Equals(other.LocalPlayerSlotId)
                ) && 
                (
                    this.PlayableDraftPositions == other.PlayableDraftPositions ||
                    this.PlayableDraftPositions != null &&
                    this.PlayableDraftPositions.SequenceEqual(other.PlayableDraftPositions)
                ) && 
                (
                    this.PremadeChatRoomId == other.PremadeChatRoomId ||
                    this.PremadeChatRoomId != null &&
                    this.PremadeChatRoomId.Equals(other.PremadeChatRoomId)
                ) && 
                (
                    this.ReadyState == other.ReadyState ||
                    this.ReadyState != null &&
                    this.ReadyState.Equals(other.ReadyState)
                ) && 
                (
                    this.ReadyToMatchmake == other.ReadyToMatchmake ||
                    this.ReadyToMatchmake != null &&
                    this.ReadyToMatchmake.Equals(other.ReadyToMatchmake)
                ) && 
                (
                    this.ShowPositionExcluder == other.ShowPositionExcluder ||
                    this.ShowPositionExcluder != null &&
                    this.ShowPositionExcluder.Equals(other.ShowPositionExcluder)
                ) && 
                (
                    this.ShowPositionSelector == other.ShowPositionSelector ||
                    this.ShowPositionSelector != null &&
                    this.ShowPositionSelector.Equals(other.ShowPositionSelector)
                ) && 
                (
                    this.Timer == other.Timer ||
                    this.Timer != null &&
                    this.Timer.Equals(other.Timer)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AutoFillEligible != null)
                    hash = hash * 59 + this.AutoFillEligible.GetHashCode();
                if (this.AutoFillProtectedForPromos != null)
                    hash = hash * 59 + this.AutoFillProtectedForPromos.GetHashCode();
                if (this.AutoFillProtectedForStreaking != null)
                    hash = hash * 59 + this.AutoFillProtectedForStreaking.GetHashCode();
                if (this.BackwardsToPremadeTransitionReason != null)
                    hash = hash * 59 + this.BackwardsToPremadeTransitionReason.GetHashCode();
                if (this.CaptainSlotId != null)
                    hash = hash * 59 + this.CaptainSlotId.GetHashCode();
                if (this.DraftPremadeId != null)
                    hash = hash * 59 + this.DraftPremadeId.GetHashCode();
                if (this.DraftSlots != null)
                    hash = hash * 59 + this.DraftSlots.GetHashCode();
                if (this.LocalPlayerSlotId != null)
                    hash = hash * 59 + this.LocalPlayerSlotId.GetHashCode();
                if (this.PlayableDraftPositions != null)
                    hash = hash * 59 + this.PlayableDraftPositions.GetHashCode();
                if (this.PremadeChatRoomId != null)
                    hash = hash * 59 + this.PremadeChatRoomId.GetHashCode();
                if (this.ReadyState != null)
                    hash = hash * 59 + this.ReadyState.GetHashCode();
                if (this.ReadyToMatchmake != null)
                    hash = hash * 59 + this.ReadyToMatchmake.GetHashCode();
                if (this.ShowPositionExcluder != null)
                    hash = hash * 59 + this.ShowPositionExcluder.GetHashCode();
                if (this.ShowPositionSelector != null)
                    hash = hash * 59 + this.ShowPositionSelector.GetHashCode();
                if (this.Timer != null)
                    hash = hash * 59 + this.Timer.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
