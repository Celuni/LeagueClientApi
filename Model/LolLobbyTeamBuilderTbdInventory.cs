/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLobbyTeamBuilderTbdInventory
    /// </summary>
    [DataContract]
    public partial class LolLobbyTeamBuilderTbdInventory :  IEquatable<LolLobbyTeamBuilderTbdInventory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLobbyTeamBuilderTbdInventory" /> class.
        /// </summary>
        /// <param name="AllChampionIds">AllChampionIds.</param>
        /// <param name="DisabledChampionIds">DisabledChampionIds.</param>
        /// <param name="InitialSpellIds">InitialSpellIds.</param>
        /// <param name="LastSelectedSkinIdByChampionId">LastSelectedSkinIdByChampionId.</param>
        /// <param name="SkinIds">SkinIds.</param>
        /// <param name="SpellIds">SpellIds.</param>
        public LolLobbyTeamBuilderTbdInventory(List<int?> AllChampionIds = default(List<int?>), List<int?> DisabledChampionIds = default(List<int?>), List<int?> InitialSpellIds = default(List<int?>), Dictionary<string, int?> LastSelectedSkinIdByChampionId = default(Dictionary<string, int?>), List<int?> SkinIds = default(List<int?>), List<int?> SpellIds = default(List<int?>))
        {
            this.AllChampionIds = AllChampionIds;
            this.DisabledChampionIds = DisabledChampionIds;
            this.InitialSpellIds = InitialSpellIds;
            this.LastSelectedSkinIdByChampionId = LastSelectedSkinIdByChampionId;
            this.SkinIds = SkinIds;
            this.SpellIds = SpellIds;
        }
        
        /// <summary>
        /// Gets or Sets AllChampionIds
        /// </summary>
        [DataMember(Name="allChampionIds", EmitDefaultValue=false)]
        public List<int?> AllChampionIds { get; set; }

        /// <summary>
        /// Gets or Sets DisabledChampionIds
        /// </summary>
        [DataMember(Name="disabledChampionIds", EmitDefaultValue=false)]
        public List<int?> DisabledChampionIds { get; set; }

        /// <summary>
        /// Gets or Sets InitialSpellIds
        /// </summary>
        [DataMember(Name="initialSpellIds", EmitDefaultValue=false)]
        public List<int?> InitialSpellIds { get; set; }

        /// <summary>
        /// Gets or Sets LastSelectedSkinIdByChampionId
        /// </summary>
        [DataMember(Name="lastSelectedSkinIdByChampionId", EmitDefaultValue=false)]
        public Dictionary<string, int?> LastSelectedSkinIdByChampionId { get; set; }

        /// <summary>
        /// Gets or Sets SkinIds
        /// </summary>
        [DataMember(Name="skinIds", EmitDefaultValue=false)]
        public List<int?> SkinIds { get; set; }

        /// <summary>
        /// Gets or Sets SpellIds
        /// </summary>
        [DataMember(Name="spellIds", EmitDefaultValue=false)]
        public List<int?> SpellIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLobbyTeamBuilderTbdInventory {\n");
            sb.Append("  AllChampionIds: ").Append(AllChampionIds).Append("\n");
            sb.Append("  DisabledChampionIds: ").Append(DisabledChampionIds).Append("\n");
            sb.Append("  InitialSpellIds: ").Append(InitialSpellIds).Append("\n");
            sb.Append("  LastSelectedSkinIdByChampionId: ").Append(LastSelectedSkinIdByChampionId).Append("\n");
            sb.Append("  SkinIds: ").Append(SkinIds).Append("\n");
            sb.Append("  SpellIds: ").Append(SpellIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLobbyTeamBuilderTbdInventory);
        }

        /// <summary>
        /// Returns true if LolLobbyTeamBuilderTbdInventory instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLobbyTeamBuilderTbdInventory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLobbyTeamBuilderTbdInventory other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AllChampionIds == other.AllChampionIds ||
                    this.AllChampionIds != null &&
                    this.AllChampionIds.SequenceEqual(other.AllChampionIds)
                ) && 
                (
                    this.DisabledChampionIds == other.DisabledChampionIds ||
                    this.DisabledChampionIds != null &&
                    this.DisabledChampionIds.SequenceEqual(other.DisabledChampionIds)
                ) && 
                (
                    this.InitialSpellIds == other.InitialSpellIds ||
                    this.InitialSpellIds != null &&
                    this.InitialSpellIds.SequenceEqual(other.InitialSpellIds)
                ) && 
                (
                    this.LastSelectedSkinIdByChampionId == other.LastSelectedSkinIdByChampionId ||
                    this.LastSelectedSkinIdByChampionId != null &&
                    this.LastSelectedSkinIdByChampionId.SequenceEqual(other.LastSelectedSkinIdByChampionId)
                ) && 
                (
                    this.SkinIds == other.SkinIds ||
                    this.SkinIds != null &&
                    this.SkinIds.SequenceEqual(other.SkinIds)
                ) && 
                (
                    this.SpellIds == other.SpellIds ||
                    this.SpellIds != null &&
                    this.SpellIds.SequenceEqual(other.SpellIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AllChampionIds != null)
                    hash = hash * 59 + this.AllChampionIds.GetHashCode();
                if (this.DisabledChampionIds != null)
                    hash = hash * 59 + this.DisabledChampionIds.GetHashCode();
                if (this.InitialSpellIds != null)
                    hash = hash * 59 + this.InitialSpellIds.GetHashCode();
                if (this.LastSelectedSkinIdByChampionId != null)
                    hash = hash * 59 + this.LastSelectedSkinIdByChampionId.GetHashCode();
                if (this.SkinIds != null)
                    hash = hash * 59 + this.SkinIds.GetHashCode();
                if (this.SpellIds != null)
                    hash = hash * 59 + this.SpellIds.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
