/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLobbyTeamBuilderTeamBuilderBoostInfo
    /// </summary>
    [DataContract]
    public partial class LolLobbyTeamBuilderTeamBuilderBoostInfo :  IEquatable<LolLobbyTeamBuilderTeamBuilderBoostInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLobbyTeamBuilderTeamBuilderBoostInfo" /> class.
        /// </summary>
        /// <param name="ActivatorCellId">ActivatorCellId.</param>
        /// <param name="AllowBattleBoost">AllowBattleBoost.</param>
        /// <param name="BattleBoostActivated">BattleBoostActivated.</param>
        /// <param name="Cost">Cost.</param>
        /// <param name="UnlockedSkinIds">UnlockedSkinIds.</param>
        public LolLobbyTeamBuilderTeamBuilderBoostInfo(long? ActivatorCellId = default(long?), bool? AllowBattleBoost = default(bool?), bool? BattleBoostActivated = default(bool?), long? Cost = default(long?), List<long?> UnlockedSkinIds = default(List<long?>))
        {
            this.ActivatorCellId = ActivatorCellId;
            this.AllowBattleBoost = AllowBattleBoost;
            this.BattleBoostActivated = BattleBoostActivated;
            this.Cost = Cost;
            this.UnlockedSkinIds = UnlockedSkinIds;
        }
        
        /// <summary>
        /// Gets or Sets ActivatorCellId
        /// </summary>
        [DataMember(Name="activatorCellId", EmitDefaultValue=false)]
        public long? ActivatorCellId { get; set; }

        /// <summary>
        /// Gets or Sets AllowBattleBoost
        /// </summary>
        [DataMember(Name="allowBattleBoost", EmitDefaultValue=false)]
        public bool? AllowBattleBoost { get; set; }

        /// <summary>
        /// Gets or Sets BattleBoostActivated
        /// </summary>
        [DataMember(Name="battleBoostActivated", EmitDefaultValue=false)]
        public bool? BattleBoostActivated { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public long? Cost { get; set; }

        /// <summary>
        /// Gets or Sets UnlockedSkinIds
        /// </summary>
        [DataMember(Name="unlockedSkinIds", EmitDefaultValue=false)]
        public List<long?> UnlockedSkinIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLobbyTeamBuilderTeamBuilderBoostInfo {\n");
            sb.Append("  ActivatorCellId: ").Append(ActivatorCellId).Append("\n");
            sb.Append("  AllowBattleBoost: ").Append(AllowBattleBoost).Append("\n");
            sb.Append("  BattleBoostActivated: ").Append(BattleBoostActivated).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  UnlockedSkinIds: ").Append(UnlockedSkinIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLobbyTeamBuilderTeamBuilderBoostInfo);
        }

        /// <summary>
        /// Returns true if LolLobbyTeamBuilderTeamBuilderBoostInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLobbyTeamBuilderTeamBuilderBoostInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLobbyTeamBuilderTeamBuilderBoostInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ActivatorCellId == other.ActivatorCellId ||
                    this.ActivatorCellId != null &&
                    this.ActivatorCellId.Equals(other.ActivatorCellId)
                ) && 
                (
                    this.AllowBattleBoost == other.AllowBattleBoost ||
                    this.AllowBattleBoost != null &&
                    this.AllowBattleBoost.Equals(other.AllowBattleBoost)
                ) && 
                (
                    this.BattleBoostActivated == other.BattleBoostActivated ||
                    this.BattleBoostActivated != null &&
                    this.BattleBoostActivated.Equals(other.BattleBoostActivated)
                ) && 
                (
                    this.Cost == other.Cost ||
                    this.Cost != null &&
                    this.Cost.Equals(other.Cost)
                ) && 
                (
                    this.UnlockedSkinIds == other.UnlockedSkinIds ||
                    this.UnlockedSkinIds != null &&
                    this.UnlockedSkinIds.SequenceEqual(other.UnlockedSkinIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ActivatorCellId != null)
                    hash = hash * 59 + this.ActivatorCellId.GetHashCode();
                if (this.AllowBattleBoost != null)
                    hash = hash * 59 + this.AllowBattleBoost.GetHashCode();
                if (this.BattleBoostActivated != null)
                    hash = hash * 59 + this.BattleBoostActivated.GetHashCode();
                if (this.Cost != null)
                    hash = hash * 59 + this.Cost.GetHashCode();
                if (this.UnlockedSkinIds != null)
                    hash = hash * 59 + this.UnlockedSkinIds.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
