/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLoginLoginQueue
    /// </summary>
    [DataContract]
    public partial class LolLoginLoginQueue :  IEquatable<LolLoginLoginQueue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLoginLoginQueue" /> class.
        /// </summary>
        /// <param name="ApproximateWaitTimeSeconds">ApproximateWaitTimeSeconds.</param>
        /// <param name="EstimatedPositionInQueue">EstimatedPositionInQueue.</param>
        /// <param name="IsPositionCapped">IsPositionCapped.</param>
        public LolLoginLoginQueue(long? ApproximateWaitTimeSeconds = default(long?), long? EstimatedPositionInQueue = default(long?), bool? IsPositionCapped = default(bool?))
        {
            this.ApproximateWaitTimeSeconds = ApproximateWaitTimeSeconds;
            this.EstimatedPositionInQueue = EstimatedPositionInQueue;
            this.IsPositionCapped = IsPositionCapped;
        }
        
        /// <summary>
        /// Gets or Sets ApproximateWaitTimeSeconds
        /// </summary>
        [DataMember(Name="approximateWaitTimeSeconds", EmitDefaultValue=false)]
        public long? ApproximateWaitTimeSeconds { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedPositionInQueue
        /// </summary>
        [DataMember(Name="estimatedPositionInQueue", EmitDefaultValue=false)]
        public long? EstimatedPositionInQueue { get; set; }

        /// <summary>
        /// Gets or Sets IsPositionCapped
        /// </summary>
        [DataMember(Name="isPositionCapped", EmitDefaultValue=false)]
        public bool? IsPositionCapped { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLoginLoginQueue {\n");
            sb.Append("  ApproximateWaitTimeSeconds: ").Append(ApproximateWaitTimeSeconds).Append("\n");
            sb.Append("  EstimatedPositionInQueue: ").Append(EstimatedPositionInQueue).Append("\n");
            sb.Append("  IsPositionCapped: ").Append(IsPositionCapped).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLoginLoginQueue);
        }

        /// <summary>
        /// Returns true if LolLoginLoginQueue instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLoginLoginQueue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLoginLoginQueue other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ApproximateWaitTimeSeconds == other.ApproximateWaitTimeSeconds ||
                    this.ApproximateWaitTimeSeconds != null &&
                    this.ApproximateWaitTimeSeconds.Equals(other.ApproximateWaitTimeSeconds)
                ) && 
                (
                    this.EstimatedPositionInQueue == other.EstimatedPositionInQueue ||
                    this.EstimatedPositionInQueue != null &&
                    this.EstimatedPositionInQueue.Equals(other.EstimatedPositionInQueue)
                ) && 
                (
                    this.IsPositionCapped == other.IsPositionCapped ||
                    this.IsPositionCapped != null &&
                    this.IsPositionCapped.Equals(other.IsPositionCapped)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ApproximateWaitTimeSeconds != null)
                    hash = hash * 59 + this.ApproximateWaitTimeSeconds.GetHashCode();
                if (this.EstimatedPositionInQueue != null)
                    hash = hash * 59 + this.EstimatedPositionInQueue.GetHashCode();
                if (this.IsPositionCapped != null)
                    hash = hash * 59 + this.IsPositionCapped.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
