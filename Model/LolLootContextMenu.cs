/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLootContextMenu
    /// </summary>
    [DataContract]
    public partial class LolLootContextMenu :  IEquatable<LolLootContextMenu>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLootContextMenu" /> class.
        /// </summary>
        /// <param name="ActionType">ActionType.</param>
        /// <param name="Enabled">Enabled.</param>
        /// <param name="EssenceQuantity">EssenceQuantity.</param>
        /// <param name="EssenceType">EssenceType.</param>
        /// <param name="Name">Name.</param>
        /// <param name="RequiredOthers">RequiredOthers.</param>
        /// <param name="RequiredOthersCount">RequiredOthersCount.</param>
        /// <param name="RequiredOthersName">RequiredOthersName.</param>
        /// <param name="RequiredTokens">RequiredTokens.</param>
        public LolLootContextMenu(string ActionType = default(string), bool? Enabled = default(bool?), int? EssenceQuantity = default(int?), string EssenceType = default(string), string Name = default(string), string RequiredOthers = default(string), int? RequiredOthersCount = default(int?), string RequiredOthersName = default(string), string RequiredTokens = default(string))
        {
            this.ActionType = ActionType;
            this.Enabled = Enabled;
            this.EssenceQuantity = EssenceQuantity;
            this.EssenceType = EssenceType;
            this.Name = Name;
            this.RequiredOthers = RequiredOthers;
            this.RequiredOthersCount = RequiredOthersCount;
            this.RequiredOthersName = RequiredOthersName;
            this.RequiredTokens = RequiredTokens;
        }
        
        /// <summary>
        /// Gets or Sets ActionType
        /// </summary>
        [DataMember(Name="actionType", EmitDefaultValue=false)]
        public string ActionType { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or Sets EssenceQuantity
        /// </summary>
        [DataMember(Name="essenceQuantity", EmitDefaultValue=false)]
        public int? EssenceQuantity { get; set; }

        /// <summary>
        /// Gets or Sets EssenceType
        /// </summary>
        [DataMember(Name="essenceType", EmitDefaultValue=false)]
        public string EssenceType { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets RequiredOthers
        /// </summary>
        [DataMember(Name="requiredOthers", EmitDefaultValue=false)]
        public string RequiredOthers { get; set; }

        /// <summary>
        /// Gets or Sets RequiredOthersCount
        /// </summary>
        [DataMember(Name="requiredOthersCount", EmitDefaultValue=false)]
        public int? RequiredOthersCount { get; set; }

        /// <summary>
        /// Gets or Sets RequiredOthersName
        /// </summary>
        [DataMember(Name="requiredOthersName", EmitDefaultValue=false)]
        public string RequiredOthersName { get; set; }

        /// <summary>
        /// Gets or Sets RequiredTokens
        /// </summary>
        [DataMember(Name="requiredTokens", EmitDefaultValue=false)]
        public string RequiredTokens { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLootContextMenu {\n");
            sb.Append("  ActionType: ").Append(ActionType).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  EssenceQuantity: ").Append(EssenceQuantity).Append("\n");
            sb.Append("  EssenceType: ").Append(EssenceType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RequiredOthers: ").Append(RequiredOthers).Append("\n");
            sb.Append("  RequiredOthersCount: ").Append(RequiredOthersCount).Append("\n");
            sb.Append("  RequiredOthersName: ").Append(RequiredOthersName).Append("\n");
            sb.Append("  RequiredTokens: ").Append(RequiredTokens).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLootContextMenu);
        }

        /// <summary>
        /// Returns true if LolLootContextMenu instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLootContextMenu to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLootContextMenu other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ActionType == other.ActionType ||
                    this.ActionType != null &&
                    this.ActionType.Equals(other.ActionType)
                ) && 
                (
                    this.Enabled == other.Enabled ||
                    this.Enabled != null &&
                    this.Enabled.Equals(other.Enabled)
                ) && 
                (
                    this.EssenceQuantity == other.EssenceQuantity ||
                    this.EssenceQuantity != null &&
                    this.EssenceQuantity.Equals(other.EssenceQuantity)
                ) && 
                (
                    this.EssenceType == other.EssenceType ||
                    this.EssenceType != null &&
                    this.EssenceType.Equals(other.EssenceType)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.RequiredOthers == other.RequiredOthers ||
                    this.RequiredOthers != null &&
                    this.RequiredOthers.Equals(other.RequiredOthers)
                ) && 
                (
                    this.RequiredOthersCount == other.RequiredOthersCount ||
                    this.RequiredOthersCount != null &&
                    this.RequiredOthersCount.Equals(other.RequiredOthersCount)
                ) && 
                (
                    this.RequiredOthersName == other.RequiredOthersName ||
                    this.RequiredOthersName != null &&
                    this.RequiredOthersName.Equals(other.RequiredOthersName)
                ) && 
                (
                    this.RequiredTokens == other.RequiredTokens ||
                    this.RequiredTokens != null &&
                    this.RequiredTokens.Equals(other.RequiredTokens)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ActionType != null)
                    hash = hash * 59 + this.ActionType.GetHashCode();
                if (this.Enabled != null)
                    hash = hash * 59 + this.Enabled.GetHashCode();
                if (this.EssenceQuantity != null)
                    hash = hash * 59 + this.EssenceQuantity.GetHashCode();
                if (this.EssenceType != null)
                    hash = hash * 59 + this.EssenceType.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.RequiredOthers != null)
                    hash = hash * 59 + this.RequiredOthers.GetHashCode();
                if (this.RequiredOthersCount != null)
                    hash = hash * 59 + this.RequiredOthersCount.GetHashCode();
                if (this.RequiredOthersName != null)
                    hash = hash * 59 + this.RequiredOthersName.GetHashCode();
                if (this.RequiredTokens != null)
                    hash = hash * 59 + this.RequiredTokens.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
