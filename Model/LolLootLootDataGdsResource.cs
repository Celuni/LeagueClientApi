/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLootLootDataGdsResource
    /// </summary>
    [DataContract]
    public partial class LolLootLootDataGdsResource :  IEquatable<LolLootLootDataGdsResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLootLootDataGdsResource" /> class.
        /// </summary>
        /// <param name="LootItems">LootItems.</param>
        /// <param name="LootRecipes">LootRecipes.</param>
        public LolLootLootDataGdsResource(List<LolLootLootItemGdsResource> LootItems = default(List<LolLootLootItemGdsResource>), List<LolLootLootRecipeGdsResource> LootRecipes = default(List<LolLootLootRecipeGdsResource>))
        {
            this.LootItems = LootItems;
            this.LootRecipes = LootRecipes;
        }
        
        /// <summary>
        /// Gets or Sets LootItems
        /// </summary>
        [DataMember(Name="LootItems", EmitDefaultValue=false)]
        public List<LolLootLootItemGdsResource> LootItems { get; set; }

        /// <summary>
        /// Gets or Sets LootRecipes
        /// </summary>
        [DataMember(Name="LootRecipes", EmitDefaultValue=false)]
        public List<LolLootLootRecipeGdsResource> LootRecipes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLootLootDataGdsResource {\n");
            sb.Append("  LootItems: ").Append(LootItems).Append("\n");
            sb.Append("  LootRecipes: ").Append(LootRecipes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLootLootDataGdsResource);
        }

        /// <summary>
        /// Returns true if LolLootLootDataGdsResource instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLootLootDataGdsResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLootLootDataGdsResource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.LootItems == other.LootItems ||
                    this.LootItems != null &&
                    this.LootItems.SequenceEqual(other.LootItems)
                ) && 
                (
                    this.LootRecipes == other.LootRecipes ||
                    this.LootRecipes != null &&
                    this.LootRecipes.SequenceEqual(other.LootRecipes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.LootItems != null)
                    hash = hash * 59 + this.LootItems.GetHashCode();
                if (this.LootRecipes != null)
                    hash = hash * 59 + this.LootRecipes.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
