/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLootLootGrantNotification
    /// </summary>
    [DataContract]
    public partial class LolLootLootGrantNotification :  IEquatable<LolLootLootGrantNotification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLootLootGrantNotification" /> class.
        /// </summary>
        /// <param name="AccountId">AccountId.</param>
        /// <param name="ChampionId">ChampionId.</param>
        /// <param name="GameId">GameId.</param>
        /// <param name="Id">Id.</param>
        /// <param name="LootName">LootName.</param>
        /// <param name="MessageKey">MessageKey.</param>
        /// <param name="MsgId">MsgId.</param>
        /// <param name="PlayerGrade">PlayerGrade.</param>
        /// <param name="PlayerId">PlayerId.</param>
        public LolLootLootGrantNotification(long? AccountId = default(long?), int? ChampionId = default(int?), long? GameId = default(long?), long? Id = default(long?), string LootName = default(string), string MessageKey = default(string), string MsgId = default(string), string PlayerGrade = default(string), long? PlayerId = default(long?))
        {
            this.AccountId = AccountId;
            this.ChampionId = ChampionId;
            this.GameId = GameId;
            this.Id = Id;
            this.LootName = LootName;
            this.MessageKey = MessageKey;
            this.MsgId = MsgId;
            this.PlayerGrade = PlayerGrade;
            this.PlayerId = PlayerId;
        }
        
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public long? AccountId { get; set; }

        /// <summary>
        /// Gets or Sets ChampionId
        /// </summary>
        [DataMember(Name="championId", EmitDefaultValue=false)]
        public int? ChampionId { get; set; }

        /// <summary>
        /// Gets or Sets GameId
        /// </summary>
        [DataMember(Name="gameId", EmitDefaultValue=false)]
        public long? GameId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets LootName
        /// </summary>
        [DataMember(Name="lootName", EmitDefaultValue=false)]
        public string LootName { get; set; }

        /// <summary>
        /// Gets or Sets MessageKey
        /// </summary>
        [DataMember(Name="messageKey", EmitDefaultValue=false)]
        public string MessageKey { get; set; }

        /// <summary>
        /// Gets or Sets MsgId
        /// </summary>
        [DataMember(Name="msgId", EmitDefaultValue=false)]
        public string MsgId { get; set; }

        /// <summary>
        /// Gets or Sets PlayerGrade
        /// </summary>
        [DataMember(Name="playerGrade", EmitDefaultValue=false)]
        public string PlayerGrade { get; set; }

        /// <summary>
        /// Gets or Sets PlayerId
        /// </summary>
        [DataMember(Name="playerId", EmitDefaultValue=false)]
        public long? PlayerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLootLootGrantNotification {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ChampionId: ").Append(ChampionId).Append("\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LootName: ").Append(LootName).Append("\n");
            sb.Append("  MessageKey: ").Append(MessageKey).Append("\n");
            sb.Append("  MsgId: ").Append(MsgId).Append("\n");
            sb.Append("  PlayerGrade: ").Append(PlayerGrade).Append("\n");
            sb.Append("  PlayerId: ").Append(PlayerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLootLootGrantNotification);
        }

        /// <summary>
        /// Returns true if LolLootLootGrantNotification instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLootLootGrantNotification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLootLootGrantNotification other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.ChampionId == other.ChampionId ||
                    this.ChampionId != null &&
                    this.ChampionId.Equals(other.ChampionId)
                ) && 
                (
                    this.GameId == other.GameId ||
                    this.GameId != null &&
                    this.GameId.Equals(other.GameId)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.LootName == other.LootName ||
                    this.LootName != null &&
                    this.LootName.Equals(other.LootName)
                ) && 
                (
                    this.MessageKey == other.MessageKey ||
                    this.MessageKey != null &&
                    this.MessageKey.Equals(other.MessageKey)
                ) && 
                (
                    this.MsgId == other.MsgId ||
                    this.MsgId != null &&
                    this.MsgId.Equals(other.MsgId)
                ) && 
                (
                    this.PlayerGrade == other.PlayerGrade ||
                    this.PlayerGrade != null &&
                    this.PlayerGrade.Equals(other.PlayerGrade)
                ) && 
                (
                    this.PlayerId == other.PlayerId ||
                    this.PlayerId != null &&
                    this.PlayerId.Equals(other.PlayerId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.ChampionId != null)
                    hash = hash * 59 + this.ChampionId.GetHashCode();
                if (this.GameId != null)
                    hash = hash * 59 + this.GameId.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.LootName != null)
                    hash = hash * 59 + this.LootName.GetHashCode();
                if (this.MessageKey != null)
                    hash = hash * 59 + this.MessageKey.GetHashCode();
                if (this.MsgId != null)
                    hash = hash * 59 + this.MsgId.GetHashCode();
                if (this.PlayerGrade != null)
                    hash = hash * 59 + this.PlayerGrade.GetHashCode();
                if (this.PlayerId != null)
                    hash = hash * 59 + this.PlayerId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
