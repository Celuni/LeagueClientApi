/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLootPlayerLoot
    /// </summary>
    [DataContract]
    public partial class LolLootPlayerLoot :  IEquatable<LolLootPlayerLoot>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLootPlayerLoot" /> class.
        /// </summary>
        /// <param name="Asset">Asset.</param>
        /// <param name="Count">Count.</param>
        /// <param name="DisenchantLootName">DisenchantLootName.</param>
        /// <param name="DisenchantValue">DisenchantValue.</param>
        /// <param name="DisplayCategories">DisplayCategories.</param>
        /// <param name="ExpiryTime">ExpiryTime.</param>
        /// <param name="IsNew">IsNew.</param>
        /// <param name="IsRental">IsRental.</param>
        /// <param name="ItemDesc">ItemDesc.</param>
        /// <param name="ItemStatus">ItemStatus.</param>
        /// <param name="LocalizedDescription">LocalizedDescription.</param>
        /// <param name="LocalizedName">LocalizedName.</param>
        /// <param name="LootId">LootId.</param>
        /// <param name="LootName">LootName.</param>
        /// <param name="ParentItemStatus">ParentItemStatus.</param>
        /// <param name="ParentStoreItemId">ParentStoreItemId.</param>
        /// <param name="Rarity">Rarity.</param>
        /// <param name="RedeemableStatus">RedeemableStatus.</param>
        /// <param name="RefId">RefId.</param>
        /// <param name="RentalGames">RentalGames.</param>
        /// <param name="RentalSeconds">RentalSeconds.</param>
        /// <param name="ShadowPath">ShadowPath.</param>
        /// <param name="SplashPath">SplashPath.</param>
        /// <param name="StoreItemId">StoreItemId.</param>
        /// <param name="Tags">Tags.</param>
        /// <param name="TilePath">TilePath.</param>
        /// <param name="Type">Type.</param>
        /// <param name="UpgradeLootName">UpgradeLootName.</param>
        /// <param name="Value">Value.</param>
        public LolLootPlayerLoot(string Asset = default(string), int? Count = default(int?), string DisenchantLootName = default(string), int? DisenchantValue = default(int?), string DisplayCategories = default(string), long? ExpiryTime = default(long?), bool? IsNew = default(bool?), bool? IsRental = default(bool?), string ItemDesc = default(string), LolLootItemOwnershipStatus ItemStatus = default(LolLootItemOwnershipStatus), string LocalizedDescription = default(string), string LocalizedName = default(string), string LootId = default(string), string LootName = default(string), LolLootItemOwnershipStatus ParentItemStatus = default(LolLootItemOwnershipStatus), int? ParentStoreItemId = default(int?), string Rarity = default(string), LolLootRedeemableStatus RedeemableStatus = default(LolLootRedeemableStatus), string RefId = default(string), int? RentalGames = default(int?), long? RentalSeconds = default(long?), string ShadowPath = default(string), string SplashPath = default(string), int? StoreItemId = default(int?), string Tags = default(string), string TilePath = default(string), string Type = default(string), string UpgradeLootName = default(string), int? Value = default(int?))
        {
            this.Asset = Asset;
            this.Count = Count;
            this.DisenchantLootName = DisenchantLootName;
            this.DisenchantValue = DisenchantValue;
            this.DisplayCategories = DisplayCategories;
            this.ExpiryTime = ExpiryTime;
            this.IsNew = IsNew;
            this.IsRental = IsRental;
            this.ItemDesc = ItemDesc;
            this.ItemStatus = ItemStatus;
            this.LocalizedDescription = LocalizedDescription;
            this.LocalizedName = LocalizedName;
            this.LootId = LootId;
            this.LootName = LootName;
            this.ParentItemStatus = ParentItemStatus;
            this.ParentStoreItemId = ParentStoreItemId;
            this.Rarity = Rarity;
            this.RedeemableStatus = RedeemableStatus;
            this.RefId = RefId;
            this.RentalGames = RentalGames;
            this.RentalSeconds = RentalSeconds;
            this.ShadowPath = ShadowPath;
            this.SplashPath = SplashPath;
            this.StoreItemId = StoreItemId;
            this.Tags = Tags;
            this.TilePath = TilePath;
            this.Type = Type;
            this.UpgradeLootName = UpgradeLootName;
            this.Value = Value;
        }
        
        /// <summary>
        /// Gets or Sets Asset
        /// </summary>
        [DataMember(Name="asset", EmitDefaultValue=false)]
        public string Asset { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int? Count { get; set; }

        /// <summary>
        /// Gets or Sets DisenchantLootName
        /// </summary>
        [DataMember(Name="disenchantLootName", EmitDefaultValue=false)]
        public string DisenchantLootName { get; set; }

        /// <summary>
        /// Gets or Sets DisenchantValue
        /// </summary>
        [DataMember(Name="disenchantValue", EmitDefaultValue=false)]
        public int? DisenchantValue { get; set; }

        /// <summary>
        /// Gets or Sets DisplayCategories
        /// </summary>
        [DataMember(Name="displayCategories", EmitDefaultValue=false)]
        public string DisplayCategories { get; set; }

        /// <summary>
        /// Gets or Sets ExpiryTime
        /// </summary>
        [DataMember(Name="expiryTime", EmitDefaultValue=false)]
        public long? ExpiryTime { get; set; }

        /// <summary>
        /// Gets or Sets IsNew
        /// </summary>
        [DataMember(Name="isNew", EmitDefaultValue=false)]
        public bool? IsNew { get; set; }

        /// <summary>
        /// Gets or Sets IsRental
        /// </summary>
        [DataMember(Name="isRental", EmitDefaultValue=false)]
        public bool? IsRental { get; set; }

        /// <summary>
        /// Gets or Sets ItemDesc
        /// </summary>
        [DataMember(Name="itemDesc", EmitDefaultValue=false)]
        public string ItemDesc { get; set; }

        /// <summary>
        /// Gets or Sets ItemStatus
        /// </summary>
        [DataMember(Name="itemStatus", EmitDefaultValue=false)]
        public LolLootItemOwnershipStatus ItemStatus { get; set; }

        /// <summary>
        /// Gets or Sets LocalizedDescription
        /// </summary>
        [DataMember(Name="localizedDescription", EmitDefaultValue=false)]
        public string LocalizedDescription { get; set; }

        /// <summary>
        /// Gets or Sets LocalizedName
        /// </summary>
        [DataMember(Name="localizedName", EmitDefaultValue=false)]
        public string LocalizedName { get; set; }

        /// <summary>
        /// Gets or Sets LootId
        /// </summary>
        [DataMember(Name="lootId", EmitDefaultValue=false)]
        public string LootId { get; set; }

        /// <summary>
        /// Gets or Sets LootName
        /// </summary>
        [DataMember(Name="lootName", EmitDefaultValue=false)]
        public string LootName { get; set; }

        /// <summary>
        /// Gets or Sets ParentItemStatus
        /// </summary>
        [DataMember(Name="parentItemStatus", EmitDefaultValue=false)]
        public LolLootItemOwnershipStatus ParentItemStatus { get; set; }

        /// <summary>
        /// Gets or Sets ParentStoreItemId
        /// </summary>
        [DataMember(Name="parentStoreItemId", EmitDefaultValue=false)]
        public int? ParentStoreItemId { get; set; }

        /// <summary>
        /// Gets or Sets Rarity
        /// </summary>
        [DataMember(Name="rarity", EmitDefaultValue=false)]
        public string Rarity { get; set; }

        /// <summary>
        /// Gets or Sets RedeemableStatus
        /// </summary>
        [DataMember(Name="redeemableStatus", EmitDefaultValue=false)]
        public LolLootRedeemableStatus RedeemableStatus { get; set; }

        /// <summary>
        /// Gets or Sets RefId
        /// </summary>
        [DataMember(Name="refId", EmitDefaultValue=false)]
        public string RefId { get; set; }

        /// <summary>
        /// Gets or Sets RentalGames
        /// </summary>
        [DataMember(Name="rentalGames", EmitDefaultValue=false)]
        public int? RentalGames { get; set; }

        /// <summary>
        /// Gets or Sets RentalSeconds
        /// </summary>
        [DataMember(Name="rentalSeconds", EmitDefaultValue=false)]
        public long? RentalSeconds { get; set; }

        /// <summary>
        /// Gets or Sets ShadowPath
        /// </summary>
        [DataMember(Name="shadowPath", EmitDefaultValue=false)]
        public string ShadowPath { get; set; }

        /// <summary>
        /// Gets or Sets SplashPath
        /// </summary>
        [DataMember(Name="splashPath", EmitDefaultValue=false)]
        public string SplashPath { get; set; }

        /// <summary>
        /// Gets or Sets StoreItemId
        /// </summary>
        [DataMember(Name="storeItemId", EmitDefaultValue=false)]
        public int? StoreItemId { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public string Tags { get; set; }

        /// <summary>
        /// Gets or Sets TilePath
        /// </summary>
        [DataMember(Name="tilePath", EmitDefaultValue=false)]
        public string TilePath { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets UpgradeLootName
        /// </summary>
        [DataMember(Name="upgradeLootName", EmitDefaultValue=false)]
        public string UpgradeLootName { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public int? Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLootPlayerLoot {\n");
            sb.Append("  Asset: ").Append(Asset).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  DisenchantLootName: ").Append(DisenchantLootName).Append("\n");
            sb.Append("  DisenchantValue: ").Append(DisenchantValue).Append("\n");
            sb.Append("  DisplayCategories: ").Append(DisplayCategories).Append("\n");
            sb.Append("  ExpiryTime: ").Append(ExpiryTime).Append("\n");
            sb.Append("  IsNew: ").Append(IsNew).Append("\n");
            sb.Append("  IsRental: ").Append(IsRental).Append("\n");
            sb.Append("  ItemDesc: ").Append(ItemDesc).Append("\n");
            sb.Append("  ItemStatus: ").Append(ItemStatus).Append("\n");
            sb.Append("  LocalizedDescription: ").Append(LocalizedDescription).Append("\n");
            sb.Append("  LocalizedName: ").Append(LocalizedName).Append("\n");
            sb.Append("  LootId: ").Append(LootId).Append("\n");
            sb.Append("  LootName: ").Append(LootName).Append("\n");
            sb.Append("  ParentItemStatus: ").Append(ParentItemStatus).Append("\n");
            sb.Append("  ParentStoreItemId: ").Append(ParentStoreItemId).Append("\n");
            sb.Append("  Rarity: ").Append(Rarity).Append("\n");
            sb.Append("  RedeemableStatus: ").Append(RedeemableStatus).Append("\n");
            sb.Append("  RefId: ").Append(RefId).Append("\n");
            sb.Append("  RentalGames: ").Append(RentalGames).Append("\n");
            sb.Append("  RentalSeconds: ").Append(RentalSeconds).Append("\n");
            sb.Append("  ShadowPath: ").Append(ShadowPath).Append("\n");
            sb.Append("  SplashPath: ").Append(SplashPath).Append("\n");
            sb.Append("  StoreItemId: ").Append(StoreItemId).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TilePath: ").Append(TilePath).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpgradeLootName: ").Append(UpgradeLootName).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLootPlayerLoot);
        }

        /// <summary>
        /// Returns true if LolLootPlayerLoot instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLootPlayerLoot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLootPlayerLoot other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Asset == other.Asset ||
                    this.Asset != null &&
                    this.Asset.Equals(other.Asset)
                ) && 
                (
                    this.Count == other.Count ||
                    this.Count != null &&
                    this.Count.Equals(other.Count)
                ) && 
                (
                    this.DisenchantLootName == other.DisenchantLootName ||
                    this.DisenchantLootName != null &&
                    this.DisenchantLootName.Equals(other.DisenchantLootName)
                ) && 
                (
                    this.DisenchantValue == other.DisenchantValue ||
                    this.DisenchantValue != null &&
                    this.DisenchantValue.Equals(other.DisenchantValue)
                ) && 
                (
                    this.DisplayCategories == other.DisplayCategories ||
                    this.DisplayCategories != null &&
                    this.DisplayCategories.Equals(other.DisplayCategories)
                ) && 
                (
                    this.ExpiryTime == other.ExpiryTime ||
                    this.ExpiryTime != null &&
                    this.ExpiryTime.Equals(other.ExpiryTime)
                ) && 
                (
                    this.IsNew == other.IsNew ||
                    this.IsNew != null &&
                    this.IsNew.Equals(other.IsNew)
                ) && 
                (
                    this.IsRental == other.IsRental ||
                    this.IsRental != null &&
                    this.IsRental.Equals(other.IsRental)
                ) && 
                (
                    this.ItemDesc == other.ItemDesc ||
                    this.ItemDesc != null &&
                    this.ItemDesc.Equals(other.ItemDesc)
                ) && 
                (
                    this.ItemStatus == other.ItemStatus ||
                    this.ItemStatus != null &&
                    this.ItemStatus.Equals(other.ItemStatus)
                ) && 
                (
                    this.LocalizedDescription == other.LocalizedDescription ||
                    this.LocalizedDescription != null &&
                    this.LocalizedDescription.Equals(other.LocalizedDescription)
                ) && 
                (
                    this.LocalizedName == other.LocalizedName ||
                    this.LocalizedName != null &&
                    this.LocalizedName.Equals(other.LocalizedName)
                ) && 
                (
                    this.LootId == other.LootId ||
                    this.LootId != null &&
                    this.LootId.Equals(other.LootId)
                ) && 
                (
                    this.LootName == other.LootName ||
                    this.LootName != null &&
                    this.LootName.Equals(other.LootName)
                ) && 
                (
                    this.ParentItemStatus == other.ParentItemStatus ||
                    this.ParentItemStatus != null &&
                    this.ParentItemStatus.Equals(other.ParentItemStatus)
                ) && 
                (
                    this.ParentStoreItemId == other.ParentStoreItemId ||
                    this.ParentStoreItemId != null &&
                    this.ParentStoreItemId.Equals(other.ParentStoreItemId)
                ) && 
                (
                    this.Rarity == other.Rarity ||
                    this.Rarity != null &&
                    this.Rarity.Equals(other.Rarity)
                ) && 
                (
                    this.RedeemableStatus == other.RedeemableStatus ||
                    this.RedeemableStatus != null &&
                    this.RedeemableStatus.Equals(other.RedeemableStatus)
                ) && 
                (
                    this.RefId == other.RefId ||
                    this.RefId != null &&
                    this.RefId.Equals(other.RefId)
                ) && 
                (
                    this.RentalGames == other.RentalGames ||
                    this.RentalGames != null &&
                    this.RentalGames.Equals(other.RentalGames)
                ) && 
                (
                    this.RentalSeconds == other.RentalSeconds ||
                    this.RentalSeconds != null &&
                    this.RentalSeconds.Equals(other.RentalSeconds)
                ) && 
                (
                    this.ShadowPath == other.ShadowPath ||
                    this.ShadowPath != null &&
                    this.ShadowPath.Equals(other.ShadowPath)
                ) && 
                (
                    this.SplashPath == other.SplashPath ||
                    this.SplashPath != null &&
                    this.SplashPath.Equals(other.SplashPath)
                ) && 
                (
                    this.StoreItemId == other.StoreItemId ||
                    this.StoreItemId != null &&
                    this.StoreItemId.Equals(other.StoreItemId)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.Equals(other.Tags)
                ) && 
                (
                    this.TilePath == other.TilePath ||
                    this.TilePath != null &&
                    this.TilePath.Equals(other.TilePath)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.UpgradeLootName == other.UpgradeLootName ||
                    this.UpgradeLootName != null &&
                    this.UpgradeLootName.Equals(other.UpgradeLootName)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Asset != null)
                    hash = hash * 59 + this.Asset.GetHashCode();
                if (this.Count != null)
                    hash = hash * 59 + this.Count.GetHashCode();
                if (this.DisenchantLootName != null)
                    hash = hash * 59 + this.DisenchantLootName.GetHashCode();
                if (this.DisenchantValue != null)
                    hash = hash * 59 + this.DisenchantValue.GetHashCode();
                if (this.DisplayCategories != null)
                    hash = hash * 59 + this.DisplayCategories.GetHashCode();
                if (this.ExpiryTime != null)
                    hash = hash * 59 + this.ExpiryTime.GetHashCode();
                if (this.IsNew != null)
                    hash = hash * 59 + this.IsNew.GetHashCode();
                if (this.IsRental != null)
                    hash = hash * 59 + this.IsRental.GetHashCode();
                if (this.ItemDesc != null)
                    hash = hash * 59 + this.ItemDesc.GetHashCode();
                if (this.ItemStatus != null)
                    hash = hash * 59 + this.ItemStatus.GetHashCode();
                if (this.LocalizedDescription != null)
                    hash = hash * 59 + this.LocalizedDescription.GetHashCode();
                if (this.LocalizedName != null)
                    hash = hash * 59 + this.LocalizedName.GetHashCode();
                if (this.LootId != null)
                    hash = hash * 59 + this.LootId.GetHashCode();
                if (this.LootName != null)
                    hash = hash * 59 + this.LootName.GetHashCode();
                if (this.ParentItemStatus != null)
                    hash = hash * 59 + this.ParentItemStatus.GetHashCode();
                if (this.ParentStoreItemId != null)
                    hash = hash * 59 + this.ParentStoreItemId.GetHashCode();
                if (this.Rarity != null)
                    hash = hash * 59 + this.Rarity.GetHashCode();
                if (this.RedeemableStatus != null)
                    hash = hash * 59 + this.RedeemableStatus.GetHashCode();
                if (this.RefId != null)
                    hash = hash * 59 + this.RefId.GetHashCode();
                if (this.RentalGames != null)
                    hash = hash * 59 + this.RentalGames.GetHashCode();
                if (this.RentalSeconds != null)
                    hash = hash * 59 + this.RentalSeconds.GetHashCode();
                if (this.ShadowPath != null)
                    hash = hash * 59 + this.ShadowPath.GetHashCode();
                if (this.SplashPath != null)
                    hash = hash * 59 + this.SplashPath.GetHashCode();
                if (this.StoreItemId != null)
                    hash = hash * 59 + this.StoreItemId.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                if (this.TilePath != null)
                    hash = hash * 59 + this.TilePath.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.UpgradeLootName != null)
                    hash = hash * 59 + this.UpgradeLootName.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
