/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolLootPlayerLootMap
    /// </summary>
    [DataContract]
    public partial class LolLootPlayerLootMap :  IEquatable<LolLootPlayerLootMap>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolLootPlayerLootMap" /> class.
        /// </summary>
        /// <param name="PlayerLoot">PlayerLoot.</param>
        /// <param name="Version">Version.</param>
        public LolLootPlayerLootMap(Dictionary<string, LolLootPlayerLoot> PlayerLoot = default(Dictionary<string, LolLootPlayerLoot>), long? Version = default(long?))
        {
            this.PlayerLoot = PlayerLoot;
            this.Version = Version;
        }
        
        /// <summary>
        /// Gets or Sets PlayerLoot
        /// </summary>
        [DataMember(Name="playerLoot", EmitDefaultValue=false)]
        public Dictionary<string, LolLootPlayerLoot> PlayerLoot { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public long? Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolLootPlayerLootMap {\n");
            sb.Append("  PlayerLoot: ").Append(PlayerLoot).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolLootPlayerLootMap);
        }

        /// <summary>
        /// Returns true if LolLootPlayerLootMap instances are equal
        /// </summary>
        /// <param name="other">Instance of LolLootPlayerLootMap to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolLootPlayerLootMap other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PlayerLoot == other.PlayerLoot ||
                    this.PlayerLoot != null &&
                    this.PlayerLoot.SequenceEqual(other.PlayerLoot)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PlayerLoot != null)
                    hash = hash * 59 + this.PlayerLoot.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
