/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolMatchHistoryMatchHistoryGame
    /// </summary>
    [DataContract]
    public partial class LolMatchHistoryMatchHistoryGame :  IEquatable<LolMatchHistoryMatchHistoryGame>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolMatchHistoryMatchHistoryGame" /> class.
        /// </summary>
        /// <param name="GameCreation">GameCreation.</param>
        /// <param name="GameCreationDate">GameCreationDate.</param>
        /// <param name="GameDuration">GameDuration.</param>
        /// <param name="GameId">GameId.</param>
        /// <param name="GameMode">GameMode.</param>
        /// <param name="GameType">GameType.</param>
        /// <param name="GameVersion">GameVersion.</param>
        /// <param name="MapId">MapId.</param>
        /// <param name="ParticipantIdentities">ParticipantIdentities.</param>
        /// <param name="Participants">Participants.</param>
        /// <param name="PlatformId">PlatformId.</param>
        /// <param name="QueueId">QueueId.</param>
        /// <param name="SeasonId">SeasonId.</param>
        /// <param name="Teams">Teams.</param>
        public LolMatchHistoryMatchHistoryGame(long? GameCreation = default(long?), string GameCreationDate = default(string), int? GameDuration = default(int?), long? GameId = default(long?), string GameMode = default(string), string GameType = default(string), string GameVersion = default(string), int? MapId = default(int?), List<LolMatchHistoryMatchHistoryParticipantIdentities> ParticipantIdentities = default(List<LolMatchHistoryMatchHistoryParticipantIdentities>), List<LolMatchHistoryMatchHistoryParticipant> Participants = default(List<LolMatchHistoryMatchHistoryParticipant>), string PlatformId = default(string), int? QueueId = default(int?), int? SeasonId = default(int?), List<LolMatchHistoryMatchHistoryTeam> Teams = default(List<LolMatchHistoryMatchHistoryTeam>))
        {
            this.GameCreation = GameCreation;
            this.GameCreationDate = GameCreationDate;
            this.GameDuration = GameDuration;
            this.GameId = GameId;
            this.GameMode = GameMode;
            this.GameType = GameType;
            this.GameVersion = GameVersion;
            this.MapId = MapId;
            this.ParticipantIdentities = ParticipantIdentities;
            this.Participants = Participants;
            this.PlatformId = PlatformId;
            this.QueueId = QueueId;
            this.SeasonId = SeasonId;
            this.Teams = Teams;
        }
        
        /// <summary>
        /// Gets or Sets GameCreation
        /// </summary>
        [DataMember(Name="gameCreation", EmitDefaultValue=false)]
        public long? GameCreation { get; set; }

        /// <summary>
        /// Gets or Sets GameCreationDate
        /// </summary>
        [DataMember(Name="gameCreationDate", EmitDefaultValue=false)]
        public string GameCreationDate { get; set; }

        /// <summary>
        /// Gets or Sets GameDuration
        /// </summary>
        [DataMember(Name="gameDuration", EmitDefaultValue=false)]
        public int? GameDuration { get; set; }

        /// <summary>
        /// Gets or Sets GameId
        /// </summary>
        [DataMember(Name="gameId", EmitDefaultValue=false)]
        public long? GameId { get; set; }

        /// <summary>
        /// Gets or Sets GameMode
        /// </summary>
        [DataMember(Name="gameMode", EmitDefaultValue=false)]
        public string GameMode { get; set; }

        /// <summary>
        /// Gets or Sets GameType
        /// </summary>
        [DataMember(Name="gameType", EmitDefaultValue=false)]
        public string GameType { get; set; }

        /// <summary>
        /// Gets or Sets GameVersion
        /// </summary>
        [DataMember(Name="gameVersion", EmitDefaultValue=false)]
        public string GameVersion { get; set; }

        /// <summary>
        /// Gets or Sets MapId
        /// </summary>
        [DataMember(Name="mapId", EmitDefaultValue=false)]
        public int? MapId { get; set; }

        /// <summary>
        /// Gets or Sets ParticipantIdentities
        /// </summary>
        [DataMember(Name="participantIdentities", EmitDefaultValue=false)]
        public List<LolMatchHistoryMatchHistoryParticipantIdentities> ParticipantIdentities { get; set; }

        /// <summary>
        /// Gets or Sets Participants
        /// </summary>
        [DataMember(Name="participants", EmitDefaultValue=false)]
        public List<LolMatchHistoryMatchHistoryParticipant> Participants { get; set; }

        /// <summary>
        /// Gets or Sets PlatformId
        /// </summary>
        [DataMember(Name="platformId", EmitDefaultValue=false)]
        public string PlatformId { get; set; }

        /// <summary>
        /// Gets or Sets QueueId
        /// </summary>
        [DataMember(Name="queueId", EmitDefaultValue=false)]
        public int? QueueId { get; set; }

        /// <summary>
        /// Gets or Sets SeasonId
        /// </summary>
        [DataMember(Name="seasonId", EmitDefaultValue=false)]
        public int? SeasonId { get; set; }

        /// <summary>
        /// Gets or Sets Teams
        /// </summary>
        [DataMember(Name="teams", EmitDefaultValue=false)]
        public List<LolMatchHistoryMatchHistoryTeam> Teams { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolMatchHistoryMatchHistoryGame {\n");
            sb.Append("  GameCreation: ").Append(GameCreation).Append("\n");
            sb.Append("  GameCreationDate: ").Append(GameCreationDate).Append("\n");
            sb.Append("  GameDuration: ").Append(GameDuration).Append("\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  GameMode: ").Append(GameMode).Append("\n");
            sb.Append("  GameType: ").Append(GameType).Append("\n");
            sb.Append("  GameVersion: ").Append(GameVersion).Append("\n");
            sb.Append("  MapId: ").Append(MapId).Append("\n");
            sb.Append("  ParticipantIdentities: ").Append(ParticipantIdentities).Append("\n");
            sb.Append("  Participants: ").Append(Participants).Append("\n");
            sb.Append("  PlatformId: ").Append(PlatformId).Append("\n");
            sb.Append("  QueueId: ").Append(QueueId).Append("\n");
            sb.Append("  SeasonId: ").Append(SeasonId).Append("\n");
            sb.Append("  Teams: ").Append(Teams).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolMatchHistoryMatchHistoryGame);
        }

        /// <summary>
        /// Returns true if LolMatchHistoryMatchHistoryGame instances are equal
        /// </summary>
        /// <param name="other">Instance of LolMatchHistoryMatchHistoryGame to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolMatchHistoryMatchHistoryGame other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.GameCreation == other.GameCreation ||
                    this.GameCreation != null &&
                    this.GameCreation.Equals(other.GameCreation)
                ) && 
                (
                    this.GameCreationDate == other.GameCreationDate ||
                    this.GameCreationDate != null &&
                    this.GameCreationDate.Equals(other.GameCreationDate)
                ) && 
                (
                    this.GameDuration == other.GameDuration ||
                    this.GameDuration != null &&
                    this.GameDuration.Equals(other.GameDuration)
                ) && 
                (
                    this.GameId == other.GameId ||
                    this.GameId != null &&
                    this.GameId.Equals(other.GameId)
                ) && 
                (
                    this.GameMode == other.GameMode ||
                    this.GameMode != null &&
                    this.GameMode.Equals(other.GameMode)
                ) && 
                (
                    this.GameType == other.GameType ||
                    this.GameType != null &&
                    this.GameType.Equals(other.GameType)
                ) && 
                (
                    this.GameVersion == other.GameVersion ||
                    this.GameVersion != null &&
                    this.GameVersion.Equals(other.GameVersion)
                ) && 
                (
                    this.MapId == other.MapId ||
                    this.MapId != null &&
                    this.MapId.Equals(other.MapId)
                ) && 
                (
                    this.ParticipantIdentities == other.ParticipantIdentities ||
                    this.ParticipantIdentities != null &&
                    this.ParticipantIdentities.SequenceEqual(other.ParticipantIdentities)
                ) && 
                (
                    this.Participants == other.Participants ||
                    this.Participants != null &&
                    this.Participants.SequenceEqual(other.Participants)
                ) && 
                (
                    this.PlatformId == other.PlatformId ||
                    this.PlatformId != null &&
                    this.PlatformId.Equals(other.PlatformId)
                ) && 
                (
                    this.QueueId == other.QueueId ||
                    this.QueueId != null &&
                    this.QueueId.Equals(other.QueueId)
                ) && 
                (
                    this.SeasonId == other.SeasonId ||
                    this.SeasonId != null &&
                    this.SeasonId.Equals(other.SeasonId)
                ) && 
                (
                    this.Teams == other.Teams ||
                    this.Teams != null &&
                    this.Teams.SequenceEqual(other.Teams)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.GameCreation != null)
                    hash = hash * 59 + this.GameCreation.GetHashCode();
                if (this.GameCreationDate != null)
                    hash = hash * 59 + this.GameCreationDate.GetHashCode();
                if (this.GameDuration != null)
                    hash = hash * 59 + this.GameDuration.GetHashCode();
                if (this.GameId != null)
                    hash = hash * 59 + this.GameId.GetHashCode();
                if (this.GameMode != null)
                    hash = hash * 59 + this.GameMode.GetHashCode();
                if (this.GameType != null)
                    hash = hash * 59 + this.GameType.GetHashCode();
                if (this.GameVersion != null)
                    hash = hash * 59 + this.GameVersion.GetHashCode();
                if (this.MapId != null)
                    hash = hash * 59 + this.MapId.GetHashCode();
                if (this.ParticipantIdentities != null)
                    hash = hash * 59 + this.ParticipantIdentities.GetHashCode();
                if (this.Participants != null)
                    hash = hash * 59 + this.Participants.GetHashCode();
                if (this.PlatformId != null)
                    hash = hash * 59 + this.PlatformId.GetHashCode();
                if (this.QueueId != null)
                    hash = hash * 59 + this.QueueId.GetHashCode();
                if (this.SeasonId != null)
                    hash = hash * 59 + this.SeasonId.GetHashCode();
                if (this.Teams != null)
                    hash = hash * 59 + this.Teams.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
