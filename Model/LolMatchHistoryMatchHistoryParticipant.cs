/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolMatchHistoryMatchHistoryParticipant
    /// </summary>
    [DataContract]
    public partial class LolMatchHistoryMatchHistoryParticipant :  IEquatable<LolMatchHistoryMatchHistoryParticipant>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolMatchHistoryMatchHistoryParticipant" /> class.
        /// </summary>
        /// <param name="ChampionId">ChampionId.</param>
        /// <param name="HighestAchievedSeasonTier">HighestAchievedSeasonTier.</param>
        /// <param name="ParticipantId">ParticipantId.</param>
        /// <param name="Spell1Id">Spell1Id.</param>
        /// <param name="Spell2Id">Spell2Id.</param>
        /// <param name="Stats">Stats.</param>
        /// <param name="TeamId">TeamId.</param>
        /// <param name="Timeline">Timeline.</param>
        public LolMatchHistoryMatchHistoryParticipant(int? ChampionId = default(int?), string HighestAchievedSeasonTier = default(string), int? ParticipantId = default(int?), int? Spell1Id = default(int?), int? Spell2Id = default(int?), LolMatchHistoryMatchHistoryParticipantStatistics Stats = default(LolMatchHistoryMatchHistoryParticipantStatistics), int? TeamId = default(int?), LolMatchHistoryMatchHistoryTimeline Timeline = default(LolMatchHistoryMatchHistoryTimeline))
        {
            this.ChampionId = ChampionId;
            this.HighestAchievedSeasonTier = HighestAchievedSeasonTier;
            this.ParticipantId = ParticipantId;
            this.Spell1Id = Spell1Id;
            this.Spell2Id = Spell2Id;
            this.Stats = Stats;
            this.TeamId = TeamId;
            this.Timeline = Timeline;
        }
        
        /// <summary>
        /// Gets or Sets ChampionId
        /// </summary>
        [DataMember(Name="championId", EmitDefaultValue=false)]
        public int? ChampionId { get; set; }

        /// <summary>
        /// Gets or Sets HighestAchievedSeasonTier
        /// </summary>
        [DataMember(Name="highestAchievedSeasonTier", EmitDefaultValue=false)]
        public string HighestAchievedSeasonTier { get; set; }

        /// <summary>
        /// Gets or Sets ParticipantId
        /// </summary>
        [DataMember(Name="participantId", EmitDefaultValue=false)]
        public int? ParticipantId { get; set; }

        /// <summary>
        /// Gets or Sets Spell1Id
        /// </summary>
        [DataMember(Name="spell1Id", EmitDefaultValue=false)]
        public int? Spell1Id { get; set; }

        /// <summary>
        /// Gets or Sets Spell2Id
        /// </summary>
        [DataMember(Name="spell2Id", EmitDefaultValue=false)]
        public int? Spell2Id { get; set; }

        /// <summary>
        /// Gets or Sets Stats
        /// </summary>
        [DataMember(Name="stats", EmitDefaultValue=false)]
        public LolMatchHistoryMatchHistoryParticipantStatistics Stats { get; set; }

        /// <summary>
        /// Gets or Sets TeamId
        /// </summary>
        [DataMember(Name="teamId", EmitDefaultValue=false)]
        public int? TeamId { get; set; }

        /// <summary>
        /// Gets or Sets Timeline
        /// </summary>
        [DataMember(Name="timeline", EmitDefaultValue=false)]
        public LolMatchHistoryMatchHistoryTimeline Timeline { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolMatchHistoryMatchHistoryParticipant {\n");
            sb.Append("  ChampionId: ").Append(ChampionId).Append("\n");
            sb.Append("  HighestAchievedSeasonTier: ").Append(HighestAchievedSeasonTier).Append("\n");
            sb.Append("  ParticipantId: ").Append(ParticipantId).Append("\n");
            sb.Append("  Spell1Id: ").Append(Spell1Id).Append("\n");
            sb.Append("  Spell2Id: ").Append(Spell2Id).Append("\n");
            sb.Append("  Stats: ").Append(Stats).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  Timeline: ").Append(Timeline).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolMatchHistoryMatchHistoryParticipant);
        }

        /// <summary>
        /// Returns true if LolMatchHistoryMatchHistoryParticipant instances are equal
        /// </summary>
        /// <param name="other">Instance of LolMatchHistoryMatchHistoryParticipant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolMatchHistoryMatchHistoryParticipant other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ChampionId == other.ChampionId ||
                    this.ChampionId != null &&
                    this.ChampionId.Equals(other.ChampionId)
                ) && 
                (
                    this.HighestAchievedSeasonTier == other.HighestAchievedSeasonTier ||
                    this.HighestAchievedSeasonTier != null &&
                    this.HighestAchievedSeasonTier.Equals(other.HighestAchievedSeasonTier)
                ) && 
                (
                    this.ParticipantId == other.ParticipantId ||
                    this.ParticipantId != null &&
                    this.ParticipantId.Equals(other.ParticipantId)
                ) && 
                (
                    this.Spell1Id == other.Spell1Id ||
                    this.Spell1Id != null &&
                    this.Spell1Id.Equals(other.Spell1Id)
                ) && 
                (
                    this.Spell2Id == other.Spell2Id ||
                    this.Spell2Id != null &&
                    this.Spell2Id.Equals(other.Spell2Id)
                ) && 
                (
                    this.Stats == other.Stats ||
                    this.Stats != null &&
                    this.Stats.Equals(other.Stats)
                ) && 
                (
                    this.TeamId == other.TeamId ||
                    this.TeamId != null &&
                    this.TeamId.Equals(other.TeamId)
                ) && 
                (
                    this.Timeline == other.Timeline ||
                    this.Timeline != null &&
                    this.Timeline.Equals(other.Timeline)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ChampionId != null)
                    hash = hash * 59 + this.ChampionId.GetHashCode();
                if (this.HighestAchievedSeasonTier != null)
                    hash = hash * 59 + this.HighestAchievedSeasonTier.GetHashCode();
                if (this.ParticipantId != null)
                    hash = hash * 59 + this.ParticipantId.GetHashCode();
                if (this.Spell1Id != null)
                    hash = hash * 59 + this.Spell1Id.GetHashCode();
                if (this.Spell2Id != null)
                    hash = hash * 59 + this.Spell2Id.GetHashCode();
                if (this.Stats != null)
                    hash = hash * 59 + this.Stats.GetHashCode();
                if (this.TeamId != null)
                    hash = hash * 59 + this.TeamId.GetHashCode();
                if (this.Timeline != null)
                    hash = hash * 59 + this.Timeline.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
