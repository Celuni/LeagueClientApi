/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolMatchHistoryMatchHistoryParticipantFrame
    /// </summary>
    [DataContract]
    public partial class LolMatchHistoryMatchHistoryParticipantFrame :  IEquatable<LolMatchHistoryMatchHistoryParticipantFrame>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolMatchHistoryMatchHistoryParticipantFrame" /> class.
        /// </summary>
        /// <param name="CurrentGold">CurrentGold.</param>
        /// <param name="DominionScore">DominionScore.</param>
        /// <param name="JungleMinionsKilled">JungleMinionsKilled.</param>
        /// <param name="Level">Level.</param>
        /// <param name="MinionsKilled">MinionsKilled.</param>
        /// <param name="ParticipantId">ParticipantId.</param>
        /// <param name="Position">Position.</param>
        /// <param name="TeamScore">TeamScore.</param>
        /// <param name="TotalGold">TotalGold.</param>
        /// <param name="Xp">Xp.</param>
        public LolMatchHistoryMatchHistoryParticipantFrame(int? CurrentGold = default(int?), int? DominionScore = default(int?), int? JungleMinionsKilled = default(int?), int? Level = default(int?), int? MinionsKilled = default(int?), int? ParticipantId = default(int?), LolMatchHistoryMatchHistoryPosition Position = default(LolMatchHistoryMatchHistoryPosition), int? TeamScore = default(int?), int? TotalGold = default(int?), int? Xp = default(int?))
        {
            this.CurrentGold = CurrentGold;
            this.DominionScore = DominionScore;
            this.JungleMinionsKilled = JungleMinionsKilled;
            this.Level = Level;
            this.MinionsKilled = MinionsKilled;
            this.ParticipantId = ParticipantId;
            this.Position = Position;
            this.TeamScore = TeamScore;
            this.TotalGold = TotalGold;
            this.Xp = Xp;
        }
        
        /// <summary>
        /// Gets or Sets CurrentGold
        /// </summary>
        [DataMember(Name="currentGold", EmitDefaultValue=false)]
        public int? CurrentGold { get; set; }

        /// <summary>
        /// Gets or Sets DominionScore
        /// </summary>
        [DataMember(Name="dominionScore", EmitDefaultValue=false)]
        public int? DominionScore { get; set; }

        /// <summary>
        /// Gets or Sets JungleMinionsKilled
        /// </summary>
        [DataMember(Name="jungleMinionsKilled", EmitDefaultValue=false)]
        public int? JungleMinionsKilled { get; set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name="level", EmitDefaultValue=false)]
        public int? Level { get; set; }

        /// <summary>
        /// Gets or Sets MinionsKilled
        /// </summary>
        [DataMember(Name="minionsKilled", EmitDefaultValue=false)]
        public int? MinionsKilled { get; set; }

        /// <summary>
        /// Gets or Sets ParticipantId
        /// </summary>
        [DataMember(Name="participantId", EmitDefaultValue=false)]
        public int? ParticipantId { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public LolMatchHistoryMatchHistoryPosition Position { get; set; }

        /// <summary>
        /// Gets or Sets TeamScore
        /// </summary>
        [DataMember(Name="teamScore", EmitDefaultValue=false)]
        public int? TeamScore { get; set; }

        /// <summary>
        /// Gets or Sets TotalGold
        /// </summary>
        [DataMember(Name="totalGold", EmitDefaultValue=false)]
        public int? TotalGold { get; set; }

        /// <summary>
        /// Gets or Sets Xp
        /// </summary>
        [DataMember(Name="xp", EmitDefaultValue=false)]
        public int? Xp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolMatchHistoryMatchHistoryParticipantFrame {\n");
            sb.Append("  CurrentGold: ").Append(CurrentGold).Append("\n");
            sb.Append("  DominionScore: ").Append(DominionScore).Append("\n");
            sb.Append("  JungleMinionsKilled: ").Append(JungleMinionsKilled).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  MinionsKilled: ").Append(MinionsKilled).Append("\n");
            sb.Append("  ParticipantId: ").Append(ParticipantId).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  TeamScore: ").Append(TeamScore).Append("\n");
            sb.Append("  TotalGold: ").Append(TotalGold).Append("\n");
            sb.Append("  Xp: ").Append(Xp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolMatchHistoryMatchHistoryParticipantFrame);
        }

        /// <summary>
        /// Returns true if LolMatchHistoryMatchHistoryParticipantFrame instances are equal
        /// </summary>
        /// <param name="other">Instance of LolMatchHistoryMatchHistoryParticipantFrame to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolMatchHistoryMatchHistoryParticipantFrame other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CurrentGold == other.CurrentGold ||
                    this.CurrentGold != null &&
                    this.CurrentGold.Equals(other.CurrentGold)
                ) && 
                (
                    this.DominionScore == other.DominionScore ||
                    this.DominionScore != null &&
                    this.DominionScore.Equals(other.DominionScore)
                ) && 
                (
                    this.JungleMinionsKilled == other.JungleMinionsKilled ||
                    this.JungleMinionsKilled != null &&
                    this.JungleMinionsKilled.Equals(other.JungleMinionsKilled)
                ) && 
                (
                    this.Level == other.Level ||
                    this.Level != null &&
                    this.Level.Equals(other.Level)
                ) && 
                (
                    this.MinionsKilled == other.MinionsKilled ||
                    this.MinionsKilled != null &&
                    this.MinionsKilled.Equals(other.MinionsKilled)
                ) && 
                (
                    this.ParticipantId == other.ParticipantId ||
                    this.ParticipantId != null &&
                    this.ParticipantId.Equals(other.ParticipantId)
                ) && 
                (
                    this.Position == other.Position ||
                    this.Position != null &&
                    this.Position.Equals(other.Position)
                ) && 
                (
                    this.TeamScore == other.TeamScore ||
                    this.TeamScore != null &&
                    this.TeamScore.Equals(other.TeamScore)
                ) && 
                (
                    this.TotalGold == other.TotalGold ||
                    this.TotalGold != null &&
                    this.TotalGold.Equals(other.TotalGold)
                ) && 
                (
                    this.Xp == other.Xp ||
                    this.Xp != null &&
                    this.Xp.Equals(other.Xp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CurrentGold != null)
                    hash = hash * 59 + this.CurrentGold.GetHashCode();
                if (this.DominionScore != null)
                    hash = hash * 59 + this.DominionScore.GetHashCode();
                if (this.JungleMinionsKilled != null)
                    hash = hash * 59 + this.JungleMinionsKilled.GetHashCode();
                if (this.Level != null)
                    hash = hash * 59 + this.Level.GetHashCode();
                if (this.MinionsKilled != null)
                    hash = hash * 59 + this.MinionsKilled.GetHashCode();
                if (this.ParticipantId != null)
                    hash = hash * 59 + this.ParticipantId.GetHashCode();
                if (this.Position != null)
                    hash = hash * 59 + this.Position.GetHashCode();
                if (this.TeamScore != null)
                    hash = hash * 59 + this.TeamScore.GetHashCode();
                if (this.TotalGold != null)
                    hash = hash * 59 + this.TotalGold.GetHashCode();
                if (this.Xp != null)
                    hash = hash * 59 + this.Xp.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
