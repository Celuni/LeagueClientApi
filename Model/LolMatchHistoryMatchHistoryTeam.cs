/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolMatchHistoryMatchHistoryTeam
    /// </summary>
    [DataContract]
    public partial class LolMatchHistoryMatchHistoryTeam :  IEquatable<LolMatchHistoryMatchHistoryTeam>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolMatchHistoryMatchHistoryTeam" /> class.
        /// </summary>
        /// <param name="Bans">Bans.</param>
        /// <param name="BaronKills">BaronKills.</param>
        /// <param name="DominionVictoryScore">DominionVictoryScore.</param>
        /// <param name="DragonKills">DragonKills.</param>
        /// <param name="FirstBaron">FirstBaron.</param>
        /// <param name="FirstBlood">FirstBlood.</param>
        /// <param name="FirstDargon">FirstDargon.</param>
        /// <param name="FirstInhibitor">FirstInhibitor.</param>
        /// <param name="FirstTower">FirstTower.</param>
        /// <param name="InhibitorKills">InhibitorKills.</param>
        /// <param name="TeamId">TeamId.</param>
        /// <param name="TowerKills">TowerKills.</param>
        /// <param name="VilemawKills">VilemawKills.</param>
        /// <param name="Win">Win.</param>
        public LolMatchHistoryMatchHistoryTeam(List<LolMatchHistoryMatchHistoryTeamBan> Bans = default(List<LolMatchHistoryMatchHistoryTeamBan>), int? BaronKills = default(int?), int? DominionVictoryScore = default(int?), int? DragonKills = default(int?), bool? FirstBaron = default(bool?), bool? FirstBlood = default(bool?), bool? FirstDargon = default(bool?), bool? FirstInhibitor = default(bool?), bool? FirstTower = default(bool?), int? InhibitorKills = default(int?), int? TeamId = default(int?), int? TowerKills = default(int?), int? VilemawKills = default(int?), string Win = default(string))
        {
            this.Bans = Bans;
            this.BaronKills = BaronKills;
            this.DominionVictoryScore = DominionVictoryScore;
            this.DragonKills = DragonKills;
            this.FirstBaron = FirstBaron;
            this.FirstBlood = FirstBlood;
            this.FirstDargon = FirstDargon;
            this.FirstInhibitor = FirstInhibitor;
            this.FirstTower = FirstTower;
            this.InhibitorKills = InhibitorKills;
            this.TeamId = TeamId;
            this.TowerKills = TowerKills;
            this.VilemawKills = VilemawKills;
            this.Win = Win;
        }
        
        /// <summary>
        /// Gets or Sets Bans
        /// </summary>
        [DataMember(Name="bans", EmitDefaultValue=false)]
        public List<LolMatchHistoryMatchHistoryTeamBan> Bans { get; set; }

        /// <summary>
        /// Gets or Sets BaronKills
        /// </summary>
        [DataMember(Name="baronKills", EmitDefaultValue=false)]
        public int? BaronKills { get; set; }

        /// <summary>
        /// Gets or Sets DominionVictoryScore
        /// </summary>
        [DataMember(Name="dominionVictoryScore", EmitDefaultValue=false)]
        public int? DominionVictoryScore { get; set; }

        /// <summary>
        /// Gets or Sets DragonKills
        /// </summary>
        [DataMember(Name="dragonKills", EmitDefaultValue=false)]
        public int? DragonKills { get; set; }

        /// <summary>
        /// Gets or Sets FirstBaron
        /// </summary>
        [DataMember(Name="firstBaron", EmitDefaultValue=false)]
        public bool? FirstBaron { get; set; }

        /// <summary>
        /// Gets or Sets FirstBlood
        /// </summary>
        [DataMember(Name="firstBlood", EmitDefaultValue=false)]
        public bool? FirstBlood { get; set; }

        /// <summary>
        /// Gets or Sets FirstDargon
        /// </summary>
        [DataMember(Name="firstDargon", EmitDefaultValue=false)]
        public bool? FirstDargon { get; set; }

        /// <summary>
        /// Gets or Sets FirstInhibitor
        /// </summary>
        [DataMember(Name="firstInhibitor", EmitDefaultValue=false)]
        public bool? FirstInhibitor { get; set; }

        /// <summary>
        /// Gets or Sets FirstTower
        /// </summary>
        [DataMember(Name="firstTower", EmitDefaultValue=false)]
        public bool? FirstTower { get; set; }

        /// <summary>
        /// Gets or Sets InhibitorKills
        /// </summary>
        [DataMember(Name="inhibitorKills", EmitDefaultValue=false)]
        public int? InhibitorKills { get; set; }

        /// <summary>
        /// Gets or Sets TeamId
        /// </summary>
        [DataMember(Name="teamId", EmitDefaultValue=false)]
        public int? TeamId { get; set; }

        /// <summary>
        /// Gets or Sets TowerKills
        /// </summary>
        [DataMember(Name="towerKills", EmitDefaultValue=false)]
        public int? TowerKills { get; set; }

        /// <summary>
        /// Gets or Sets VilemawKills
        /// </summary>
        [DataMember(Name="vilemawKills", EmitDefaultValue=false)]
        public int? VilemawKills { get; set; }

        /// <summary>
        /// Gets or Sets Win
        /// </summary>
        [DataMember(Name="win", EmitDefaultValue=false)]
        public string Win { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolMatchHistoryMatchHistoryTeam {\n");
            sb.Append("  Bans: ").Append(Bans).Append("\n");
            sb.Append("  BaronKills: ").Append(BaronKills).Append("\n");
            sb.Append("  DominionVictoryScore: ").Append(DominionVictoryScore).Append("\n");
            sb.Append("  DragonKills: ").Append(DragonKills).Append("\n");
            sb.Append("  FirstBaron: ").Append(FirstBaron).Append("\n");
            sb.Append("  FirstBlood: ").Append(FirstBlood).Append("\n");
            sb.Append("  FirstDargon: ").Append(FirstDargon).Append("\n");
            sb.Append("  FirstInhibitor: ").Append(FirstInhibitor).Append("\n");
            sb.Append("  FirstTower: ").Append(FirstTower).Append("\n");
            sb.Append("  InhibitorKills: ").Append(InhibitorKills).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  TowerKills: ").Append(TowerKills).Append("\n");
            sb.Append("  VilemawKills: ").Append(VilemawKills).Append("\n");
            sb.Append("  Win: ").Append(Win).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolMatchHistoryMatchHistoryTeam);
        }

        /// <summary>
        /// Returns true if LolMatchHistoryMatchHistoryTeam instances are equal
        /// </summary>
        /// <param name="other">Instance of LolMatchHistoryMatchHistoryTeam to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolMatchHistoryMatchHistoryTeam other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Bans == other.Bans ||
                    this.Bans != null &&
                    this.Bans.SequenceEqual(other.Bans)
                ) && 
                (
                    this.BaronKills == other.BaronKills ||
                    this.BaronKills != null &&
                    this.BaronKills.Equals(other.BaronKills)
                ) && 
                (
                    this.DominionVictoryScore == other.DominionVictoryScore ||
                    this.DominionVictoryScore != null &&
                    this.DominionVictoryScore.Equals(other.DominionVictoryScore)
                ) && 
                (
                    this.DragonKills == other.DragonKills ||
                    this.DragonKills != null &&
                    this.DragonKills.Equals(other.DragonKills)
                ) && 
                (
                    this.FirstBaron == other.FirstBaron ||
                    this.FirstBaron != null &&
                    this.FirstBaron.Equals(other.FirstBaron)
                ) && 
                (
                    this.FirstBlood == other.FirstBlood ||
                    this.FirstBlood != null &&
                    this.FirstBlood.Equals(other.FirstBlood)
                ) && 
                (
                    this.FirstDargon == other.FirstDargon ||
                    this.FirstDargon != null &&
                    this.FirstDargon.Equals(other.FirstDargon)
                ) && 
                (
                    this.FirstInhibitor == other.FirstInhibitor ||
                    this.FirstInhibitor != null &&
                    this.FirstInhibitor.Equals(other.FirstInhibitor)
                ) && 
                (
                    this.FirstTower == other.FirstTower ||
                    this.FirstTower != null &&
                    this.FirstTower.Equals(other.FirstTower)
                ) && 
                (
                    this.InhibitorKills == other.InhibitorKills ||
                    this.InhibitorKills != null &&
                    this.InhibitorKills.Equals(other.InhibitorKills)
                ) && 
                (
                    this.TeamId == other.TeamId ||
                    this.TeamId != null &&
                    this.TeamId.Equals(other.TeamId)
                ) && 
                (
                    this.TowerKills == other.TowerKills ||
                    this.TowerKills != null &&
                    this.TowerKills.Equals(other.TowerKills)
                ) && 
                (
                    this.VilemawKills == other.VilemawKills ||
                    this.VilemawKills != null &&
                    this.VilemawKills.Equals(other.VilemawKills)
                ) && 
                (
                    this.Win == other.Win ||
                    this.Win != null &&
                    this.Win.Equals(other.Win)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Bans != null)
                    hash = hash * 59 + this.Bans.GetHashCode();
                if (this.BaronKills != null)
                    hash = hash * 59 + this.BaronKills.GetHashCode();
                if (this.DominionVictoryScore != null)
                    hash = hash * 59 + this.DominionVictoryScore.GetHashCode();
                if (this.DragonKills != null)
                    hash = hash * 59 + this.DragonKills.GetHashCode();
                if (this.FirstBaron != null)
                    hash = hash * 59 + this.FirstBaron.GetHashCode();
                if (this.FirstBlood != null)
                    hash = hash * 59 + this.FirstBlood.GetHashCode();
                if (this.FirstDargon != null)
                    hash = hash * 59 + this.FirstDargon.GetHashCode();
                if (this.FirstInhibitor != null)
                    hash = hash * 59 + this.FirstInhibitor.GetHashCode();
                if (this.FirstTower != null)
                    hash = hash * 59 + this.FirstTower.GetHashCode();
                if (this.InhibitorKills != null)
                    hash = hash * 59 + this.InhibitorKills.GetHashCode();
                if (this.TeamId != null)
                    hash = hash * 59 + this.TeamId.GetHashCode();
                if (this.TowerKills != null)
                    hash = hash * 59 + this.TowerKills.GetHashCode();
                if (this.VilemawKills != null)
                    hash = hash * 59 + this.VilemawKills.GetHashCode();
                if (this.Win != null)
                    hash = hash * 59 + this.Win.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
