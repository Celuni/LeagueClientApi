/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolMatchHistoryMatchHistoryTimeline
    /// </summary>
    [DataContract]
    public partial class LolMatchHistoryMatchHistoryTimeline :  IEquatable<LolMatchHistoryMatchHistoryTimeline>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolMatchHistoryMatchHistoryTimeline" /> class.
        /// </summary>
        /// <param name="CreepsPerMinDeltas">CreepsPerMinDeltas.</param>
        /// <param name="CsDiffPerMinDeltas">CsDiffPerMinDeltas.</param>
        /// <param name="DamageTakenDiffPerMinDeltas">DamageTakenDiffPerMinDeltas.</param>
        /// <param name="DamageTakenPerMinDeltas">DamageTakenPerMinDeltas.</param>
        /// <param name="GoldPerMinDeltas">GoldPerMinDeltas.</param>
        /// <param name="Lane">Lane.</param>
        /// <param name="ParticipantId">ParticipantId.</param>
        /// <param name="Role">Role.</param>
        /// <param name="XpDiffPerMinDeltas">XpDiffPerMinDeltas.</param>
        /// <param name="XpPerMinDeltas">XpPerMinDeltas.</param>
        public LolMatchHistoryMatchHistoryTimeline(Dictionary<string, double?> CreepsPerMinDeltas = default(Dictionary<string, double?>), Dictionary<string, double?> CsDiffPerMinDeltas = default(Dictionary<string, double?>), Dictionary<string, double?> DamageTakenDiffPerMinDeltas = default(Dictionary<string, double?>), Dictionary<string, double?> DamageTakenPerMinDeltas = default(Dictionary<string, double?>), Dictionary<string, double?> GoldPerMinDeltas = default(Dictionary<string, double?>), string Lane = default(string), int? ParticipantId = default(int?), string Role = default(string), Dictionary<string, double?> XpDiffPerMinDeltas = default(Dictionary<string, double?>), Dictionary<string, double?> XpPerMinDeltas = default(Dictionary<string, double?>))
        {
            this.CreepsPerMinDeltas = CreepsPerMinDeltas;
            this.CsDiffPerMinDeltas = CsDiffPerMinDeltas;
            this.DamageTakenDiffPerMinDeltas = DamageTakenDiffPerMinDeltas;
            this.DamageTakenPerMinDeltas = DamageTakenPerMinDeltas;
            this.GoldPerMinDeltas = GoldPerMinDeltas;
            this.Lane = Lane;
            this.ParticipantId = ParticipantId;
            this.Role = Role;
            this.XpDiffPerMinDeltas = XpDiffPerMinDeltas;
            this.XpPerMinDeltas = XpPerMinDeltas;
        }
        
        /// <summary>
        /// Gets or Sets CreepsPerMinDeltas
        /// </summary>
        [DataMember(Name="creepsPerMinDeltas", EmitDefaultValue=false)]
        public Dictionary<string, double?> CreepsPerMinDeltas { get; set; }

        /// <summary>
        /// Gets or Sets CsDiffPerMinDeltas
        /// </summary>
        [DataMember(Name="csDiffPerMinDeltas", EmitDefaultValue=false)]
        public Dictionary<string, double?> CsDiffPerMinDeltas { get; set; }

        /// <summary>
        /// Gets or Sets DamageTakenDiffPerMinDeltas
        /// </summary>
        [DataMember(Name="damageTakenDiffPerMinDeltas", EmitDefaultValue=false)]
        public Dictionary<string, double?> DamageTakenDiffPerMinDeltas { get; set; }

        /// <summary>
        /// Gets or Sets DamageTakenPerMinDeltas
        /// </summary>
        [DataMember(Name="damageTakenPerMinDeltas", EmitDefaultValue=false)]
        public Dictionary<string, double?> DamageTakenPerMinDeltas { get; set; }

        /// <summary>
        /// Gets or Sets GoldPerMinDeltas
        /// </summary>
        [DataMember(Name="goldPerMinDeltas", EmitDefaultValue=false)]
        public Dictionary<string, double?> GoldPerMinDeltas { get; set; }

        /// <summary>
        /// Gets or Sets Lane
        /// </summary>
        [DataMember(Name="lane", EmitDefaultValue=false)]
        public string Lane { get; set; }

        /// <summary>
        /// Gets or Sets ParticipantId
        /// </summary>
        [DataMember(Name="participantId", EmitDefaultValue=false)]
        public int? ParticipantId { get; set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public string Role { get; set; }

        /// <summary>
        /// Gets or Sets XpDiffPerMinDeltas
        /// </summary>
        [DataMember(Name="xpDiffPerMinDeltas", EmitDefaultValue=false)]
        public Dictionary<string, double?> XpDiffPerMinDeltas { get; set; }

        /// <summary>
        /// Gets or Sets XpPerMinDeltas
        /// </summary>
        [DataMember(Name="xpPerMinDeltas", EmitDefaultValue=false)]
        public Dictionary<string, double?> XpPerMinDeltas { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolMatchHistoryMatchHistoryTimeline {\n");
            sb.Append("  CreepsPerMinDeltas: ").Append(CreepsPerMinDeltas).Append("\n");
            sb.Append("  CsDiffPerMinDeltas: ").Append(CsDiffPerMinDeltas).Append("\n");
            sb.Append("  DamageTakenDiffPerMinDeltas: ").Append(DamageTakenDiffPerMinDeltas).Append("\n");
            sb.Append("  DamageTakenPerMinDeltas: ").Append(DamageTakenPerMinDeltas).Append("\n");
            sb.Append("  GoldPerMinDeltas: ").Append(GoldPerMinDeltas).Append("\n");
            sb.Append("  Lane: ").Append(Lane).Append("\n");
            sb.Append("  ParticipantId: ").Append(ParticipantId).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  XpDiffPerMinDeltas: ").Append(XpDiffPerMinDeltas).Append("\n");
            sb.Append("  XpPerMinDeltas: ").Append(XpPerMinDeltas).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolMatchHistoryMatchHistoryTimeline);
        }

        /// <summary>
        /// Returns true if LolMatchHistoryMatchHistoryTimeline instances are equal
        /// </summary>
        /// <param name="other">Instance of LolMatchHistoryMatchHistoryTimeline to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolMatchHistoryMatchHistoryTimeline other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CreepsPerMinDeltas == other.CreepsPerMinDeltas ||
                    this.CreepsPerMinDeltas != null &&
                    this.CreepsPerMinDeltas.SequenceEqual(other.CreepsPerMinDeltas)
                ) && 
                (
                    this.CsDiffPerMinDeltas == other.CsDiffPerMinDeltas ||
                    this.CsDiffPerMinDeltas != null &&
                    this.CsDiffPerMinDeltas.SequenceEqual(other.CsDiffPerMinDeltas)
                ) && 
                (
                    this.DamageTakenDiffPerMinDeltas == other.DamageTakenDiffPerMinDeltas ||
                    this.DamageTakenDiffPerMinDeltas != null &&
                    this.DamageTakenDiffPerMinDeltas.SequenceEqual(other.DamageTakenDiffPerMinDeltas)
                ) && 
                (
                    this.DamageTakenPerMinDeltas == other.DamageTakenPerMinDeltas ||
                    this.DamageTakenPerMinDeltas != null &&
                    this.DamageTakenPerMinDeltas.SequenceEqual(other.DamageTakenPerMinDeltas)
                ) && 
                (
                    this.GoldPerMinDeltas == other.GoldPerMinDeltas ||
                    this.GoldPerMinDeltas != null &&
                    this.GoldPerMinDeltas.SequenceEqual(other.GoldPerMinDeltas)
                ) && 
                (
                    this.Lane == other.Lane ||
                    this.Lane != null &&
                    this.Lane.Equals(other.Lane)
                ) && 
                (
                    this.ParticipantId == other.ParticipantId ||
                    this.ParticipantId != null &&
                    this.ParticipantId.Equals(other.ParticipantId)
                ) && 
                (
                    this.Role == other.Role ||
                    this.Role != null &&
                    this.Role.Equals(other.Role)
                ) && 
                (
                    this.XpDiffPerMinDeltas == other.XpDiffPerMinDeltas ||
                    this.XpDiffPerMinDeltas != null &&
                    this.XpDiffPerMinDeltas.SequenceEqual(other.XpDiffPerMinDeltas)
                ) && 
                (
                    this.XpPerMinDeltas == other.XpPerMinDeltas ||
                    this.XpPerMinDeltas != null &&
                    this.XpPerMinDeltas.SequenceEqual(other.XpPerMinDeltas)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CreepsPerMinDeltas != null)
                    hash = hash * 59 + this.CreepsPerMinDeltas.GetHashCode();
                if (this.CsDiffPerMinDeltas != null)
                    hash = hash * 59 + this.CsDiffPerMinDeltas.GetHashCode();
                if (this.DamageTakenDiffPerMinDeltas != null)
                    hash = hash * 59 + this.DamageTakenDiffPerMinDeltas.GetHashCode();
                if (this.DamageTakenPerMinDeltas != null)
                    hash = hash * 59 + this.DamageTakenPerMinDeltas.GetHashCode();
                if (this.GoldPerMinDeltas != null)
                    hash = hash * 59 + this.GoldPerMinDeltas.GetHashCode();
                if (this.Lane != null)
                    hash = hash * 59 + this.Lane.GetHashCode();
                if (this.ParticipantId != null)
                    hash = hash * 59 + this.ParticipantId.GetHashCode();
                if (this.Role != null)
                    hash = hash * 59 + this.Role.GetHashCode();
                if (this.XpDiffPerMinDeltas != null)
                    hash = hash * 59 + this.XpDiffPerMinDeltas.GetHashCode();
                if (this.XpPerMinDeltas != null)
                    hash = hash * 59 + this.XpPerMinDeltas.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
