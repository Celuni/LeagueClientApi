/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolMatchmakingMatchmakingReadyCheckResource
    /// </summary>
    [DataContract]
    public partial class LolMatchmakingMatchmakingReadyCheckResource :  IEquatable<LolMatchmakingMatchmakingReadyCheckResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolMatchmakingMatchmakingReadyCheckResource" /> class.
        /// </summary>
        /// <param name="DeclinerIds">DeclinerIds.</param>
        /// <param name="DodgeWarning">DodgeWarning.</param>
        /// <param name="PlayerResponse">PlayerResponse.</param>
        /// <param name="State">State.</param>
        /// <param name="SuppressUx">SuppressUx.</param>
        /// <param name="Timer">Timer.</param>
        public LolMatchmakingMatchmakingReadyCheckResource(List<long?> DeclinerIds = default(List<long?>), LolMatchmakingMatchmakingDodgeWarning DodgeWarning = default(LolMatchmakingMatchmakingDodgeWarning), LolMatchmakingMatchmakingReadyCheckResponse PlayerResponse = default(LolMatchmakingMatchmakingReadyCheckResponse), LolMatchmakingMatchmakingReadyCheckState State = default(LolMatchmakingMatchmakingReadyCheckState), bool? SuppressUx = default(bool?), float? Timer = default(float?))
        {
            this.DeclinerIds = DeclinerIds;
            this.DodgeWarning = DodgeWarning;
            this.PlayerResponse = PlayerResponse;
            this.State = State;
            this.SuppressUx = SuppressUx;
            this.Timer = Timer;
        }
        
        /// <summary>
        /// Gets or Sets DeclinerIds
        /// </summary>
        [DataMember(Name="declinerIds", EmitDefaultValue=false)]
        public List<long?> DeclinerIds { get; set; }

        /// <summary>
        /// Gets or Sets DodgeWarning
        /// </summary>
        [DataMember(Name="dodgeWarning", EmitDefaultValue=false)]
        public LolMatchmakingMatchmakingDodgeWarning DodgeWarning { get; set; }

        /// <summary>
        /// Gets or Sets PlayerResponse
        /// </summary>
        [DataMember(Name="playerResponse", EmitDefaultValue=false)]
        public LolMatchmakingMatchmakingReadyCheckResponse PlayerResponse { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public LolMatchmakingMatchmakingReadyCheckState State { get; set; }

        /// <summary>
        /// Gets or Sets SuppressUx
        /// </summary>
        [DataMember(Name="suppressUx", EmitDefaultValue=false)]
        public bool? SuppressUx { get; set; }

        /// <summary>
        /// Gets or Sets Timer
        /// </summary>
        [DataMember(Name="timer", EmitDefaultValue=false)]
        public float? Timer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolMatchmakingMatchmakingReadyCheckResource {\n");
            sb.Append("  DeclinerIds: ").Append(DeclinerIds).Append("\n");
            sb.Append("  DodgeWarning: ").Append(DodgeWarning).Append("\n");
            sb.Append("  PlayerResponse: ").Append(PlayerResponse).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  SuppressUx: ").Append(SuppressUx).Append("\n");
            sb.Append("  Timer: ").Append(Timer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolMatchmakingMatchmakingReadyCheckResource);
        }

        /// <summary>
        /// Returns true if LolMatchmakingMatchmakingReadyCheckResource instances are equal
        /// </summary>
        /// <param name="other">Instance of LolMatchmakingMatchmakingReadyCheckResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolMatchmakingMatchmakingReadyCheckResource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DeclinerIds == other.DeclinerIds ||
                    this.DeclinerIds != null &&
                    this.DeclinerIds.SequenceEqual(other.DeclinerIds)
                ) && 
                (
                    this.DodgeWarning == other.DodgeWarning ||
                    this.DodgeWarning != null &&
                    this.DodgeWarning.Equals(other.DodgeWarning)
                ) && 
                (
                    this.PlayerResponse == other.PlayerResponse ||
                    this.PlayerResponse != null &&
                    this.PlayerResponse.Equals(other.PlayerResponse)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.SuppressUx == other.SuppressUx ||
                    this.SuppressUx != null &&
                    this.SuppressUx.Equals(other.SuppressUx)
                ) && 
                (
                    this.Timer == other.Timer ||
                    this.Timer != null &&
                    this.Timer.Equals(other.Timer)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DeclinerIds != null)
                    hash = hash * 59 + this.DeclinerIds.GetHashCode();
                if (this.DodgeWarning != null)
                    hash = hash * 59 + this.DodgeWarning.GetHashCode();
                if (this.PlayerResponse != null)
                    hash = hash * 59 + this.PlayerResponse.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.SuppressUx != null)
                    hash = hash * 59 + this.SuppressUx.GetHashCode();
                if (this.Timer != null)
                    hash = hash * 59 + this.Timer.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
