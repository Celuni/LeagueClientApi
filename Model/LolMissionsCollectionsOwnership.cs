/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolMissionsCollectionsOwnership
    /// </summary>
    [DataContract]
    public partial class LolMissionsCollectionsOwnership :  IEquatable<LolMissionsCollectionsOwnership>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolMissionsCollectionsOwnership" /> class.
        /// </summary>
        /// <param name="FreeToPlayReward">FreeToPlayReward.</param>
        /// <param name="Owned">Owned.</param>
        /// <param name="Rental">Rental.</param>
        public LolMissionsCollectionsOwnership(bool? FreeToPlayReward = default(bool?), bool? Owned = default(bool?), LolMissionsCollectionsRental Rental = default(LolMissionsCollectionsRental))
        {
            this.FreeToPlayReward = FreeToPlayReward;
            this.Owned = Owned;
            this.Rental = Rental;
        }
        
        /// <summary>
        /// Gets or Sets FreeToPlayReward
        /// </summary>
        [DataMember(Name="freeToPlayReward", EmitDefaultValue=false)]
        public bool? FreeToPlayReward { get; set; }

        /// <summary>
        /// Gets or Sets Owned
        /// </summary>
        [DataMember(Name="owned", EmitDefaultValue=false)]
        public bool? Owned { get; set; }

        /// <summary>
        /// Gets or Sets Rental
        /// </summary>
        [DataMember(Name="rental", EmitDefaultValue=false)]
        public LolMissionsCollectionsRental Rental { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolMissionsCollectionsOwnership {\n");
            sb.Append("  FreeToPlayReward: ").Append(FreeToPlayReward).Append("\n");
            sb.Append("  Owned: ").Append(Owned).Append("\n");
            sb.Append("  Rental: ").Append(Rental).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolMissionsCollectionsOwnership);
        }

        /// <summary>
        /// Returns true if LolMissionsCollectionsOwnership instances are equal
        /// </summary>
        /// <param name="other">Instance of LolMissionsCollectionsOwnership to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolMissionsCollectionsOwnership other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FreeToPlayReward == other.FreeToPlayReward ||
                    this.FreeToPlayReward != null &&
                    this.FreeToPlayReward.Equals(other.FreeToPlayReward)
                ) && 
                (
                    this.Owned == other.Owned ||
                    this.Owned != null &&
                    this.Owned.Equals(other.Owned)
                ) && 
                (
                    this.Rental == other.Rental ||
                    this.Rental != null &&
                    this.Rental.Equals(other.Rental)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FreeToPlayReward != null)
                    hash = hash * 59 + this.FreeToPlayReward.GetHashCode();
                if (this.Owned != null)
                    hash = hash * 59 + this.Owned.GetHashCode();
                if (this.Rental != null)
                    hash = hash * 59 + this.Rental.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
