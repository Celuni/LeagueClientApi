/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolPerksPerkPageResource
    /// </summary>
    [DataContract]
    public partial class LolPerksPerkPageResource :  IEquatable<LolPerksPerkPageResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolPerksPerkPageResource" /> class.
        /// </summary>
        /// <param name="FormatVersion">FormatVersion.</param>
        /// <param name="Id">Id.</param>
        /// <param name="IsActive">IsActive.</param>
        /// <param name="IsDeletable">IsDeletable.</param>
        /// <param name="IsEditable">IsEditable.</param>
        /// <param name="IsValid">IsValid.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Order">Order.</param>
        /// <param name="PrimaryStyleId">PrimaryStyleId.</param>
        /// <param name="SelectedPerkIds">SelectedPerkIds.</param>
        /// <param name="SubStyleId">SubStyleId.</param>
        public LolPerksPerkPageResource(int? FormatVersion = default(int?), int? Id = default(int?), bool? IsActive = default(bool?), bool? IsDeletable = default(bool?), bool? IsEditable = default(bool?), bool? IsValid = default(bool?), string Name = default(string), int? Order = default(int?), int? PrimaryStyleId = default(int?), List<int?> SelectedPerkIds = default(List<int?>), int? SubStyleId = default(int?))
        {
            this.FormatVersion = FormatVersion;
            this.Id = Id;
            this.IsActive = IsActive;
            this.IsDeletable = IsDeletable;
            this.IsEditable = IsEditable;
            this.IsValid = IsValid;
            this.Name = Name;
            this.Order = Order;
            this.PrimaryStyleId = PrimaryStyleId;
            this.SelectedPerkIds = SelectedPerkIds;
            this.SubStyleId = SubStyleId;
        }
        
        /// <summary>
        /// Gets or Sets FormatVersion
        /// </summary>
        [DataMember(Name="formatVersion", EmitDefaultValue=false)]
        public int? FormatVersion { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsDeletable
        /// </summary>
        [DataMember(Name="isDeletable", EmitDefaultValue=false)]
        public bool? IsDeletable { get; set; }

        /// <summary>
        /// Gets or Sets IsEditable
        /// </summary>
        [DataMember(Name="isEditable", EmitDefaultValue=false)]
        public bool? IsEditable { get; set; }

        /// <summary>
        /// Gets or Sets IsValid
        /// </summary>
        [DataMember(Name="isValid", EmitDefaultValue=false)]
        public bool? IsValid { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public int? Order { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryStyleId
        /// </summary>
        [DataMember(Name="primaryStyleId", EmitDefaultValue=false)]
        public int? PrimaryStyleId { get; set; }

        /// <summary>
        /// Gets or Sets SelectedPerkIds
        /// </summary>
        [DataMember(Name="selectedPerkIds", EmitDefaultValue=false)]
        public List<int?> SelectedPerkIds { get; set; }

        /// <summary>
        /// Gets or Sets SubStyleId
        /// </summary>
        [DataMember(Name="subStyleId", EmitDefaultValue=false)]
        public int? SubStyleId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolPerksPerkPageResource {\n");
            sb.Append("  FormatVersion: ").Append(FormatVersion).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsDeletable: ").Append(IsDeletable).Append("\n");
            sb.Append("  IsEditable: ").Append(IsEditable).Append("\n");
            sb.Append("  IsValid: ").Append(IsValid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  PrimaryStyleId: ").Append(PrimaryStyleId).Append("\n");
            sb.Append("  SelectedPerkIds: ").Append(SelectedPerkIds).Append("\n");
            sb.Append("  SubStyleId: ").Append(SubStyleId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolPerksPerkPageResource);
        }

        /// <summary>
        /// Returns true if LolPerksPerkPageResource instances are equal
        /// </summary>
        /// <param name="other">Instance of LolPerksPerkPageResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolPerksPerkPageResource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FormatVersion == other.FormatVersion ||
                    this.FormatVersion != null &&
                    this.FormatVersion.Equals(other.FormatVersion)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.IsActive == other.IsActive ||
                    this.IsActive != null &&
                    this.IsActive.Equals(other.IsActive)
                ) && 
                (
                    this.IsDeletable == other.IsDeletable ||
                    this.IsDeletable != null &&
                    this.IsDeletable.Equals(other.IsDeletable)
                ) && 
                (
                    this.IsEditable == other.IsEditable ||
                    this.IsEditable != null &&
                    this.IsEditable.Equals(other.IsEditable)
                ) && 
                (
                    this.IsValid == other.IsValid ||
                    this.IsValid != null &&
                    this.IsValid.Equals(other.IsValid)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Order == other.Order ||
                    this.Order != null &&
                    this.Order.Equals(other.Order)
                ) && 
                (
                    this.PrimaryStyleId == other.PrimaryStyleId ||
                    this.PrimaryStyleId != null &&
                    this.PrimaryStyleId.Equals(other.PrimaryStyleId)
                ) && 
                (
                    this.SelectedPerkIds == other.SelectedPerkIds ||
                    this.SelectedPerkIds != null &&
                    this.SelectedPerkIds.SequenceEqual(other.SelectedPerkIds)
                ) && 
                (
                    this.SubStyleId == other.SubStyleId ||
                    this.SubStyleId != null &&
                    this.SubStyleId.Equals(other.SubStyleId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FormatVersion != null)
                    hash = hash * 59 + this.FormatVersion.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.IsActive != null)
                    hash = hash * 59 + this.IsActive.GetHashCode();
                if (this.IsDeletable != null)
                    hash = hash * 59 + this.IsDeletable.GetHashCode();
                if (this.IsEditable != null)
                    hash = hash * 59 + this.IsEditable.GetHashCode();
                if (this.IsValid != null)
                    hash = hash * 59 + this.IsValid.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Order != null)
                    hash = hash * 59 + this.Order.GetHashCode();
                if (this.PrimaryStyleId != null)
                    hash = hash * 59 + this.PrimaryStyleId.GetHashCode();
                if (this.SelectedPerkIds != null)
                    hash = hash * 59 + this.SelectedPerkIds.GetHashCode();
                if (this.SubStyleId != null)
                    hash = hash * 59 + this.SubStyleId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
