/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolPersonalizedOffersOffer
    /// </summary>
    [DataContract]
    public partial class LolPersonalizedOffersOffer :  IEquatable<LolPersonalizedOffersOffer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolPersonalizedOffersOffer" /> class.
        /// </summary>
        /// <param name="DiscountPrice">DiscountPrice.</param>
        /// <param name="ExpirationDate">ExpirationDate.</param>
        /// <param name="InventoryType">InventoryType.</param>
        /// <param name="ItemId">ItemId.</param>
        /// <param name="Name">Name.</param>
        /// <param name="OfferId">OfferId.</param>
        /// <param name="OriginalPrice">OriginalPrice.</param>
        /// <param name="Owned">Owned.</param>
        /// <param name="Revealed">Revealed.</param>
        /// <param name="SpotIndex">SpotIndex.</param>
        public LolPersonalizedOffersOffer(long? DiscountPrice = default(long?), string ExpirationDate = default(string), string InventoryType = default(string), int? ItemId = default(int?), string Name = default(string), string OfferId = default(string), long? OriginalPrice = default(long?), bool? Owned = default(bool?), bool? Revealed = default(bool?), int? SpotIndex = default(int?))
        {
            this.DiscountPrice = DiscountPrice;
            this.ExpirationDate = ExpirationDate;
            this.InventoryType = InventoryType;
            this.ItemId = ItemId;
            this.Name = Name;
            this.OfferId = OfferId;
            this.OriginalPrice = OriginalPrice;
            this.Owned = Owned;
            this.Revealed = Revealed;
            this.SpotIndex = SpotIndex;
        }
        
        /// <summary>
        /// Gets or Sets DiscountPrice
        /// </summary>
        [DataMember(Name="discountPrice", EmitDefaultValue=false)]
        public long? DiscountPrice { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public string ExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets InventoryType
        /// </summary>
        [DataMember(Name="inventoryType", EmitDefaultValue=false)]
        public string InventoryType { get; set; }

        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name="itemId", EmitDefaultValue=false)]
        public int? ItemId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OfferId
        /// </summary>
        [DataMember(Name="offerId", EmitDefaultValue=false)]
        public string OfferId { get; set; }

        /// <summary>
        /// Gets or Sets OriginalPrice
        /// </summary>
        [DataMember(Name="originalPrice", EmitDefaultValue=false)]
        public long? OriginalPrice { get; set; }

        /// <summary>
        /// Gets or Sets Owned
        /// </summary>
        [DataMember(Name="owned", EmitDefaultValue=false)]
        public bool? Owned { get; set; }

        /// <summary>
        /// Gets or Sets Revealed
        /// </summary>
        [DataMember(Name="revealed", EmitDefaultValue=false)]
        public bool? Revealed { get; set; }

        /// <summary>
        /// Gets or Sets SpotIndex
        /// </summary>
        [DataMember(Name="spotIndex", EmitDefaultValue=false)]
        public int? SpotIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolPersonalizedOffersOffer {\n");
            sb.Append("  DiscountPrice: ").Append(DiscountPrice).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  InventoryType: ").Append(InventoryType).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OfferId: ").Append(OfferId).Append("\n");
            sb.Append("  OriginalPrice: ").Append(OriginalPrice).Append("\n");
            sb.Append("  Owned: ").Append(Owned).Append("\n");
            sb.Append("  Revealed: ").Append(Revealed).Append("\n");
            sb.Append("  SpotIndex: ").Append(SpotIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolPersonalizedOffersOffer);
        }

        /// <summary>
        /// Returns true if LolPersonalizedOffersOffer instances are equal
        /// </summary>
        /// <param name="other">Instance of LolPersonalizedOffersOffer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolPersonalizedOffersOffer other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DiscountPrice == other.DiscountPrice ||
                    this.DiscountPrice != null &&
                    this.DiscountPrice.Equals(other.DiscountPrice)
                ) && 
                (
                    this.ExpirationDate == other.ExpirationDate ||
                    this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(other.ExpirationDate)
                ) && 
                (
                    this.InventoryType == other.InventoryType ||
                    this.InventoryType != null &&
                    this.InventoryType.Equals(other.InventoryType)
                ) && 
                (
                    this.ItemId == other.ItemId ||
                    this.ItemId != null &&
                    this.ItemId.Equals(other.ItemId)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.OfferId == other.OfferId ||
                    this.OfferId != null &&
                    this.OfferId.Equals(other.OfferId)
                ) && 
                (
                    this.OriginalPrice == other.OriginalPrice ||
                    this.OriginalPrice != null &&
                    this.OriginalPrice.Equals(other.OriginalPrice)
                ) && 
                (
                    this.Owned == other.Owned ||
                    this.Owned != null &&
                    this.Owned.Equals(other.Owned)
                ) && 
                (
                    this.Revealed == other.Revealed ||
                    this.Revealed != null &&
                    this.Revealed.Equals(other.Revealed)
                ) && 
                (
                    this.SpotIndex == other.SpotIndex ||
                    this.SpotIndex != null &&
                    this.SpotIndex.Equals(other.SpotIndex)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DiscountPrice != null)
                    hash = hash * 59 + this.DiscountPrice.GetHashCode();
                if (this.ExpirationDate != null)
                    hash = hash * 59 + this.ExpirationDate.GetHashCode();
                if (this.InventoryType != null)
                    hash = hash * 59 + this.InventoryType.GetHashCode();
                if (this.ItemId != null)
                    hash = hash * 59 + this.ItemId.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.OfferId != null)
                    hash = hash * 59 + this.OfferId.GetHashCode();
                if (this.OriginalPrice != null)
                    hash = hash * 59 + this.OriginalPrice.GetHashCode();
                if (this.Owned != null)
                    hash = hash * 59 + this.Owned.GetHashCode();
                if (this.Revealed != null)
                    hash = hash * 59 + this.Revealed.GetHashCode();
                if (this.SpotIndex != null)
                    hash = hash * 59 + this.SpotIndex.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
