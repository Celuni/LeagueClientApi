/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolPftPFTEndOfGameTeam
    /// </summary>
    [DataContract]
    public partial class LolPftPFTEndOfGameTeam :  IEquatable<LolPftPFTEndOfGameTeam>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolPftPFTEndOfGameTeam" /> class.
        /// </summary>
        /// <param name="ChampionBans">ChampionBans.</param>
        /// <param name="FullId">FullId.</param>
        /// <param name="IsBottomTeam">IsBottomTeam.</param>
        /// <param name="IsPlayerTeam">IsPlayerTeam.</param>
        /// <param name="IsWinningTeam">IsWinningTeam.</param>
        /// <param name="MemberStatusString">MemberStatusString.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Players">Players.</param>
        /// <param name="Stats">Stats.</param>
        /// <param name="Tag">Tag.</param>
        /// <param name="TeamId">TeamId.</param>
        public LolPftPFTEndOfGameTeam(List<int?> ChampionBans = default(List<int?>), string FullId = default(string), bool? IsBottomTeam = default(bool?), bool? IsPlayerTeam = default(bool?), bool? IsWinningTeam = default(bool?), string MemberStatusString = default(string), string Name = default(string), List<LolPftPFTEndOfGamePlayer> Players = default(List<LolPftPFTEndOfGamePlayer>), Object Stats = default(Object), string Tag = default(string), int? TeamId = default(int?))
        {
            this.ChampionBans = ChampionBans;
            this.FullId = FullId;
            this.IsBottomTeam = IsBottomTeam;
            this.IsPlayerTeam = IsPlayerTeam;
            this.IsWinningTeam = IsWinningTeam;
            this.MemberStatusString = MemberStatusString;
            this.Name = Name;
            this.Players = Players;
            this.Stats = Stats;
            this.Tag = Tag;
            this.TeamId = TeamId;
        }
        
        /// <summary>
        /// Gets or Sets ChampionBans
        /// </summary>
        [DataMember(Name="championBans", EmitDefaultValue=false)]
        public List<int?> ChampionBans { get; set; }

        /// <summary>
        /// Gets or Sets FullId
        /// </summary>
        [DataMember(Name="fullId", EmitDefaultValue=false)]
        public string FullId { get; set; }

        /// <summary>
        /// Gets or Sets IsBottomTeam
        /// </summary>
        [DataMember(Name="isBottomTeam", EmitDefaultValue=false)]
        public bool? IsBottomTeam { get; set; }

        /// <summary>
        /// Gets or Sets IsPlayerTeam
        /// </summary>
        [DataMember(Name="isPlayerTeam", EmitDefaultValue=false)]
        public bool? IsPlayerTeam { get; set; }

        /// <summary>
        /// Gets or Sets IsWinningTeam
        /// </summary>
        [DataMember(Name="isWinningTeam", EmitDefaultValue=false)]
        public bool? IsWinningTeam { get; set; }

        /// <summary>
        /// Gets or Sets MemberStatusString
        /// </summary>
        [DataMember(Name="memberStatusString", EmitDefaultValue=false)]
        public string MemberStatusString { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Players
        /// </summary>
        [DataMember(Name="players", EmitDefaultValue=false)]
        public List<LolPftPFTEndOfGamePlayer> Players { get; set; }

        /// <summary>
        /// Gets or Sets Stats
        /// </summary>
        [DataMember(Name="stats", EmitDefaultValue=false)]
        public Object Stats { get; set; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [DataMember(Name="tag", EmitDefaultValue=false)]
        public string Tag { get; set; }

        /// <summary>
        /// Gets or Sets TeamId
        /// </summary>
        [DataMember(Name="teamId", EmitDefaultValue=false)]
        public int? TeamId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolPftPFTEndOfGameTeam {\n");
            sb.Append("  ChampionBans: ").Append(ChampionBans).Append("\n");
            sb.Append("  FullId: ").Append(FullId).Append("\n");
            sb.Append("  IsBottomTeam: ").Append(IsBottomTeam).Append("\n");
            sb.Append("  IsPlayerTeam: ").Append(IsPlayerTeam).Append("\n");
            sb.Append("  IsWinningTeam: ").Append(IsWinningTeam).Append("\n");
            sb.Append("  MemberStatusString: ").Append(MemberStatusString).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Players: ").Append(Players).Append("\n");
            sb.Append("  Stats: ").Append(Stats).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolPftPFTEndOfGameTeam);
        }

        /// <summary>
        /// Returns true if LolPftPFTEndOfGameTeam instances are equal
        /// </summary>
        /// <param name="other">Instance of LolPftPFTEndOfGameTeam to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolPftPFTEndOfGameTeam other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ChampionBans == other.ChampionBans ||
                    this.ChampionBans != null &&
                    this.ChampionBans.SequenceEqual(other.ChampionBans)
                ) && 
                (
                    this.FullId == other.FullId ||
                    this.FullId != null &&
                    this.FullId.Equals(other.FullId)
                ) && 
                (
                    this.IsBottomTeam == other.IsBottomTeam ||
                    this.IsBottomTeam != null &&
                    this.IsBottomTeam.Equals(other.IsBottomTeam)
                ) && 
                (
                    this.IsPlayerTeam == other.IsPlayerTeam ||
                    this.IsPlayerTeam != null &&
                    this.IsPlayerTeam.Equals(other.IsPlayerTeam)
                ) && 
                (
                    this.IsWinningTeam == other.IsWinningTeam ||
                    this.IsWinningTeam != null &&
                    this.IsWinningTeam.Equals(other.IsWinningTeam)
                ) && 
                (
                    this.MemberStatusString == other.MemberStatusString ||
                    this.MemberStatusString != null &&
                    this.MemberStatusString.Equals(other.MemberStatusString)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Players == other.Players ||
                    this.Players != null &&
                    this.Players.SequenceEqual(other.Players)
                ) && 
                (
                    this.Stats == other.Stats ||
                    this.Stats != null &&
                    this.Stats.Equals(other.Stats)
                ) && 
                (
                    this.Tag == other.Tag ||
                    this.Tag != null &&
                    this.Tag.Equals(other.Tag)
                ) && 
                (
                    this.TeamId == other.TeamId ||
                    this.TeamId != null &&
                    this.TeamId.Equals(other.TeamId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ChampionBans != null)
                    hash = hash * 59 + this.ChampionBans.GetHashCode();
                if (this.FullId != null)
                    hash = hash * 59 + this.FullId.GetHashCode();
                if (this.IsBottomTeam != null)
                    hash = hash * 59 + this.IsBottomTeam.GetHashCode();
                if (this.IsPlayerTeam != null)
                    hash = hash * 59 + this.IsPlayerTeam.GetHashCode();
                if (this.IsWinningTeam != null)
                    hash = hash * 59 + this.IsWinningTeam.GetHashCode();
                if (this.MemberStatusString != null)
                    hash = hash * 59 + this.MemberStatusString.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Players != null)
                    hash = hash * 59 + this.Players.GetHashCode();
                if (this.Stats != null)
                    hash = hash * 59 + this.Stats.GetHashCode();
                if (this.Tag != null)
                    hash = hash * 59 + this.Tag.GetHashCode();
                if (this.TeamId != null)
                    hash = hash * 59 + this.TeamId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
