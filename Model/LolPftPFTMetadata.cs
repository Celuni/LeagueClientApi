/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolPftPFTMetadata
    /// </summary>
    [DataContract]
    public partial class LolPftPFTMetadata :  IEquatable<LolPftPFTMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolPftPFTMetadata" /> class.
        /// </summary>
        /// <param name="AccountId">AccountId.</param>
        /// <param name="AppName">AppName.</param>
        /// <param name="AppVersion">AppVersion.</param>
        /// <param name="Env">Env.</param>
        /// <param name="Locale">Locale.</param>
        /// <param name="Stats">Stats.</param>
        /// <param name="SystemOs">SystemOs.</param>
        /// <param name="WebRegion">WebRegion.</param>
        public LolPftPFTMetadata(long? AccountId = default(long?), string AppName = default(string), string AppVersion = default(string), string Env = default(string), string Locale = default(string), LolPftPFTEndOfGameStats Stats = default(LolPftPFTEndOfGameStats), string SystemOs = default(string), string WebRegion = default(string))
        {
            this.AccountId = AccountId;
            this.AppName = AppName;
            this.AppVersion = AppVersion;
            this.Env = Env;
            this.Locale = Locale;
            this.Stats = Stats;
            this.SystemOs = SystemOs;
            this.WebRegion = WebRegion;
        }
        
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public long? AccountId { get; set; }

        /// <summary>
        /// Gets or Sets AppName
        /// </summary>
        [DataMember(Name="appName", EmitDefaultValue=false)]
        public string AppName { get; set; }

        /// <summary>
        /// Gets or Sets AppVersion
        /// </summary>
        [DataMember(Name="appVersion", EmitDefaultValue=false)]
        public string AppVersion { get; set; }

        /// <summary>
        /// Gets or Sets Env
        /// </summary>
        [DataMember(Name="env", EmitDefaultValue=false)]
        public string Env { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or Sets Stats
        /// </summary>
        [DataMember(Name="stats", EmitDefaultValue=false)]
        public LolPftPFTEndOfGameStats Stats { get; set; }

        /// <summary>
        /// Gets or Sets SystemOs
        /// </summary>
        [DataMember(Name="systemOs", EmitDefaultValue=false)]
        public string SystemOs { get; set; }

        /// <summary>
        /// Gets or Sets WebRegion
        /// </summary>
        [DataMember(Name="webRegion", EmitDefaultValue=false)]
        public string WebRegion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolPftPFTMetadata {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AppName: ").Append(AppName).Append("\n");
            sb.Append("  AppVersion: ").Append(AppVersion).Append("\n");
            sb.Append("  Env: ").Append(Env).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  Stats: ").Append(Stats).Append("\n");
            sb.Append("  SystemOs: ").Append(SystemOs).Append("\n");
            sb.Append("  WebRegion: ").Append(WebRegion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolPftPFTMetadata);
        }

        /// <summary>
        /// Returns true if LolPftPFTMetadata instances are equal
        /// </summary>
        /// <param name="other">Instance of LolPftPFTMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolPftPFTMetadata other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.AppName == other.AppName ||
                    this.AppName != null &&
                    this.AppName.Equals(other.AppName)
                ) && 
                (
                    this.AppVersion == other.AppVersion ||
                    this.AppVersion != null &&
                    this.AppVersion.Equals(other.AppVersion)
                ) && 
                (
                    this.Env == other.Env ||
                    this.Env != null &&
                    this.Env.Equals(other.Env)
                ) && 
                (
                    this.Locale == other.Locale ||
                    this.Locale != null &&
                    this.Locale.Equals(other.Locale)
                ) && 
                (
                    this.Stats == other.Stats ||
                    this.Stats != null &&
                    this.Stats.Equals(other.Stats)
                ) && 
                (
                    this.SystemOs == other.SystemOs ||
                    this.SystemOs != null &&
                    this.SystemOs.Equals(other.SystemOs)
                ) && 
                (
                    this.WebRegion == other.WebRegion ||
                    this.WebRegion != null &&
                    this.WebRegion.Equals(other.WebRegion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.AppName != null)
                    hash = hash * 59 + this.AppName.GetHashCode();
                if (this.AppVersion != null)
                    hash = hash * 59 + this.AppVersion.GetHashCode();
                if (this.Env != null)
                    hash = hash * 59 + this.Env.GetHashCode();
                if (this.Locale != null)
                    hash = hash * 59 + this.Locale.GetHashCode();
                if (this.Stats != null)
                    hash = hash * 59 + this.Stats.GetHashCode();
                if (this.SystemOs != null)
                    hash = hash * 59 + this.SystemOs.GetHashCode();
                if (this.WebRegion != null)
                    hash = hash * 59 + this.WebRegion.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
