/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolPlayerBehaviorBanNotification
    /// </summary>
    [DataContract]
    public partial class LolPlayerBehaviorBanNotification :  IEquatable<LolPlayerBehaviorBanNotification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolPlayerBehaviorBanNotification" /> class.
        /// </summary>
        /// <param name="DisplayReformCard">DisplayReformCard.</param>
        /// <param name="Id">Id.</param>
        /// <param name="IsPermaBan">IsPermaBan.</param>
        /// <param name="Reason">Reason.</param>
        /// <param name="Source">Source.</param>
        /// <param name="TimeUntilBanExpires">TimeUntilBanExpires.</param>
        public LolPlayerBehaviorBanNotification(bool? DisplayReformCard = default(bool?), long? Id = default(long?), bool? IsPermaBan = default(bool?), string Reason = default(string), LolPlayerBehaviorNotificationSource Source = default(LolPlayerBehaviorNotificationSource), long? TimeUntilBanExpires = default(long?))
        {
            this.DisplayReformCard = DisplayReformCard;
            this.Id = Id;
            this.IsPermaBan = IsPermaBan;
            this.Reason = Reason;
            this.Source = Source;
            this.TimeUntilBanExpires = TimeUntilBanExpires;
        }
        
        /// <summary>
        /// Gets or Sets DisplayReformCard
        /// </summary>
        [DataMember(Name="displayReformCard", EmitDefaultValue=false)]
        public bool? DisplayReformCard { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets IsPermaBan
        /// </summary>
        [DataMember(Name="isPermaBan", EmitDefaultValue=false)]
        public bool? IsPermaBan { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public LolPlayerBehaviorNotificationSource Source { get; set; }

        /// <summary>
        /// Gets or Sets TimeUntilBanExpires
        /// </summary>
        [DataMember(Name="timeUntilBanExpires", EmitDefaultValue=false)]
        public long? TimeUntilBanExpires { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolPlayerBehaviorBanNotification {\n");
            sb.Append("  DisplayReformCard: ").Append(DisplayReformCard).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsPermaBan: ").Append(IsPermaBan).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  TimeUntilBanExpires: ").Append(TimeUntilBanExpires).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolPlayerBehaviorBanNotification);
        }

        /// <summary>
        /// Returns true if LolPlayerBehaviorBanNotification instances are equal
        /// </summary>
        /// <param name="other">Instance of LolPlayerBehaviorBanNotification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolPlayerBehaviorBanNotification other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DisplayReformCard == other.DisplayReformCard ||
                    this.DisplayReformCard != null &&
                    this.DisplayReformCard.Equals(other.DisplayReformCard)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.IsPermaBan == other.IsPermaBan ||
                    this.IsPermaBan != null &&
                    this.IsPermaBan.Equals(other.IsPermaBan)
                ) && 
                (
                    this.Reason == other.Reason ||
                    this.Reason != null &&
                    this.Reason.Equals(other.Reason)
                ) && 
                (
                    this.Source == other.Source ||
                    this.Source != null &&
                    this.Source.Equals(other.Source)
                ) && 
                (
                    this.TimeUntilBanExpires == other.TimeUntilBanExpires ||
                    this.TimeUntilBanExpires != null &&
                    this.TimeUntilBanExpires.Equals(other.TimeUntilBanExpires)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DisplayReformCard != null)
                    hash = hash * 59 + this.DisplayReformCard.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.IsPermaBan != null)
                    hash = hash * 59 + this.IsPermaBan.GetHashCode();
                if (this.Reason != null)
                    hash = hash * 59 + this.Reason.GetHashCode();
                if (this.Source != null)
                    hash = hash * 59 + this.Source.GetHashCode();
                if (this.TimeUntilBanExpires != null)
                    hash = hash * 59 + this.TimeUntilBanExpires.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
