/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolPlayerBehaviorRestrictionNotification
    /// </summary>
    [DataContract]
    public partial class LolPlayerBehaviorRestrictionNotification :  IEquatable<LolPlayerBehaviorRestrictionNotification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolPlayerBehaviorRestrictionNotification" /> class.
        /// </summary>
        /// <param name="DisplayReformCard">DisplayReformCard.</param>
        /// <param name="GamesRemaining">GamesRemaining.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Source">Source.</param>
        public LolPlayerBehaviorRestrictionNotification(bool? DisplayReformCard = default(bool?), long? GamesRemaining = default(long?), long? Id = default(long?), LolPlayerBehaviorNotificationSource Source = default(LolPlayerBehaviorNotificationSource))
        {
            this.DisplayReformCard = DisplayReformCard;
            this.GamesRemaining = GamesRemaining;
            this.Id = Id;
            this.Source = Source;
        }
        
        /// <summary>
        /// Gets or Sets DisplayReformCard
        /// </summary>
        [DataMember(Name="displayReformCard", EmitDefaultValue=false)]
        public bool? DisplayReformCard { get; set; }

        /// <summary>
        /// Gets or Sets GamesRemaining
        /// </summary>
        [DataMember(Name="gamesRemaining", EmitDefaultValue=false)]
        public long? GamesRemaining { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public LolPlayerBehaviorNotificationSource Source { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolPlayerBehaviorRestrictionNotification {\n");
            sb.Append("  DisplayReformCard: ").Append(DisplayReformCard).Append("\n");
            sb.Append("  GamesRemaining: ").Append(GamesRemaining).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolPlayerBehaviorRestrictionNotification);
        }

        /// <summary>
        /// Returns true if LolPlayerBehaviorRestrictionNotification instances are equal
        /// </summary>
        /// <param name="other">Instance of LolPlayerBehaviorRestrictionNotification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolPlayerBehaviorRestrictionNotification other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DisplayReformCard == other.DisplayReformCard ||
                    this.DisplayReformCard != null &&
                    this.DisplayReformCard.Equals(other.DisplayReformCard)
                ) && 
                (
                    this.GamesRemaining == other.GamesRemaining ||
                    this.GamesRemaining != null &&
                    this.GamesRemaining.Equals(other.GamesRemaining)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Source == other.Source ||
                    this.Source != null &&
                    this.Source.Equals(other.Source)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DisplayReformCard != null)
                    hash = hash * 59 + this.DisplayReformCard.GetHashCode();
                if (this.GamesRemaining != null)
                    hash = hash * 59 + this.GamesRemaining.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Source != null)
                    hash = hash * 59 + this.Source.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
