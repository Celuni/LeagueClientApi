/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolQueueEligibilityChampionPlayableCountsForEligibility
    /// </summary>
    [DataContract]
    public partial class LolQueueEligibilityChampionPlayableCountsForEligibility :  IEquatable<LolQueueEligibilityChampionPlayableCountsForEligibility>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolQueueEligibilityChampionPlayableCountsForEligibility" /> class.
        /// </summary>
        /// <param name="ChampionsFreeToPlay">ChampionsFreeToPlay.</param>
        /// <param name="ChampionsFreeToPlayReward">ChampionsFreeToPlayReward.</param>
        /// <param name="ChampionsOwned">ChampionsOwned.</param>
        /// <param name="ChampionsRented">ChampionsRented.</param>
        public LolQueueEligibilityChampionPlayableCountsForEligibility(int? ChampionsFreeToPlay = default(int?), int? ChampionsFreeToPlayReward = default(int?), int? ChampionsOwned = default(int?), int? ChampionsRented = default(int?))
        {
            this.ChampionsFreeToPlay = ChampionsFreeToPlay;
            this.ChampionsFreeToPlayReward = ChampionsFreeToPlayReward;
            this.ChampionsOwned = ChampionsOwned;
            this.ChampionsRented = ChampionsRented;
        }
        
        /// <summary>
        /// Gets or Sets ChampionsFreeToPlay
        /// </summary>
        [DataMember(Name="championsFreeToPlay", EmitDefaultValue=false)]
        public int? ChampionsFreeToPlay { get; set; }

        /// <summary>
        /// Gets or Sets ChampionsFreeToPlayReward
        /// </summary>
        [DataMember(Name="championsFreeToPlayReward", EmitDefaultValue=false)]
        public int? ChampionsFreeToPlayReward { get; set; }

        /// <summary>
        /// Gets or Sets ChampionsOwned
        /// </summary>
        [DataMember(Name="championsOwned", EmitDefaultValue=false)]
        public int? ChampionsOwned { get; set; }

        /// <summary>
        /// Gets or Sets ChampionsRented
        /// </summary>
        [DataMember(Name="championsRented", EmitDefaultValue=false)]
        public int? ChampionsRented { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolQueueEligibilityChampionPlayableCountsForEligibility {\n");
            sb.Append("  ChampionsFreeToPlay: ").Append(ChampionsFreeToPlay).Append("\n");
            sb.Append("  ChampionsFreeToPlayReward: ").Append(ChampionsFreeToPlayReward).Append("\n");
            sb.Append("  ChampionsOwned: ").Append(ChampionsOwned).Append("\n");
            sb.Append("  ChampionsRented: ").Append(ChampionsRented).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolQueueEligibilityChampionPlayableCountsForEligibility);
        }

        /// <summary>
        /// Returns true if LolQueueEligibilityChampionPlayableCountsForEligibility instances are equal
        /// </summary>
        /// <param name="other">Instance of LolQueueEligibilityChampionPlayableCountsForEligibility to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolQueueEligibilityChampionPlayableCountsForEligibility other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ChampionsFreeToPlay == other.ChampionsFreeToPlay ||
                    this.ChampionsFreeToPlay != null &&
                    this.ChampionsFreeToPlay.Equals(other.ChampionsFreeToPlay)
                ) && 
                (
                    this.ChampionsFreeToPlayReward == other.ChampionsFreeToPlayReward ||
                    this.ChampionsFreeToPlayReward != null &&
                    this.ChampionsFreeToPlayReward.Equals(other.ChampionsFreeToPlayReward)
                ) && 
                (
                    this.ChampionsOwned == other.ChampionsOwned ||
                    this.ChampionsOwned != null &&
                    this.ChampionsOwned.Equals(other.ChampionsOwned)
                ) && 
                (
                    this.ChampionsRented == other.ChampionsRented ||
                    this.ChampionsRented != null &&
                    this.ChampionsRented.Equals(other.ChampionsRented)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ChampionsFreeToPlay != null)
                    hash = hash * 59 + this.ChampionsFreeToPlay.GetHashCode();
                if (this.ChampionsFreeToPlayReward != null)
                    hash = hash * 59 + this.ChampionsFreeToPlayReward.GetHashCode();
                if (this.ChampionsOwned != null)
                    hash = hash * 59 + this.ChampionsOwned.GetHashCode();
                if (this.ChampionsRented != null)
                    hash = hash * 59 + this.ChampionsRented.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
