/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolQueueEligibilityQueue
    /// </summary>
    [DataContract]
    public partial class LolQueueEligibilityQueue :  IEquatable<LolQueueEligibilityQueue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolQueueEligibilityQueue" /> class.
        /// </summary>
        /// <param name="AreFreeChampionsAllowed">AreFreeChampionsAllowed.</param>
        /// <param name="ChampionsRequiredToPlay">ChampionsRequiredToPlay.</param>
        /// <param name="Id">Id.</param>
        /// <param name="IsRanked">IsRanked.</param>
        /// <param name="MaxLevel">MaxLevel.</param>
        /// <param name="MaximumParticipantListSize">MaximumParticipantListSize.</param>
        /// <param name="MinLevel">MinLevel.</param>
        /// <param name="NumPlayersPerTeam">NumPlayersPerTeam.</param>
        /// <param name="QueueAvailability">QueueAvailability.</param>
        /// <param name="ShowPositionSelector">ShowPositionSelector.</param>
        /// <param name="Type">Type.</param>
        public LolQueueEligibilityQueue(bool? AreFreeChampionsAllowed = default(bool?), int? ChampionsRequiredToPlay = default(int?), int? Id = default(int?), bool? IsRanked = default(bool?), int? MaxLevel = default(int?), int? MaximumParticipantListSize = default(int?), int? MinLevel = default(int?), int? NumPlayersPerTeam = default(int?), LolQueueEligibilityQueueAvailability QueueAvailability = default(LolQueueEligibilityQueueAvailability), bool? ShowPositionSelector = default(bool?), string Type = default(string))
        {
            this.AreFreeChampionsAllowed = AreFreeChampionsAllowed;
            this.ChampionsRequiredToPlay = ChampionsRequiredToPlay;
            this.Id = Id;
            this.IsRanked = IsRanked;
            this.MaxLevel = MaxLevel;
            this.MaximumParticipantListSize = MaximumParticipantListSize;
            this.MinLevel = MinLevel;
            this.NumPlayersPerTeam = NumPlayersPerTeam;
            this.QueueAvailability = QueueAvailability;
            this.ShowPositionSelector = ShowPositionSelector;
            this.Type = Type;
        }
        
        /// <summary>
        /// Gets or Sets AreFreeChampionsAllowed
        /// </summary>
        [DataMember(Name="areFreeChampionsAllowed", EmitDefaultValue=false)]
        public bool? AreFreeChampionsAllowed { get; set; }

        /// <summary>
        /// Gets or Sets ChampionsRequiredToPlay
        /// </summary>
        [DataMember(Name="championsRequiredToPlay", EmitDefaultValue=false)]
        public int? ChampionsRequiredToPlay { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets IsRanked
        /// </summary>
        [DataMember(Name="isRanked", EmitDefaultValue=false)]
        public bool? IsRanked { get; set; }

        /// <summary>
        /// Gets or Sets MaxLevel
        /// </summary>
        [DataMember(Name="maxLevel", EmitDefaultValue=false)]
        public int? MaxLevel { get; set; }

        /// <summary>
        /// Gets or Sets MaximumParticipantListSize
        /// </summary>
        [DataMember(Name="maximumParticipantListSize", EmitDefaultValue=false)]
        public int? MaximumParticipantListSize { get; set; }

        /// <summary>
        /// Gets or Sets MinLevel
        /// </summary>
        [DataMember(Name="minLevel", EmitDefaultValue=false)]
        public int? MinLevel { get; set; }

        /// <summary>
        /// Gets or Sets NumPlayersPerTeam
        /// </summary>
        [DataMember(Name="numPlayersPerTeam", EmitDefaultValue=false)]
        public int? NumPlayersPerTeam { get; set; }

        /// <summary>
        /// Gets or Sets QueueAvailability
        /// </summary>
        [DataMember(Name="queueAvailability", EmitDefaultValue=false)]
        public LolQueueEligibilityQueueAvailability QueueAvailability { get; set; }

        /// <summary>
        /// Gets or Sets ShowPositionSelector
        /// </summary>
        [DataMember(Name="showPositionSelector", EmitDefaultValue=false)]
        public bool? ShowPositionSelector { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolQueueEligibilityQueue {\n");
            sb.Append("  AreFreeChampionsAllowed: ").Append(AreFreeChampionsAllowed).Append("\n");
            sb.Append("  ChampionsRequiredToPlay: ").Append(ChampionsRequiredToPlay).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsRanked: ").Append(IsRanked).Append("\n");
            sb.Append("  MaxLevel: ").Append(MaxLevel).Append("\n");
            sb.Append("  MaximumParticipantListSize: ").Append(MaximumParticipantListSize).Append("\n");
            sb.Append("  MinLevel: ").Append(MinLevel).Append("\n");
            sb.Append("  NumPlayersPerTeam: ").Append(NumPlayersPerTeam).Append("\n");
            sb.Append("  QueueAvailability: ").Append(QueueAvailability).Append("\n");
            sb.Append("  ShowPositionSelector: ").Append(ShowPositionSelector).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolQueueEligibilityQueue);
        }

        /// <summary>
        /// Returns true if LolQueueEligibilityQueue instances are equal
        /// </summary>
        /// <param name="other">Instance of LolQueueEligibilityQueue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolQueueEligibilityQueue other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AreFreeChampionsAllowed == other.AreFreeChampionsAllowed ||
                    this.AreFreeChampionsAllowed != null &&
                    this.AreFreeChampionsAllowed.Equals(other.AreFreeChampionsAllowed)
                ) && 
                (
                    this.ChampionsRequiredToPlay == other.ChampionsRequiredToPlay ||
                    this.ChampionsRequiredToPlay != null &&
                    this.ChampionsRequiredToPlay.Equals(other.ChampionsRequiredToPlay)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.IsRanked == other.IsRanked ||
                    this.IsRanked != null &&
                    this.IsRanked.Equals(other.IsRanked)
                ) && 
                (
                    this.MaxLevel == other.MaxLevel ||
                    this.MaxLevel != null &&
                    this.MaxLevel.Equals(other.MaxLevel)
                ) && 
                (
                    this.MaximumParticipantListSize == other.MaximumParticipantListSize ||
                    this.MaximumParticipantListSize != null &&
                    this.MaximumParticipantListSize.Equals(other.MaximumParticipantListSize)
                ) && 
                (
                    this.MinLevel == other.MinLevel ||
                    this.MinLevel != null &&
                    this.MinLevel.Equals(other.MinLevel)
                ) && 
                (
                    this.NumPlayersPerTeam == other.NumPlayersPerTeam ||
                    this.NumPlayersPerTeam != null &&
                    this.NumPlayersPerTeam.Equals(other.NumPlayersPerTeam)
                ) && 
                (
                    this.QueueAvailability == other.QueueAvailability ||
                    this.QueueAvailability != null &&
                    this.QueueAvailability.Equals(other.QueueAvailability)
                ) && 
                (
                    this.ShowPositionSelector == other.ShowPositionSelector ||
                    this.ShowPositionSelector != null &&
                    this.ShowPositionSelector.Equals(other.ShowPositionSelector)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AreFreeChampionsAllowed != null)
                    hash = hash * 59 + this.AreFreeChampionsAllowed.GetHashCode();
                if (this.ChampionsRequiredToPlay != null)
                    hash = hash * 59 + this.ChampionsRequiredToPlay.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.IsRanked != null)
                    hash = hash * 59 + this.IsRanked.GetHashCode();
                if (this.MaxLevel != null)
                    hash = hash * 59 + this.MaxLevel.GetHashCode();
                if (this.MaximumParticipantListSize != null)
                    hash = hash * 59 + this.MaximumParticipantListSize.GetHashCode();
                if (this.MinLevel != null)
                    hash = hash * 59 + this.MinLevel.GetHashCode();
                if (this.NumPlayersPerTeam != null)
                    hash = hash * 59 + this.NumPlayersPerTeam.GetHashCode();
                if (this.QueueAvailability != null)
                    hash = hash * 59 + this.QueueAvailability.GetHashCode();
                if (this.ShowPositionSelector != null)
                    hash = hash * 59 + this.ShowPositionSelector.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
