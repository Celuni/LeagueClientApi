/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolStoreAllSummonerData
    /// </summary>
    [DataContract]
    public partial class LolStoreAllSummonerData :  IEquatable<LolStoreAllSummonerData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolStoreAllSummonerData" /> class.
        /// </summary>
        /// <param name="Summoner">Summoner.</param>
        /// <param name="SummonerLevelAndPoints">SummonerLevelAndPoints.</param>
        public LolStoreAllSummonerData(LolStoreSummoner Summoner = default(LolStoreSummoner), LolStoreSummonerLevelAndPoints SummonerLevelAndPoints = default(LolStoreSummonerLevelAndPoints))
        {
            this.Summoner = Summoner;
            this.SummonerLevelAndPoints = SummonerLevelAndPoints;
        }
        
        /// <summary>
        /// Gets or Sets Summoner
        /// </summary>
        [DataMember(Name="summoner", EmitDefaultValue=false)]
        public LolStoreSummoner Summoner { get; set; }

        /// <summary>
        /// Gets or Sets SummonerLevelAndPoints
        /// </summary>
        [DataMember(Name="summonerLevelAndPoints", EmitDefaultValue=false)]
        public LolStoreSummonerLevelAndPoints SummonerLevelAndPoints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolStoreAllSummonerData {\n");
            sb.Append("  Summoner: ").Append(Summoner).Append("\n");
            sb.Append("  SummonerLevelAndPoints: ").Append(SummonerLevelAndPoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolStoreAllSummonerData);
        }

        /// <summary>
        /// Returns true if LolStoreAllSummonerData instances are equal
        /// </summary>
        /// <param name="other">Instance of LolStoreAllSummonerData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolStoreAllSummonerData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Summoner == other.Summoner ||
                    this.Summoner != null &&
                    this.Summoner.Equals(other.Summoner)
                ) && 
                (
                    this.SummonerLevelAndPoints == other.SummonerLevelAndPoints ||
                    this.SummonerLevelAndPoints != null &&
                    this.SummonerLevelAndPoints.Equals(other.SummonerLevelAndPoints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Summoner != null)
                    hash = hash * 59 + this.Summoner.GetHashCode();
                if (this.SummonerLevelAndPoints != null)
                    hash = hash * 59 + this.SummonerLevelAndPoints.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
