/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolStoreBundleItemDTO
    /// </summary>
    [DataContract]
    public partial class LolStoreBundleItemDTO :  IEquatable<LolStoreBundleItemDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolStoreBundleItemDTO" /> class.
        /// </summary>
        /// <param name="Description">Description.</param>
        /// <param name="DiscountedRp">DiscountedRp.</param>
        /// <param name="IconUrl">IconUrl.</param>
        /// <param name="InventoryType">InventoryType.</param>
        /// <param name="Ip">Ip.</param>
        /// <param name="ItemId">ItemId.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Owned">Owned.</param>
        /// <param name="Quantity">Quantity.</param>
        /// <param name="Rp">Rp.</param>
        public LolStoreBundleItemDTO(string Description = default(string), long? DiscountedRp = default(long?), string IconUrl = default(string), string InventoryType = default(string), long? Ip = default(long?), int? ItemId = default(int?), string Name = default(string), bool? Owned = default(bool?), int? Quantity = default(int?), long? Rp = default(long?))
        {
            this.Description = Description;
            this.DiscountedRp = DiscountedRp;
            this.IconUrl = IconUrl;
            this.InventoryType = InventoryType;
            this.Ip = Ip;
            this.ItemId = ItemId;
            this.Name = Name;
            this.Owned = Owned;
            this.Quantity = Quantity;
            this.Rp = Rp;
        }
        
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DiscountedRp
        /// </summary>
        [DataMember(Name="discountedRp", EmitDefaultValue=false)]
        public long? DiscountedRp { get; set; }

        /// <summary>
        /// Gets or Sets IconUrl
        /// </summary>
        [DataMember(Name="iconUrl", EmitDefaultValue=false)]
        public string IconUrl { get; set; }

        /// <summary>
        /// Gets or Sets InventoryType
        /// </summary>
        [DataMember(Name="inventoryType", EmitDefaultValue=false)]
        public string InventoryType { get; set; }

        /// <summary>
        /// Gets or Sets Ip
        /// </summary>
        [DataMember(Name="ip", EmitDefaultValue=false)]
        public long? Ip { get; set; }

        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name="itemId", EmitDefaultValue=false)]
        public int? ItemId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Owned
        /// </summary>
        [DataMember(Name="owned", EmitDefaultValue=false)]
        public bool? Owned { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets Rp
        /// </summary>
        [DataMember(Name="rp", EmitDefaultValue=false)]
        public long? Rp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolStoreBundleItemDTO {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DiscountedRp: ").Append(DiscountedRp).Append("\n");
            sb.Append("  IconUrl: ").Append(IconUrl).Append("\n");
            sb.Append("  InventoryType: ").Append(InventoryType).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Owned: ").Append(Owned).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Rp: ").Append(Rp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolStoreBundleItemDTO);
        }

        /// <summary>
        /// Returns true if LolStoreBundleItemDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of LolStoreBundleItemDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolStoreBundleItemDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.DiscountedRp == other.DiscountedRp ||
                    this.DiscountedRp != null &&
                    this.DiscountedRp.Equals(other.DiscountedRp)
                ) && 
                (
                    this.IconUrl == other.IconUrl ||
                    this.IconUrl != null &&
                    this.IconUrl.Equals(other.IconUrl)
                ) && 
                (
                    this.InventoryType == other.InventoryType ||
                    this.InventoryType != null &&
                    this.InventoryType.Equals(other.InventoryType)
                ) && 
                (
                    this.Ip == other.Ip ||
                    this.Ip != null &&
                    this.Ip.Equals(other.Ip)
                ) && 
                (
                    this.ItemId == other.ItemId ||
                    this.ItemId != null &&
                    this.ItemId.Equals(other.ItemId)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Owned == other.Owned ||
                    this.Owned != null &&
                    this.Owned.Equals(other.Owned)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                ) && 
                (
                    this.Rp == other.Rp ||
                    this.Rp != null &&
                    this.Rp.Equals(other.Rp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.DiscountedRp != null)
                    hash = hash * 59 + this.DiscountedRp.GetHashCode();
                if (this.IconUrl != null)
                    hash = hash * 59 + this.IconUrl.GetHashCode();
                if (this.InventoryType != null)
                    hash = hash * 59 + this.InventoryType.GetHashCode();
                if (this.Ip != null)
                    hash = hash * 59 + this.Ip.GetHashCode();
                if (this.ItemId != null)
                    hash = hash * 59 + this.ItemId.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Owned != null)
                    hash = hash * 59 + this.Owned.GetHashCode();
                if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                if (this.Rp != null)
                    hash = hash * 59 + this.Rp.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
