/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolStoreBundled
    /// </summary>
    [DataContract]
    public partial class LolStoreBundled :  IEquatable<LolStoreBundled>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolStoreBundled" /> class.
        /// </summary>
        /// <param name="Flexible">Flexible.</param>
        /// <param name="Items">Items.</param>
        /// <param name="MinimumPrices">MinimumPrices.</param>
        public LolStoreBundled(bool? Flexible = default(bool?), List<LolStoreBundledItem> Items = default(List<LolStoreBundledItem>), List<LolStoreBundledItemCost> MinimumPrices = default(List<LolStoreBundledItemCost>))
        {
            this.Flexible = Flexible;
            this.Items = Items;
            this.MinimumPrices = MinimumPrices;
        }
        
        /// <summary>
        /// Gets or Sets Flexible
        /// </summary>
        [DataMember(Name="flexible", EmitDefaultValue=false)]
        public bool? Flexible { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<LolStoreBundledItem> Items { get; set; }

        /// <summary>
        /// Gets or Sets MinimumPrices
        /// </summary>
        [DataMember(Name="minimumPrices", EmitDefaultValue=false)]
        public List<LolStoreBundledItemCost> MinimumPrices { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolStoreBundled {\n");
            sb.Append("  Flexible: ").Append(Flexible).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  MinimumPrices: ").Append(MinimumPrices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolStoreBundled);
        }

        /// <summary>
        /// Returns true if LolStoreBundled instances are equal
        /// </summary>
        /// <param name="other">Instance of LolStoreBundled to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolStoreBundled other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Flexible == other.Flexible ||
                    this.Flexible != null &&
                    this.Flexible.Equals(other.Flexible)
                ) && 
                (
                    this.Items == other.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(other.Items)
                ) && 
                (
                    this.MinimumPrices == other.MinimumPrices ||
                    this.MinimumPrices != null &&
                    this.MinimumPrices.SequenceEqual(other.MinimumPrices)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Flexible != null)
                    hash = hash * 59 + this.Flexible.GetHashCode();
                if (this.Items != null)
                    hash = hash * 59 + this.Items.GetHashCode();
                if (this.MinimumPrices != null)
                    hash = hash * 59 + this.MinimumPrices.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
