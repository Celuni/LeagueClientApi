/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolStoreCatalogItem
    /// </summary>
    [DataContract]
    public partial class LolStoreCatalogItem :  IEquatable<LolStoreCatalogItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolStoreCatalogItem" /> class.
        /// </summary>
        /// <param name="Active">Active.</param>
        /// <param name="Bundled">Bundled.</param>
        /// <param name="InactiveDate">InactiveDate.</param>
        /// <param name="InventoryType">InventoryType.</param>
        /// <param name="ItemId">ItemId.</param>
        /// <param name="ItemInstanceId">ItemInstanceId.</param>
        /// <param name="ItemRequirements">ItemRequirements.</param>
        /// <param name="MaxQuantity">MaxQuantity.</param>
        /// <param name="Prices">Prices.</param>
        /// <param name="ReleaseDate">ReleaseDate.</param>
        /// <param name="Sale">Sale.</param>
        /// <param name="SubInventoryType">SubInventoryType.</param>
        /// <param name="Tags">Tags.</param>
        public LolStoreCatalogItem(bool? Active = default(bool?), LolStoreBundled Bundled = default(LolStoreBundled), string InactiveDate = default(string), string InventoryType = default(string), int? ItemId = default(int?), string ItemInstanceId = default(string), List<LolStoreItemKey> ItemRequirements = default(List<LolStoreItemKey>), int? MaxQuantity = default(int?), List<LolStoreItemCost> Prices = default(List<LolStoreItemCost>), string ReleaseDate = default(string), LolStoreSale Sale = default(LolStoreSale), string SubInventoryType = default(string), List<string> Tags = default(List<string>))
        {
            this.Active = Active;
            this.Bundled = Bundled;
            this.InactiveDate = InactiveDate;
            this.InventoryType = InventoryType;
            this.ItemId = ItemId;
            this.ItemInstanceId = ItemInstanceId;
            this.ItemRequirements = ItemRequirements;
            this.MaxQuantity = MaxQuantity;
            this.Prices = Prices;
            this.ReleaseDate = ReleaseDate;
            this.Sale = Sale;
            this.SubInventoryType = SubInventoryType;
            this.Tags = Tags;
        }
        
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or Sets Bundled
        /// </summary>
        [DataMember(Name="bundled", EmitDefaultValue=false)]
        public LolStoreBundled Bundled { get; set; }

        /// <summary>
        /// Gets or Sets InactiveDate
        /// </summary>
        [DataMember(Name="inactiveDate", EmitDefaultValue=false)]
        public string InactiveDate { get; set; }

        /// <summary>
        /// Gets or Sets InventoryType
        /// </summary>
        [DataMember(Name="inventoryType", EmitDefaultValue=false)]
        public string InventoryType { get; set; }

        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name="itemId", EmitDefaultValue=false)]
        public int? ItemId { get; set; }

        /// <summary>
        /// Gets or Sets ItemInstanceId
        /// </summary>
        [DataMember(Name="itemInstanceId", EmitDefaultValue=false)]
        public string ItemInstanceId { get; set; }

        /// <summary>
        /// Gets or Sets ItemRequirements
        /// </summary>
        [DataMember(Name="itemRequirements", EmitDefaultValue=false)]
        public List<LolStoreItemKey> ItemRequirements { get; set; }

        /// <summary>
        /// Gets or Sets MaxQuantity
        /// </summary>
        [DataMember(Name="maxQuantity", EmitDefaultValue=false)]
        public int? MaxQuantity { get; set; }

        /// <summary>
        /// Gets or Sets Prices
        /// </summary>
        [DataMember(Name="prices", EmitDefaultValue=false)]
        public List<LolStoreItemCost> Prices { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseDate
        /// </summary>
        [DataMember(Name="releaseDate", EmitDefaultValue=false)]
        public string ReleaseDate { get; set; }

        /// <summary>
        /// Gets or Sets Sale
        /// </summary>
        [DataMember(Name="sale", EmitDefaultValue=false)]
        public LolStoreSale Sale { get; set; }

        /// <summary>
        /// Gets or Sets SubInventoryType
        /// </summary>
        [DataMember(Name="subInventoryType", EmitDefaultValue=false)]
        public string SubInventoryType { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolStoreCatalogItem {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Bundled: ").Append(Bundled).Append("\n");
            sb.Append("  InactiveDate: ").Append(InactiveDate).Append("\n");
            sb.Append("  InventoryType: ").Append(InventoryType).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  ItemInstanceId: ").Append(ItemInstanceId).Append("\n");
            sb.Append("  ItemRequirements: ").Append(ItemRequirements).Append("\n");
            sb.Append("  MaxQuantity: ").Append(MaxQuantity).Append("\n");
            sb.Append("  Prices: ").Append(Prices).Append("\n");
            sb.Append("  ReleaseDate: ").Append(ReleaseDate).Append("\n");
            sb.Append("  Sale: ").Append(Sale).Append("\n");
            sb.Append("  SubInventoryType: ").Append(SubInventoryType).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolStoreCatalogItem);
        }

        /// <summary>
        /// Returns true if LolStoreCatalogItem instances are equal
        /// </summary>
        /// <param name="other">Instance of LolStoreCatalogItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolStoreCatalogItem other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Active == other.Active ||
                    this.Active != null &&
                    this.Active.Equals(other.Active)
                ) && 
                (
                    this.Bundled == other.Bundled ||
                    this.Bundled != null &&
                    this.Bundled.Equals(other.Bundled)
                ) && 
                (
                    this.InactiveDate == other.InactiveDate ||
                    this.InactiveDate != null &&
                    this.InactiveDate.Equals(other.InactiveDate)
                ) && 
                (
                    this.InventoryType == other.InventoryType ||
                    this.InventoryType != null &&
                    this.InventoryType.Equals(other.InventoryType)
                ) && 
                (
                    this.ItemId == other.ItemId ||
                    this.ItemId != null &&
                    this.ItemId.Equals(other.ItemId)
                ) && 
                (
                    this.ItemInstanceId == other.ItemInstanceId ||
                    this.ItemInstanceId != null &&
                    this.ItemInstanceId.Equals(other.ItemInstanceId)
                ) && 
                (
                    this.ItemRequirements == other.ItemRequirements ||
                    this.ItemRequirements != null &&
                    this.ItemRequirements.SequenceEqual(other.ItemRequirements)
                ) && 
                (
                    this.MaxQuantity == other.MaxQuantity ||
                    this.MaxQuantity != null &&
                    this.MaxQuantity.Equals(other.MaxQuantity)
                ) && 
                (
                    this.Prices == other.Prices ||
                    this.Prices != null &&
                    this.Prices.SequenceEqual(other.Prices)
                ) && 
                (
                    this.ReleaseDate == other.ReleaseDate ||
                    this.ReleaseDate != null &&
                    this.ReleaseDate.Equals(other.ReleaseDate)
                ) && 
                (
                    this.Sale == other.Sale ||
                    this.Sale != null &&
                    this.Sale.Equals(other.Sale)
                ) && 
                (
                    this.SubInventoryType == other.SubInventoryType ||
                    this.SubInventoryType != null &&
                    this.SubInventoryType.Equals(other.SubInventoryType)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(other.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Active != null)
                    hash = hash * 59 + this.Active.GetHashCode();
                if (this.Bundled != null)
                    hash = hash * 59 + this.Bundled.GetHashCode();
                if (this.InactiveDate != null)
                    hash = hash * 59 + this.InactiveDate.GetHashCode();
                if (this.InventoryType != null)
                    hash = hash * 59 + this.InventoryType.GetHashCode();
                if (this.ItemId != null)
                    hash = hash * 59 + this.ItemId.GetHashCode();
                if (this.ItemInstanceId != null)
                    hash = hash * 59 + this.ItemInstanceId.GetHashCode();
                if (this.ItemRequirements != null)
                    hash = hash * 59 + this.ItemRequirements.GetHashCode();
                if (this.MaxQuantity != null)
                    hash = hash * 59 + this.MaxQuantity.GetHashCode();
                if (this.Prices != null)
                    hash = hash * 59 + this.Prices.GetHashCode();
                if (this.ReleaseDate != null)
                    hash = hash * 59 + this.ReleaseDate.GetHashCode();
                if (this.Sale != null)
                    hash = hash * 59 + this.Sale.GetHashCode();
                if (this.SubInventoryType != null)
                    hash = hash * 59 + this.SubInventoryType.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
