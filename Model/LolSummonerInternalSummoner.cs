/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolSummonerInternalSummoner
    /// </summary>
    [DataContract]
    public partial class LolSummonerInternalSummoner :  IEquatable<LolSummonerInternalSummoner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolSummonerInternalSummoner" /> class.
        /// </summary>
        /// <param name="AccountId">AccountId.</param>
        /// <param name="AdvancedTutorialFlag">AdvancedTutorialFlag.</param>
        /// <param name="DisplayEloQuestionaireFlag">DisplayEloQuestionaireFlag.</param>
        /// <param name="DisplayName">DisplayName.</param>
        /// <param name="HelpFlag">HelpFlag.</param>
        /// <param name="InternalName">InternalName.</param>
        /// <param name="LastSeasonHighestRank">LastSeasonHighestRank.</param>
        /// <param name="NameChangeFlag">NameChangeFlag.</param>
        /// <param name="ProfileIconId">ProfileIconId.</param>
        /// <param name="SummonerId">SummonerId.</param>
        /// <param name="TutorialFlag">TutorialFlag.</param>
        public LolSummonerInternalSummoner(long? AccountId = default(long?), bool? AdvancedTutorialFlag = default(bool?), bool? DisplayEloQuestionaireFlag = default(bool?), string DisplayName = default(string), bool? HelpFlag = default(bool?), string InternalName = default(string), string LastSeasonHighestRank = default(string), bool? NameChangeFlag = default(bool?), int? ProfileIconId = default(int?), long? SummonerId = default(long?), bool? TutorialFlag = default(bool?))
        {
            this.AccountId = AccountId;
            this.AdvancedTutorialFlag = AdvancedTutorialFlag;
            this.DisplayEloQuestionaireFlag = DisplayEloQuestionaireFlag;
            this.DisplayName = DisplayName;
            this.HelpFlag = HelpFlag;
            this.InternalName = InternalName;
            this.LastSeasonHighestRank = LastSeasonHighestRank;
            this.NameChangeFlag = NameChangeFlag;
            this.ProfileIconId = ProfileIconId;
            this.SummonerId = SummonerId;
            this.TutorialFlag = TutorialFlag;
        }
        
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public long? AccountId { get; set; }

        /// <summary>
        /// Gets or Sets AdvancedTutorialFlag
        /// </summary>
        [DataMember(Name="advancedTutorialFlag", EmitDefaultValue=false)]
        public bool? AdvancedTutorialFlag { get; set; }

        /// <summary>
        /// Gets or Sets DisplayEloQuestionaireFlag
        /// </summary>
        [DataMember(Name="displayEloQuestionaireFlag", EmitDefaultValue=false)]
        public bool? DisplayEloQuestionaireFlag { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets HelpFlag
        /// </summary>
        [DataMember(Name="helpFlag", EmitDefaultValue=false)]
        public bool? HelpFlag { get; set; }

        /// <summary>
        /// Gets or Sets InternalName
        /// </summary>
        [DataMember(Name="internalName", EmitDefaultValue=false)]
        public string InternalName { get; set; }

        /// <summary>
        /// Gets or Sets LastSeasonHighestRank
        /// </summary>
        [DataMember(Name="lastSeasonHighestRank", EmitDefaultValue=false)]
        public string LastSeasonHighestRank { get; set; }

        /// <summary>
        /// Gets or Sets NameChangeFlag
        /// </summary>
        [DataMember(Name="nameChangeFlag", EmitDefaultValue=false)]
        public bool? NameChangeFlag { get; set; }

        /// <summary>
        /// Gets or Sets ProfileIconId
        /// </summary>
        [DataMember(Name="profileIconId", EmitDefaultValue=false)]
        public int? ProfileIconId { get; set; }

        /// <summary>
        /// Gets or Sets SummonerId
        /// </summary>
        [DataMember(Name="summonerId", EmitDefaultValue=false)]
        public long? SummonerId { get; set; }

        /// <summary>
        /// Gets or Sets TutorialFlag
        /// </summary>
        [DataMember(Name="tutorialFlag", EmitDefaultValue=false)]
        public bool? TutorialFlag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolSummonerInternalSummoner {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AdvancedTutorialFlag: ").Append(AdvancedTutorialFlag).Append("\n");
            sb.Append("  DisplayEloQuestionaireFlag: ").Append(DisplayEloQuestionaireFlag).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  HelpFlag: ").Append(HelpFlag).Append("\n");
            sb.Append("  InternalName: ").Append(InternalName).Append("\n");
            sb.Append("  LastSeasonHighestRank: ").Append(LastSeasonHighestRank).Append("\n");
            sb.Append("  NameChangeFlag: ").Append(NameChangeFlag).Append("\n");
            sb.Append("  ProfileIconId: ").Append(ProfileIconId).Append("\n");
            sb.Append("  SummonerId: ").Append(SummonerId).Append("\n");
            sb.Append("  TutorialFlag: ").Append(TutorialFlag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolSummonerInternalSummoner);
        }

        /// <summary>
        /// Returns true if LolSummonerInternalSummoner instances are equal
        /// </summary>
        /// <param name="other">Instance of LolSummonerInternalSummoner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolSummonerInternalSummoner other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.AdvancedTutorialFlag == other.AdvancedTutorialFlag ||
                    this.AdvancedTutorialFlag != null &&
                    this.AdvancedTutorialFlag.Equals(other.AdvancedTutorialFlag)
                ) && 
                (
                    this.DisplayEloQuestionaireFlag == other.DisplayEloQuestionaireFlag ||
                    this.DisplayEloQuestionaireFlag != null &&
                    this.DisplayEloQuestionaireFlag.Equals(other.DisplayEloQuestionaireFlag)
                ) && 
                (
                    this.DisplayName == other.DisplayName ||
                    this.DisplayName != null &&
                    this.DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    this.HelpFlag == other.HelpFlag ||
                    this.HelpFlag != null &&
                    this.HelpFlag.Equals(other.HelpFlag)
                ) && 
                (
                    this.InternalName == other.InternalName ||
                    this.InternalName != null &&
                    this.InternalName.Equals(other.InternalName)
                ) && 
                (
                    this.LastSeasonHighestRank == other.LastSeasonHighestRank ||
                    this.LastSeasonHighestRank != null &&
                    this.LastSeasonHighestRank.Equals(other.LastSeasonHighestRank)
                ) && 
                (
                    this.NameChangeFlag == other.NameChangeFlag ||
                    this.NameChangeFlag != null &&
                    this.NameChangeFlag.Equals(other.NameChangeFlag)
                ) && 
                (
                    this.ProfileIconId == other.ProfileIconId ||
                    this.ProfileIconId != null &&
                    this.ProfileIconId.Equals(other.ProfileIconId)
                ) && 
                (
                    this.SummonerId == other.SummonerId ||
                    this.SummonerId != null &&
                    this.SummonerId.Equals(other.SummonerId)
                ) && 
                (
                    this.TutorialFlag == other.TutorialFlag ||
                    this.TutorialFlag != null &&
                    this.TutorialFlag.Equals(other.TutorialFlag)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.AdvancedTutorialFlag != null)
                    hash = hash * 59 + this.AdvancedTutorialFlag.GetHashCode();
                if (this.DisplayEloQuestionaireFlag != null)
                    hash = hash * 59 + this.DisplayEloQuestionaireFlag.GetHashCode();
                if (this.DisplayName != null)
                    hash = hash * 59 + this.DisplayName.GetHashCode();
                if (this.HelpFlag != null)
                    hash = hash * 59 + this.HelpFlag.GetHashCode();
                if (this.InternalName != null)
                    hash = hash * 59 + this.InternalName.GetHashCode();
                if (this.LastSeasonHighestRank != null)
                    hash = hash * 59 + this.LastSeasonHighestRank.GetHashCode();
                if (this.NameChangeFlag != null)
                    hash = hash * 59 + this.NameChangeFlag.GetHashCode();
                if (this.ProfileIconId != null)
                    hash = hash * 59 + this.ProfileIconId.GetHashCode();
                if (this.SummonerId != null)
                    hash = hash * 59 + this.SummonerId.GetHashCode();
                if (this.TutorialFlag != null)
                    hash = hash * 59 + this.TutorialFlag.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
