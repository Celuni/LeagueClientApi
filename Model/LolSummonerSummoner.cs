/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LolSummonerSummoner
    /// </summary>
    [DataContract]
    public partial class LolSummonerSummoner :  IEquatable<LolSummonerSummoner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LolSummonerSummoner" /> class.
        /// </summary>
        /// <param name="AccountId">AccountId.</param>
        /// <param name="DisplayName">DisplayName.</param>
        /// <param name="InternalName">InternalName.</param>
        /// <param name="LastSeasonHighestRank">LastSeasonHighestRank.</param>
        /// <param name="PercentCompleteForNextLevel">PercentCompleteForNextLevel.</param>
        /// <param name="ProfileIconId">ProfileIconId.</param>
        /// <param name="Puuid">Puuid.</param>
        /// <param name="RerollPoints">RerollPoints.</param>
        /// <param name="SummonerId">SummonerId.</param>
        /// <param name="SummonerLevel">SummonerLevel.</param>
        /// <param name="XpSinceLastLevel">XpSinceLastLevel.</param>
        /// <param name="XpUntilNextLevel">XpUntilNextLevel.</param>
        public LolSummonerSummoner(long? AccountId = default(long?), string DisplayName = default(string), string InternalName = default(string), string LastSeasonHighestRank = default(string), int? PercentCompleteForNextLevel = default(int?), int? ProfileIconId = default(int?), string Puuid = default(string), LolSummonerSummonerRerollPoints RerollPoints = default(LolSummonerSummonerRerollPoints), long? SummonerId = default(long?), int? SummonerLevel = default(int?), long? XpSinceLastLevel = default(long?), long? XpUntilNextLevel = default(long?))
        {
            this.AccountId = AccountId;
            this.DisplayName = DisplayName;
            this.InternalName = InternalName;
            this.LastSeasonHighestRank = LastSeasonHighestRank;
            this.PercentCompleteForNextLevel = PercentCompleteForNextLevel;
            this.ProfileIconId = ProfileIconId;
            this.Puuid = Puuid;
            this.RerollPoints = RerollPoints;
            this.SummonerId = SummonerId;
            this.SummonerLevel = SummonerLevel;
            this.XpSinceLastLevel = XpSinceLastLevel;
            this.XpUntilNextLevel = XpUntilNextLevel;
        }
        
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public long? AccountId { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets InternalName
        /// </summary>
        [DataMember(Name="internalName", EmitDefaultValue=false)]
        public string InternalName { get; set; }

        /// <summary>
        /// Gets or Sets LastSeasonHighestRank
        /// </summary>
        [DataMember(Name="lastSeasonHighestRank", EmitDefaultValue=false)]
        public string LastSeasonHighestRank { get; set; }

        /// <summary>
        /// Gets or Sets PercentCompleteForNextLevel
        /// </summary>
        [DataMember(Name="percentCompleteForNextLevel", EmitDefaultValue=false)]
        public int? PercentCompleteForNextLevel { get; set; }

        /// <summary>
        /// Gets or Sets ProfileIconId
        /// </summary>
        [DataMember(Name="profileIconId", EmitDefaultValue=false)]
        public int? ProfileIconId { get; set; }

        /// <summary>
        /// Gets or Sets Puuid
        /// </summary>
        [DataMember(Name="puuid", EmitDefaultValue=false)]
        public string Puuid { get; set; }

        /// <summary>
        /// Gets or Sets RerollPoints
        /// </summary>
        [DataMember(Name="rerollPoints", EmitDefaultValue=false)]
        public LolSummonerSummonerRerollPoints RerollPoints { get; set; }

        /// <summary>
        /// Gets or Sets SummonerId
        /// </summary>
        [DataMember(Name="summonerId", EmitDefaultValue=false)]
        public long? SummonerId { get; set; }

        /// <summary>
        /// Gets or Sets SummonerLevel
        /// </summary>
        [DataMember(Name="summonerLevel", EmitDefaultValue=false)]
        public int? SummonerLevel { get; set; }

        /// <summary>
        /// Gets or Sets XpSinceLastLevel
        /// </summary>
        [DataMember(Name="xpSinceLastLevel", EmitDefaultValue=false)]
        public long? XpSinceLastLevel { get; set; }

        /// <summary>
        /// Gets or Sets XpUntilNextLevel
        /// </summary>
        [DataMember(Name="xpUntilNextLevel", EmitDefaultValue=false)]
        public long? XpUntilNextLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LolSummonerSummoner {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  InternalName: ").Append(InternalName).Append("\n");
            sb.Append("  LastSeasonHighestRank: ").Append(LastSeasonHighestRank).Append("\n");
            sb.Append("  PercentCompleteForNextLevel: ").Append(PercentCompleteForNextLevel).Append("\n");
            sb.Append("  ProfileIconId: ").Append(ProfileIconId).Append("\n");
            sb.Append("  Puuid: ").Append(Puuid).Append("\n");
            sb.Append("  RerollPoints: ").Append(RerollPoints).Append("\n");
            sb.Append("  SummonerId: ").Append(SummonerId).Append("\n");
            sb.Append("  SummonerLevel: ").Append(SummonerLevel).Append("\n");
            sb.Append("  XpSinceLastLevel: ").Append(XpSinceLastLevel).Append("\n");
            sb.Append("  XpUntilNextLevel: ").Append(XpUntilNextLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LolSummonerSummoner);
        }

        /// <summary>
        /// Returns true if LolSummonerSummoner instances are equal
        /// </summary>
        /// <param name="other">Instance of LolSummonerSummoner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LolSummonerSummoner other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.DisplayName == other.DisplayName ||
                    this.DisplayName != null &&
                    this.DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    this.InternalName == other.InternalName ||
                    this.InternalName != null &&
                    this.InternalName.Equals(other.InternalName)
                ) && 
                (
                    this.LastSeasonHighestRank == other.LastSeasonHighestRank ||
                    this.LastSeasonHighestRank != null &&
                    this.LastSeasonHighestRank.Equals(other.LastSeasonHighestRank)
                ) && 
                (
                    this.PercentCompleteForNextLevel == other.PercentCompleteForNextLevel ||
                    this.PercentCompleteForNextLevel != null &&
                    this.PercentCompleteForNextLevel.Equals(other.PercentCompleteForNextLevel)
                ) && 
                (
                    this.ProfileIconId == other.ProfileIconId ||
                    this.ProfileIconId != null &&
                    this.ProfileIconId.Equals(other.ProfileIconId)
                ) && 
                (
                    this.Puuid == other.Puuid ||
                    this.Puuid != null &&
                    this.Puuid.Equals(other.Puuid)
                ) && 
                (
                    this.RerollPoints == other.RerollPoints ||
                    this.RerollPoints != null &&
                    this.RerollPoints.Equals(other.RerollPoints)
                ) && 
                (
                    this.SummonerId == other.SummonerId ||
                    this.SummonerId != null &&
                    this.SummonerId.Equals(other.SummonerId)
                ) && 
                (
                    this.SummonerLevel == other.SummonerLevel ||
                    this.SummonerLevel != null &&
                    this.SummonerLevel.Equals(other.SummonerLevel)
                ) && 
                (
                    this.XpSinceLastLevel == other.XpSinceLastLevel ||
                    this.XpSinceLastLevel != null &&
                    this.XpSinceLastLevel.Equals(other.XpSinceLastLevel)
                ) && 
                (
                    this.XpUntilNextLevel == other.XpUntilNextLevel ||
                    this.XpUntilNextLevel != null &&
                    this.XpUntilNextLevel.Equals(other.XpUntilNextLevel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.DisplayName != null)
                    hash = hash * 59 + this.DisplayName.GetHashCode();
                if (this.InternalName != null)
                    hash = hash * 59 + this.InternalName.GetHashCode();
                if (this.LastSeasonHighestRank != null)
                    hash = hash * 59 + this.LastSeasonHighestRank.GetHashCode();
                if (this.PercentCompleteForNextLevel != null)
                    hash = hash * 59 + this.PercentCompleteForNextLevel.GetHashCode();
                if (this.ProfileIconId != null)
                    hash = hash * 59 + this.ProfileIconId.GetHashCode();
                if (this.Puuid != null)
                    hash = hash * 59 + this.Puuid.GetHashCode();
                if (this.RerollPoints != null)
                    hash = hash * 59 + this.RerollPoints.GetHashCode();
                if (this.SummonerId != null)
                    hash = hash * 59 + this.SummonerId.GetHashCode();
                if (this.SummonerLevel != null)
                    hash = hash * 59 + this.SummonerLevel.GetHashCode();
                if (this.XpSinceLastLevel != null)
                    hash = hash * 59 + this.XpSinceLastLevel.GetHashCode();
                if (this.XpUntilNextLevel != null)
                    hash = hash * 59 + this.XpUntilNextLevel.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
