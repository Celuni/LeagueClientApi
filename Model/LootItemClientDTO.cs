/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LootItemClientDTO
    /// </summary>
    [DataContract]
    public partial class LootItemClientDTO :  IEquatable<LootItemClientDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LootItemClientDTO" /> class.
        /// </summary>
        /// <param name="Asset">Asset.</param>
        /// <param name="DisplayCategories">DisplayCategories.</param>
        /// <param name="ExpiryTime">ExpiryTime.</param>
        /// <param name="LootName">LootName.</param>
        /// <param name="Rarity">Rarity.</param>
        /// <param name="RentalGames">RentalGames.</param>
        /// <param name="RentalSeconds">RentalSeconds.</param>
        /// <param name="StoreItemId">StoreItemId.</param>
        /// <param name="Tags">Tags.</param>
        /// <param name="Type">Type.</param>
        /// <param name="UpgradeLootName">UpgradeLootName.</param>
        /// <param name="Value">Value.</param>
        public LootItemClientDTO(string Asset = default(string), string DisplayCategories = default(string), long? ExpiryTime = default(long?), string LootName = default(string), string Rarity = default(string), int? RentalGames = default(int?), long? RentalSeconds = default(long?), int? StoreItemId = default(int?), string Tags = default(string), string Type = default(string), string UpgradeLootName = default(string), int? Value = default(int?))
        {
            this.Asset = Asset;
            this.DisplayCategories = DisplayCategories;
            this.ExpiryTime = ExpiryTime;
            this.LootName = LootName;
            this.Rarity = Rarity;
            this.RentalGames = RentalGames;
            this.RentalSeconds = RentalSeconds;
            this.StoreItemId = StoreItemId;
            this.Tags = Tags;
            this.Type = Type;
            this.UpgradeLootName = UpgradeLootName;
            this.Value = Value;
        }
        
        /// <summary>
        /// Gets or Sets Asset
        /// </summary>
        [DataMember(Name="asset", EmitDefaultValue=false)]
        public string Asset { get; set; }

        /// <summary>
        /// Gets or Sets DisplayCategories
        /// </summary>
        [DataMember(Name="displayCategories", EmitDefaultValue=false)]
        public string DisplayCategories { get; set; }

        /// <summary>
        /// Gets or Sets ExpiryTime
        /// </summary>
        [DataMember(Name="expiryTime", EmitDefaultValue=false)]
        public long? ExpiryTime { get; set; }

        /// <summary>
        /// Gets or Sets LootName
        /// </summary>
        [DataMember(Name="lootName", EmitDefaultValue=false)]
        public string LootName { get; set; }

        /// <summary>
        /// Gets or Sets Rarity
        /// </summary>
        [DataMember(Name="rarity", EmitDefaultValue=false)]
        public string Rarity { get; set; }

        /// <summary>
        /// Gets or Sets RentalGames
        /// </summary>
        [DataMember(Name="rentalGames", EmitDefaultValue=false)]
        public int? RentalGames { get; set; }

        /// <summary>
        /// Gets or Sets RentalSeconds
        /// </summary>
        [DataMember(Name="rentalSeconds", EmitDefaultValue=false)]
        public long? RentalSeconds { get; set; }

        /// <summary>
        /// Gets or Sets StoreItemId
        /// </summary>
        [DataMember(Name="storeItemId", EmitDefaultValue=false)]
        public int? StoreItemId { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public string Tags { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets UpgradeLootName
        /// </summary>
        [DataMember(Name="upgradeLootName", EmitDefaultValue=false)]
        public string UpgradeLootName { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public int? Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LootItemClientDTO {\n");
            sb.Append("  Asset: ").Append(Asset).Append("\n");
            sb.Append("  DisplayCategories: ").Append(DisplayCategories).Append("\n");
            sb.Append("  ExpiryTime: ").Append(ExpiryTime).Append("\n");
            sb.Append("  LootName: ").Append(LootName).Append("\n");
            sb.Append("  Rarity: ").Append(Rarity).Append("\n");
            sb.Append("  RentalGames: ").Append(RentalGames).Append("\n");
            sb.Append("  RentalSeconds: ").Append(RentalSeconds).Append("\n");
            sb.Append("  StoreItemId: ").Append(StoreItemId).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpgradeLootName: ").Append(UpgradeLootName).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LootItemClientDTO);
        }

        /// <summary>
        /// Returns true if LootItemClientDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of LootItemClientDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LootItemClientDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Asset == other.Asset ||
                    this.Asset != null &&
                    this.Asset.Equals(other.Asset)
                ) && 
                (
                    this.DisplayCategories == other.DisplayCategories ||
                    this.DisplayCategories != null &&
                    this.DisplayCategories.Equals(other.DisplayCategories)
                ) && 
                (
                    this.ExpiryTime == other.ExpiryTime ||
                    this.ExpiryTime != null &&
                    this.ExpiryTime.Equals(other.ExpiryTime)
                ) && 
                (
                    this.LootName == other.LootName ||
                    this.LootName != null &&
                    this.LootName.Equals(other.LootName)
                ) && 
                (
                    this.Rarity == other.Rarity ||
                    this.Rarity != null &&
                    this.Rarity.Equals(other.Rarity)
                ) && 
                (
                    this.RentalGames == other.RentalGames ||
                    this.RentalGames != null &&
                    this.RentalGames.Equals(other.RentalGames)
                ) && 
                (
                    this.RentalSeconds == other.RentalSeconds ||
                    this.RentalSeconds != null &&
                    this.RentalSeconds.Equals(other.RentalSeconds)
                ) && 
                (
                    this.StoreItemId == other.StoreItemId ||
                    this.StoreItemId != null &&
                    this.StoreItemId.Equals(other.StoreItemId)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.Equals(other.Tags)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.UpgradeLootName == other.UpgradeLootName ||
                    this.UpgradeLootName != null &&
                    this.UpgradeLootName.Equals(other.UpgradeLootName)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Asset != null)
                    hash = hash * 59 + this.Asset.GetHashCode();
                if (this.DisplayCategories != null)
                    hash = hash * 59 + this.DisplayCategories.GetHashCode();
                if (this.ExpiryTime != null)
                    hash = hash * 59 + this.ExpiryTime.GetHashCode();
                if (this.LootName != null)
                    hash = hash * 59 + this.LootName.GetHashCode();
                if (this.Rarity != null)
                    hash = hash * 59 + this.Rarity.GetHashCode();
                if (this.RentalGames != null)
                    hash = hash * 59 + this.RentalGames.GetHashCode();
                if (this.RentalSeconds != null)
                    hash = hash * 59 + this.RentalSeconds.GetHashCode();
                if (this.StoreItemId != null)
                    hash = hash * 59 + this.StoreItemId.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.UpgradeLootName != null)
                    hash = hash * 59 + this.UpgradeLootName.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
