/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LootLcdsLootDescriptionDTO
    /// </summary>
    [DataContract]
    public partial class LootLcdsLootDescriptionDTO :  IEquatable<LootLcdsLootDescriptionDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LootLcdsLootDescriptionDTO" /> class.
        /// </summary>
        /// <param name="ChildLootTableNames">ChildLootTableNames.</param>
        /// <param name="LocalizationLongDescriptionMap">LocalizationLongDescriptionMap.</param>
        /// <param name="LocalizationMap">LocalizationMap.</param>
        /// <param name="LootName">LootName.</param>
        public LootLcdsLootDescriptionDTO(List<string> ChildLootTableNames = default(List<string>), Dictionary<string, string> LocalizationLongDescriptionMap = default(Dictionary<string, string>), Dictionary<string, string> LocalizationMap = default(Dictionary<string, string>), string LootName = default(string))
        {
            this.ChildLootTableNames = ChildLootTableNames;
            this.LocalizationLongDescriptionMap = LocalizationLongDescriptionMap;
            this.LocalizationMap = LocalizationMap;
            this.LootName = LootName;
        }
        
        /// <summary>
        /// Gets or Sets ChildLootTableNames
        /// </summary>
        [DataMember(Name="childLootTableNames", EmitDefaultValue=false)]
        public List<string> ChildLootTableNames { get; set; }

        /// <summary>
        /// Gets or Sets LocalizationLongDescriptionMap
        /// </summary>
        [DataMember(Name="localizationLongDescriptionMap", EmitDefaultValue=false)]
        public Dictionary<string, string> LocalizationLongDescriptionMap { get; set; }

        /// <summary>
        /// Gets or Sets LocalizationMap
        /// </summary>
        [DataMember(Name="localizationMap", EmitDefaultValue=false)]
        public Dictionary<string, string> LocalizationMap { get; set; }

        /// <summary>
        /// Gets or Sets LootName
        /// </summary>
        [DataMember(Name="lootName", EmitDefaultValue=false)]
        public string LootName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LootLcdsLootDescriptionDTO {\n");
            sb.Append("  ChildLootTableNames: ").Append(ChildLootTableNames).Append("\n");
            sb.Append("  LocalizationLongDescriptionMap: ").Append(LocalizationLongDescriptionMap).Append("\n");
            sb.Append("  LocalizationMap: ").Append(LocalizationMap).Append("\n");
            sb.Append("  LootName: ").Append(LootName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LootLcdsLootDescriptionDTO);
        }

        /// <summary>
        /// Returns true if LootLcdsLootDescriptionDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of LootLcdsLootDescriptionDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LootLcdsLootDescriptionDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ChildLootTableNames == other.ChildLootTableNames ||
                    this.ChildLootTableNames != null &&
                    this.ChildLootTableNames.SequenceEqual(other.ChildLootTableNames)
                ) && 
                (
                    this.LocalizationLongDescriptionMap == other.LocalizationLongDescriptionMap ||
                    this.LocalizationLongDescriptionMap != null &&
                    this.LocalizationLongDescriptionMap.SequenceEqual(other.LocalizationLongDescriptionMap)
                ) && 
                (
                    this.LocalizationMap == other.LocalizationMap ||
                    this.LocalizationMap != null &&
                    this.LocalizationMap.SequenceEqual(other.LocalizationMap)
                ) && 
                (
                    this.LootName == other.LootName ||
                    this.LootName != null &&
                    this.LootName.Equals(other.LootName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ChildLootTableNames != null)
                    hash = hash * 59 + this.ChildLootTableNames.GetHashCode();
                if (this.LocalizationLongDescriptionMap != null)
                    hash = hash * 59 + this.LocalizationLongDescriptionMap.GetHashCode();
                if (this.LocalizationMap != null)
                    hash = hash * 59 + this.LocalizationMap.GetHashCode();
                if (this.LootName != null)
                    hash = hash * 59 + this.LootName.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
