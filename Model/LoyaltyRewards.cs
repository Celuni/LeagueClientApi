/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// LoyaltyRewards
    /// </summary>
    [DataContract]
    public partial class LoyaltyRewards :  IEquatable<LoyaltyRewards>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyRewards" /> class.
        /// </summary>
        /// <param name="FreeRewardedChampionsCount">FreeRewardedChampionsCount.</param>
        /// <param name="FreeRewardedSkinsCount">FreeRewardedSkinsCount.</param>
        /// <param name="IpBoost">IpBoost.</param>
        /// <param name="XpBoost">XpBoost.</param>
        public LoyaltyRewards(int? FreeRewardedChampionsCount = default(int?), int? FreeRewardedSkinsCount = default(int?), int? IpBoost = default(int?), int? XpBoost = default(int?))
        {
            this.FreeRewardedChampionsCount = FreeRewardedChampionsCount;
            this.FreeRewardedSkinsCount = FreeRewardedSkinsCount;
            this.IpBoost = IpBoost;
            this.XpBoost = XpBoost;
        }
        
        /// <summary>
        /// Gets or Sets FreeRewardedChampionsCount
        /// </summary>
        [DataMember(Name="freeRewardedChampionsCount", EmitDefaultValue=false)]
        public int? FreeRewardedChampionsCount { get; set; }

        /// <summary>
        /// Gets or Sets FreeRewardedSkinsCount
        /// </summary>
        [DataMember(Name="freeRewardedSkinsCount", EmitDefaultValue=false)]
        public int? FreeRewardedSkinsCount { get; set; }

        /// <summary>
        /// Gets or Sets IpBoost
        /// </summary>
        [DataMember(Name="ipBoost", EmitDefaultValue=false)]
        public int? IpBoost { get; set; }

        /// <summary>
        /// Gets or Sets XpBoost
        /// </summary>
        [DataMember(Name="xpBoost", EmitDefaultValue=false)]
        public int? XpBoost { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoyaltyRewards {\n");
            sb.Append("  FreeRewardedChampionsCount: ").Append(FreeRewardedChampionsCount).Append("\n");
            sb.Append("  FreeRewardedSkinsCount: ").Append(FreeRewardedSkinsCount).Append("\n");
            sb.Append("  IpBoost: ").Append(IpBoost).Append("\n");
            sb.Append("  XpBoost: ").Append(XpBoost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LoyaltyRewards);
        }

        /// <summary>
        /// Returns true if LoyaltyRewards instances are equal
        /// </summary>
        /// <param name="other">Instance of LoyaltyRewards to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoyaltyRewards other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FreeRewardedChampionsCount == other.FreeRewardedChampionsCount ||
                    this.FreeRewardedChampionsCount != null &&
                    this.FreeRewardedChampionsCount.Equals(other.FreeRewardedChampionsCount)
                ) && 
                (
                    this.FreeRewardedSkinsCount == other.FreeRewardedSkinsCount ||
                    this.FreeRewardedSkinsCount != null &&
                    this.FreeRewardedSkinsCount.Equals(other.FreeRewardedSkinsCount)
                ) && 
                (
                    this.IpBoost == other.IpBoost ||
                    this.IpBoost != null &&
                    this.IpBoost.Equals(other.IpBoost)
                ) && 
                (
                    this.XpBoost == other.XpBoost ||
                    this.XpBoost != null &&
                    this.XpBoost.Equals(other.XpBoost)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FreeRewardedChampionsCount != null)
                    hash = hash * 59 + this.FreeRewardedChampionsCount.GetHashCode();
                if (this.FreeRewardedSkinsCount != null)
                    hash = hash * 59 + this.FreeRewardedSkinsCount.GetHashCode();
                if (this.IpBoost != null)
                    hash = hash * 59 + this.IpBoost.GetHashCode();
                if (this.XpBoost != null)
                    hash = hash * 59 + this.XpBoost.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
