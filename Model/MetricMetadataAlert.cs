/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// MetricMetadataAlert
    /// </summary>
    [DataContract]
    public partial class MetricMetadataAlert :  IEquatable<MetricMetadataAlert>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MetricMetadataAlert" /> class.
        /// </summary>
        /// <param name="Description">Description.</param>
        /// <param name="Info">Info.</param>
        /// <param name="Level">Level.</param>
        /// <param name="Max">Max.</param>
        /// <param name="Min">Min.</param>
        /// <param name="Notify">Notify.</param>
        /// <param name="PrettyName">PrettyName.</param>
        public MetricMetadataAlert(string Description = default(string), string Info = default(string), string Level = default(string), double? Max = default(double?), double? Min = default(double?), MetricMetadataNotify Notify = default(MetricMetadataNotify), string PrettyName = default(string))
        {
            this.Description = Description;
            this.Info = Info;
            this.Level = Level;
            this.Max = Max;
            this.Min = Min;
            this.Notify = Notify;
            this.PrettyName = PrettyName;
        }
        
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Info
        /// </summary>
        [DataMember(Name="info", EmitDefaultValue=false)]
        public string Info { get; set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name="level", EmitDefaultValue=false)]
        public string Level { get; set; }

        /// <summary>
        /// Gets or Sets Max
        /// </summary>
        [DataMember(Name="max", EmitDefaultValue=false)]
        public double? Max { get; set; }

        /// <summary>
        /// Gets or Sets Min
        /// </summary>
        [DataMember(Name="min", EmitDefaultValue=false)]
        public double? Min { get; set; }

        /// <summary>
        /// Gets or Sets Notify
        /// </summary>
        [DataMember(Name="notify", EmitDefaultValue=false)]
        public MetricMetadataNotify Notify { get; set; }

        /// <summary>
        /// Gets or Sets PrettyName
        /// </summary>
        [DataMember(Name="pretty_name", EmitDefaultValue=false)]
        public string PrettyName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MetricMetadataAlert {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("  Min: ").Append(Min).Append("\n");
            sb.Append("  Notify: ").Append(Notify).Append("\n");
            sb.Append("  PrettyName: ").Append(PrettyName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as MetricMetadataAlert);
        }

        /// <summary>
        /// Returns true if MetricMetadataAlert instances are equal
        /// </summary>
        /// <param name="other">Instance of MetricMetadataAlert to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetricMetadataAlert other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Info == other.Info ||
                    this.Info != null &&
                    this.Info.Equals(other.Info)
                ) && 
                (
                    this.Level == other.Level ||
                    this.Level != null &&
                    this.Level.Equals(other.Level)
                ) && 
                (
                    this.Max == other.Max ||
                    this.Max != null &&
                    this.Max.Equals(other.Max)
                ) && 
                (
                    this.Min == other.Min ||
                    this.Min != null &&
                    this.Min.Equals(other.Min)
                ) && 
                (
                    this.Notify == other.Notify ||
                    this.Notify != null &&
                    this.Notify.Equals(other.Notify)
                ) && 
                (
                    this.PrettyName == other.PrettyName ||
                    this.PrettyName != null &&
                    this.PrettyName.Equals(other.PrettyName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Info != null)
                    hash = hash * 59 + this.Info.GetHashCode();
                if (this.Level != null)
                    hash = hash * 59 + this.Level.GetHashCode();
                if (this.Max != null)
                    hash = hash * 59 + this.Max.GetHashCode();
                if (this.Min != null)
                    hash = hash * 59 + this.Min.GetHashCode();
                if (this.Notify != null)
                    hash = hash * 59 + this.Notify.GetHashCode();
                if (this.PrettyName != null)
                    hash = hash * 59 + this.PrettyName.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
