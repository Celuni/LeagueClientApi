/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// NetworkTestingDynamicConfig
    /// </summary>
    [DataContract]
    public partial class NetworkTestingDynamicConfig :  IEquatable<NetworkTestingDynamicConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkTestingDynamicConfig" /> class.
        /// </summary>
        /// <param name="IPv4OptionsProbability">IPv4OptionsProbability.</param>
        /// <param name="IPv4OptionsProbeCount">IPv4OptionsProbeCount.</param>
        /// <param name="IPv4OptionsProbePort">IPv4OptionsProbePort.</param>
        /// <param name="IPv4OptionsProbeServers">IPv4OptionsProbeServers.</param>
        /// <param name="IPv6SupportProbability">IPv6SupportProbability.</param>
        /// <param name="IPv6SupportProbeCount">IPv6SupportProbeCount.</param>
        /// <param name="IPv6SupportProbePort">IPv6SupportProbePort.</param>
        /// <param name="IPv6SupportProbeServers">IPv6SupportProbeServers.</param>
        public NetworkTestingDynamicConfig(double? IPv4OptionsProbability = default(double?), int? IPv4OptionsProbeCount = default(int?), int? IPv4OptionsProbePort = default(int?), string IPv4OptionsProbeServers = default(string), double? IPv6SupportProbability = default(double?), int? IPv6SupportProbeCount = default(int?), int? IPv6SupportProbePort = default(int?), string IPv6SupportProbeServers = default(string))
        {
            this.IPv4OptionsProbability = IPv4OptionsProbability;
            this.IPv4OptionsProbeCount = IPv4OptionsProbeCount;
            this.IPv4OptionsProbePort = IPv4OptionsProbePort;
            this.IPv4OptionsProbeServers = IPv4OptionsProbeServers;
            this.IPv6SupportProbability = IPv6SupportProbability;
            this.IPv6SupportProbeCount = IPv6SupportProbeCount;
            this.IPv6SupportProbePort = IPv6SupportProbePort;
            this.IPv6SupportProbeServers = IPv6SupportProbeServers;
        }
        
        /// <summary>
        /// Gets or Sets IPv4OptionsProbability
        /// </summary>
        [DataMember(Name="IPv4OptionsProbability", EmitDefaultValue=false)]
        public double? IPv4OptionsProbability { get; set; }

        /// <summary>
        /// Gets or Sets IPv4OptionsProbeCount
        /// </summary>
        [DataMember(Name="IPv4OptionsProbeCount", EmitDefaultValue=false)]
        public int? IPv4OptionsProbeCount { get; set; }

        /// <summary>
        /// Gets or Sets IPv4OptionsProbePort
        /// </summary>
        [DataMember(Name="IPv4OptionsProbePort", EmitDefaultValue=false)]
        public int? IPv4OptionsProbePort { get; set; }

        /// <summary>
        /// Gets or Sets IPv4OptionsProbeServers
        /// </summary>
        [DataMember(Name="IPv4OptionsProbeServers", EmitDefaultValue=false)]
        public string IPv4OptionsProbeServers { get; set; }

        /// <summary>
        /// Gets or Sets IPv6SupportProbability
        /// </summary>
        [DataMember(Name="IPv6SupportProbability", EmitDefaultValue=false)]
        public double? IPv6SupportProbability { get; set; }

        /// <summary>
        /// Gets or Sets IPv6SupportProbeCount
        /// </summary>
        [DataMember(Name="IPv6SupportProbeCount", EmitDefaultValue=false)]
        public int? IPv6SupportProbeCount { get; set; }

        /// <summary>
        /// Gets or Sets IPv6SupportProbePort
        /// </summary>
        [DataMember(Name="IPv6SupportProbePort", EmitDefaultValue=false)]
        public int? IPv6SupportProbePort { get; set; }

        /// <summary>
        /// Gets or Sets IPv6SupportProbeServers
        /// </summary>
        [DataMember(Name="IPv6SupportProbeServers", EmitDefaultValue=false)]
        public string IPv6SupportProbeServers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NetworkTestingDynamicConfig {\n");
            sb.Append("  IPv4OptionsProbability: ").Append(IPv4OptionsProbability).Append("\n");
            sb.Append("  IPv4OptionsProbeCount: ").Append(IPv4OptionsProbeCount).Append("\n");
            sb.Append("  IPv4OptionsProbePort: ").Append(IPv4OptionsProbePort).Append("\n");
            sb.Append("  IPv4OptionsProbeServers: ").Append(IPv4OptionsProbeServers).Append("\n");
            sb.Append("  IPv6SupportProbability: ").Append(IPv6SupportProbability).Append("\n");
            sb.Append("  IPv6SupportProbeCount: ").Append(IPv6SupportProbeCount).Append("\n");
            sb.Append("  IPv6SupportProbePort: ").Append(IPv6SupportProbePort).Append("\n");
            sb.Append("  IPv6SupportProbeServers: ").Append(IPv6SupportProbeServers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as NetworkTestingDynamicConfig);
        }

        /// <summary>
        /// Returns true if NetworkTestingDynamicConfig instances are equal
        /// </summary>
        /// <param name="other">Instance of NetworkTestingDynamicConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NetworkTestingDynamicConfig other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.IPv4OptionsProbability == other.IPv4OptionsProbability ||
                    this.IPv4OptionsProbability != null &&
                    this.IPv4OptionsProbability.Equals(other.IPv4OptionsProbability)
                ) && 
                (
                    this.IPv4OptionsProbeCount == other.IPv4OptionsProbeCount ||
                    this.IPv4OptionsProbeCount != null &&
                    this.IPv4OptionsProbeCount.Equals(other.IPv4OptionsProbeCount)
                ) && 
                (
                    this.IPv4OptionsProbePort == other.IPv4OptionsProbePort ||
                    this.IPv4OptionsProbePort != null &&
                    this.IPv4OptionsProbePort.Equals(other.IPv4OptionsProbePort)
                ) && 
                (
                    this.IPv4OptionsProbeServers == other.IPv4OptionsProbeServers ||
                    this.IPv4OptionsProbeServers != null &&
                    this.IPv4OptionsProbeServers.Equals(other.IPv4OptionsProbeServers)
                ) && 
                (
                    this.IPv6SupportProbability == other.IPv6SupportProbability ||
                    this.IPv6SupportProbability != null &&
                    this.IPv6SupportProbability.Equals(other.IPv6SupportProbability)
                ) && 
                (
                    this.IPv6SupportProbeCount == other.IPv6SupportProbeCount ||
                    this.IPv6SupportProbeCount != null &&
                    this.IPv6SupportProbeCount.Equals(other.IPv6SupportProbeCount)
                ) && 
                (
                    this.IPv6SupportProbePort == other.IPv6SupportProbePort ||
                    this.IPv6SupportProbePort != null &&
                    this.IPv6SupportProbePort.Equals(other.IPv6SupportProbePort)
                ) && 
                (
                    this.IPv6SupportProbeServers == other.IPv6SupportProbeServers ||
                    this.IPv6SupportProbeServers != null &&
                    this.IPv6SupportProbeServers.Equals(other.IPv6SupportProbeServers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.IPv4OptionsProbability != null)
                    hash = hash * 59 + this.IPv4OptionsProbability.GetHashCode();
                if (this.IPv4OptionsProbeCount != null)
                    hash = hash * 59 + this.IPv4OptionsProbeCount.GetHashCode();
                if (this.IPv4OptionsProbePort != null)
                    hash = hash * 59 + this.IPv4OptionsProbePort.GetHashCode();
                if (this.IPv4OptionsProbeServers != null)
                    hash = hash * 59 + this.IPv4OptionsProbeServers.GetHashCode();
                if (this.IPv6SupportProbability != null)
                    hash = hash * 59 + this.IPv6SupportProbability.GetHashCode();
                if (this.IPv6SupportProbeCount != null)
                    hash = hash * 59 + this.IPv6SupportProbeCount.GetHashCode();
                if (this.IPv6SupportProbePort != null)
                    hash = hash * 59 + this.IPv6SupportProbePort.GetHashCode();
                if (this.IPv6SupportProbeServers != null)
                    hash = hash * 59 + this.IPv6SupportProbeServers.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
