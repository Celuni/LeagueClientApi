/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// PatcherComponentActionProgress
    /// </summary>
    [DataContract]
    public partial class PatcherComponentActionProgress :  IEquatable<PatcherComponentActionProgress>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatcherComponentActionProgress" /> class.
        /// </summary>
        /// <param name="CurrentItem">CurrentItem.</param>
        /// <param name="Network">Network.</param>
        /// <param name="PrimaryWork">PrimaryWork.</param>
        /// <param name="Total">Total.</param>
        public PatcherComponentActionProgress(string CurrentItem = default(string), PatcherComponentStateProgress Network = default(PatcherComponentStateProgress), PatcherComponentStateWorkType PrimaryWork = default(PatcherComponentStateWorkType), PatcherComponentStateProgress Total = default(PatcherComponentStateProgress))
        {
            this.CurrentItem = CurrentItem;
            this.Network = Network;
            this.PrimaryWork = PrimaryWork;
            this.Total = Total;
        }
        
        /// <summary>
        /// Gets or Sets CurrentItem
        /// </summary>
        [DataMember(Name="currentItem", EmitDefaultValue=false)]
        public string CurrentItem { get; set; }

        /// <summary>
        /// Gets or Sets Network
        /// </summary>
        [DataMember(Name="network", EmitDefaultValue=false)]
        public PatcherComponentStateProgress Network { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryWork
        /// </summary>
        [DataMember(Name="primaryWork", EmitDefaultValue=false)]
        public PatcherComponentStateWorkType PrimaryWork { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public PatcherComponentStateProgress Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PatcherComponentActionProgress {\n");
            sb.Append("  CurrentItem: ").Append(CurrentItem).Append("\n");
            sb.Append("  Network: ").Append(Network).Append("\n");
            sb.Append("  PrimaryWork: ").Append(PrimaryWork).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PatcherComponentActionProgress);
        }

        /// <summary>
        /// Returns true if PatcherComponentActionProgress instances are equal
        /// </summary>
        /// <param name="other">Instance of PatcherComponentActionProgress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PatcherComponentActionProgress other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CurrentItem == other.CurrentItem ||
                    this.CurrentItem != null &&
                    this.CurrentItem.Equals(other.CurrentItem)
                ) && 
                (
                    this.Network == other.Network ||
                    this.Network != null &&
                    this.Network.Equals(other.Network)
                ) && 
                (
                    this.PrimaryWork == other.PrimaryWork ||
                    this.PrimaryWork != null &&
                    this.PrimaryWork.Equals(other.PrimaryWork)
                ) && 
                (
                    this.Total == other.Total ||
                    this.Total != null &&
                    this.Total.Equals(other.Total)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CurrentItem != null)
                    hash = hash * 59 + this.CurrentItem.GetHashCode();
                if (this.Network != null)
                    hash = hash * 59 + this.Network.GetHashCode();
                if (this.PrimaryWork != null)
                    hash = hash * 59 + this.PrimaryWork.GetHashCode();
                if (this.Total != null)
                    hash = hash * 59 + this.Total.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
