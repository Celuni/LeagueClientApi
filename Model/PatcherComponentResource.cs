/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// PatcherComponentResource
    /// </summary>
    [DataContract]
    public partial class PatcherComponentResource :  IEquatable<PatcherComponentResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatcherComponentResource" /> class.
        /// </summary>
        /// <param name="CopyToSolution">CopyToSolution.</param>
        /// <param name="Headers">Headers.</param>
        /// <param name="History">History.</param>
        /// <param name="Hostname">Hostname.</param>
        /// <param name="Id">Id.</param>
        /// <param name="InstallDir">InstallDir.</param>
        /// <param name="Locale">Locale.</param>
        /// <param name="Region">Region.</param>
        /// <param name="RemotePath">RemotePath.</param>
        /// <param name="Type">Type.</param>
        /// <param name="UseTls">UseTls.</param>
        public PatcherComponentResource(bool? CopyToSolution = default(bool?), List<PatcherHeaderEntry> Headers = default(List<PatcherHeaderEntry>), PatcherComponentResourceHistory History = default(PatcherComponentResourceHistory), string Hostname = default(string), string Id = default(string), string InstallDir = default(string), string Locale = default(string), string Region = default(string), string RemotePath = default(string), PatcherComponentResourceType Type = default(PatcherComponentResourceType), bool? UseTls = default(bool?))
        {
            this.CopyToSolution = CopyToSolution;
            this.Headers = Headers;
            this.History = History;
            this.Hostname = Hostname;
            this.Id = Id;
            this.InstallDir = InstallDir;
            this.Locale = Locale;
            this.Region = Region;
            this.RemotePath = RemotePath;
            this.Type = Type;
            this.UseTls = UseTls;
        }
        
        /// <summary>
        /// Gets or Sets CopyToSolution
        /// </summary>
        [DataMember(Name="copy_to_solution", EmitDefaultValue=false)]
        public bool? CopyToSolution { get; set; }

        /// <summary>
        /// Gets or Sets Headers
        /// </summary>
        [DataMember(Name="headers", EmitDefaultValue=false)]
        public List<PatcherHeaderEntry> Headers { get; set; }

        /// <summary>
        /// Gets or Sets History
        /// </summary>
        [DataMember(Name="history", EmitDefaultValue=false)]
        public PatcherComponentResourceHistory History { get; set; }

        /// <summary>
        /// Gets or Sets Hostname
        /// </summary>
        [DataMember(Name="hostname", EmitDefaultValue=false)]
        public string Hostname { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets InstallDir
        /// </summary>
        [DataMember(Name="install_dir", EmitDefaultValue=false)]
        public string InstallDir { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public string Region { get; set; }

        /// <summary>
        /// Gets or Sets RemotePath
        /// </summary>
        [DataMember(Name="remote_path", EmitDefaultValue=false)]
        public string RemotePath { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public PatcherComponentResourceType Type { get; set; }

        /// <summary>
        /// Gets or Sets UseTls
        /// </summary>
        [DataMember(Name="use_tls", EmitDefaultValue=false)]
        public bool? UseTls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PatcherComponentResource {\n");
            sb.Append("  CopyToSolution: ").Append(CopyToSolution).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  History: ").Append(History).Append("\n");
            sb.Append("  Hostname: ").Append(Hostname).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InstallDir: ").Append(InstallDir).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  RemotePath: ").Append(RemotePath).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UseTls: ").Append(UseTls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PatcherComponentResource);
        }

        /// <summary>
        /// Returns true if PatcherComponentResource instances are equal
        /// </summary>
        /// <param name="other">Instance of PatcherComponentResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PatcherComponentResource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CopyToSolution == other.CopyToSolution ||
                    this.CopyToSolution != null &&
                    this.CopyToSolution.Equals(other.CopyToSolution)
                ) && 
                (
                    this.Headers == other.Headers ||
                    this.Headers != null &&
                    this.Headers.SequenceEqual(other.Headers)
                ) && 
                (
                    this.History == other.History ||
                    this.History != null &&
                    this.History.Equals(other.History)
                ) && 
                (
                    this.Hostname == other.Hostname ||
                    this.Hostname != null &&
                    this.Hostname.Equals(other.Hostname)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.InstallDir == other.InstallDir ||
                    this.InstallDir != null &&
                    this.InstallDir.Equals(other.InstallDir)
                ) && 
                (
                    this.Locale == other.Locale ||
                    this.Locale != null &&
                    this.Locale.Equals(other.Locale)
                ) && 
                (
                    this.Region == other.Region ||
                    this.Region != null &&
                    this.Region.Equals(other.Region)
                ) && 
                (
                    this.RemotePath == other.RemotePath ||
                    this.RemotePath != null &&
                    this.RemotePath.Equals(other.RemotePath)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.UseTls == other.UseTls ||
                    this.UseTls != null &&
                    this.UseTls.Equals(other.UseTls)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CopyToSolution != null)
                    hash = hash * 59 + this.CopyToSolution.GetHashCode();
                if (this.Headers != null)
                    hash = hash * 59 + this.Headers.GetHashCode();
                if (this.History != null)
                    hash = hash * 59 + this.History.GetHashCode();
                if (this.Hostname != null)
                    hash = hash * 59 + this.Hostname.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.InstallDir != null)
                    hash = hash * 59 + this.InstallDir.GetHashCode();
                if (this.Locale != null)
                    hash = hash * 59 + this.Locale.GetHashCode();
                if (this.Region != null)
                    hash = hash * 59 + this.Region.GetHashCode();
                if (this.RemotePath != null)
                    hash = hash * 59 + this.RemotePath.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.UseTls != null)
                    hash = hash * 59 + this.UseTls.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
