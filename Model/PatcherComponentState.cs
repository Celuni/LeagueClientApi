/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// PatcherComponentState
    /// </summary>
    [DataContract]
    public partial class PatcherComponentState :  IEquatable<PatcherComponentState>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatcherComponentState" /> class.
        /// </summary>
        /// <param name="Action">Action.</param>
        /// <param name="Id">Id.</param>
        /// <param name="IsCorrupted">IsCorrupted.</param>
        /// <param name="IsUpToDate">IsUpToDate.</param>
        /// <param name="IsUpdateAvailable">IsUpdateAvailable.</param>
        /// <param name="Progress">Progress.</param>
        /// <param name="TimeOfLastUpToDateCheckISO8601">TimeOfLastUpToDateCheckISO8601.</param>
        public PatcherComponentState(PatcherComponentStateAction Action = default(PatcherComponentStateAction), string Id = default(string), bool? IsCorrupted = default(bool?), bool? IsUpToDate = default(bool?), bool? IsUpdateAvailable = default(bool?), PatcherComponentActionProgress Progress = default(PatcherComponentActionProgress), string TimeOfLastUpToDateCheckISO8601 = default(string))
        {
            this.Action = Action;
            this.Id = Id;
            this.IsCorrupted = IsCorrupted;
            this.IsUpToDate = IsUpToDate;
            this.IsUpdateAvailable = IsUpdateAvailable;
            this.Progress = Progress;
            this.TimeOfLastUpToDateCheckISO8601 = TimeOfLastUpToDateCheckISO8601;
        }
        
        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public PatcherComponentStateAction Action { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsCorrupted
        /// </summary>
        [DataMember(Name="isCorrupted", EmitDefaultValue=false)]
        public bool? IsCorrupted { get; set; }

        /// <summary>
        /// Gets or Sets IsUpToDate
        /// </summary>
        [DataMember(Name="isUpToDate", EmitDefaultValue=false)]
        public bool? IsUpToDate { get; set; }

        /// <summary>
        /// Gets or Sets IsUpdateAvailable
        /// </summary>
        [DataMember(Name="isUpdateAvailable", EmitDefaultValue=false)]
        public bool? IsUpdateAvailable { get; set; }

        /// <summary>
        /// Gets or Sets Progress
        /// </summary>
        [DataMember(Name="progress", EmitDefaultValue=false)]
        public PatcherComponentActionProgress Progress { get; set; }

        /// <summary>
        /// Gets or Sets TimeOfLastUpToDateCheckISO8601
        /// </summary>
        [DataMember(Name="timeOfLastUpToDateCheckISO8601", EmitDefaultValue=false)]
        public string TimeOfLastUpToDateCheckISO8601 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PatcherComponentState {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsCorrupted: ").Append(IsCorrupted).Append("\n");
            sb.Append("  IsUpToDate: ").Append(IsUpToDate).Append("\n");
            sb.Append("  IsUpdateAvailable: ").Append(IsUpdateAvailable).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  TimeOfLastUpToDateCheckISO8601: ").Append(TimeOfLastUpToDateCheckISO8601).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PatcherComponentState);
        }

        /// <summary>
        /// Returns true if PatcherComponentState instances are equal
        /// </summary>
        /// <param name="other">Instance of PatcherComponentState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PatcherComponentState other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Action == other.Action ||
                    this.Action != null &&
                    this.Action.Equals(other.Action)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.IsCorrupted == other.IsCorrupted ||
                    this.IsCorrupted != null &&
                    this.IsCorrupted.Equals(other.IsCorrupted)
                ) && 
                (
                    this.IsUpToDate == other.IsUpToDate ||
                    this.IsUpToDate != null &&
                    this.IsUpToDate.Equals(other.IsUpToDate)
                ) && 
                (
                    this.IsUpdateAvailable == other.IsUpdateAvailable ||
                    this.IsUpdateAvailable != null &&
                    this.IsUpdateAvailable.Equals(other.IsUpdateAvailable)
                ) && 
                (
                    this.Progress == other.Progress ||
                    this.Progress != null &&
                    this.Progress.Equals(other.Progress)
                ) && 
                (
                    this.TimeOfLastUpToDateCheckISO8601 == other.TimeOfLastUpToDateCheckISO8601 ||
                    this.TimeOfLastUpToDateCheckISO8601 != null &&
                    this.TimeOfLastUpToDateCheckISO8601.Equals(other.TimeOfLastUpToDateCheckISO8601)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Action != null)
                    hash = hash * 59 + this.Action.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.IsCorrupted != null)
                    hash = hash * 59 + this.IsCorrupted.GetHashCode();
                if (this.IsUpToDate != null)
                    hash = hash * 59 + this.IsUpToDate.GetHashCode();
                if (this.IsUpdateAvailable != null)
                    hash = hash * 59 + this.IsUpdateAvailable.GetHashCode();
                if (this.Progress != null)
                    hash = hash * 59 + this.Progress.GetHashCode();
                if (this.TimeOfLastUpToDateCheckISO8601 != null)
                    hash = hash * 59 + this.TimeOfLastUpToDateCheckISO8601.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
