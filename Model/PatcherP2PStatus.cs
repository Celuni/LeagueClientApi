/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// PatcherP2PStatus
    /// </summary>
    [DataContract]
    public partial class PatcherP2PStatus :  IEquatable<PatcherP2PStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatcherP2PStatus" /> class.
        /// </summary>
        /// <param name="IsAllowedByUser">IsAllowedByUser.</param>
        /// <param name="IsEnabledForPatchline">IsEnabledForPatchline.</param>
        /// <param name="RequiresRestart">RequiresRestart.</param>
        public PatcherP2PStatus(bool? IsAllowedByUser = default(bool?), bool? IsEnabledForPatchline = default(bool?), bool? RequiresRestart = default(bool?))
        {
            this.IsAllowedByUser = IsAllowedByUser;
            this.IsEnabledForPatchline = IsEnabledForPatchline;
            this.RequiresRestart = RequiresRestart;
        }
        
        /// <summary>
        /// Gets or Sets IsAllowedByUser
        /// </summary>
        [DataMember(Name="isAllowedByUser", EmitDefaultValue=false)]
        public bool? IsAllowedByUser { get; set; }

        /// <summary>
        /// Gets or Sets IsEnabledForPatchline
        /// </summary>
        [DataMember(Name="isEnabledForPatchline", EmitDefaultValue=false)]
        public bool? IsEnabledForPatchline { get; set; }

        /// <summary>
        /// Gets or Sets RequiresRestart
        /// </summary>
        [DataMember(Name="requiresRestart", EmitDefaultValue=false)]
        public bool? RequiresRestart { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PatcherP2PStatus {\n");
            sb.Append("  IsAllowedByUser: ").Append(IsAllowedByUser).Append("\n");
            sb.Append("  IsEnabledForPatchline: ").Append(IsEnabledForPatchline).Append("\n");
            sb.Append("  RequiresRestart: ").Append(RequiresRestart).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PatcherP2PStatus);
        }

        /// <summary>
        /// Returns true if PatcherP2PStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of PatcherP2PStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PatcherP2PStatus other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.IsAllowedByUser == other.IsAllowedByUser ||
                    this.IsAllowedByUser != null &&
                    this.IsAllowedByUser.Equals(other.IsAllowedByUser)
                ) && 
                (
                    this.IsEnabledForPatchline == other.IsEnabledForPatchline ||
                    this.IsEnabledForPatchline != null &&
                    this.IsEnabledForPatchline.Equals(other.IsEnabledForPatchline)
                ) && 
                (
                    this.RequiresRestart == other.RequiresRestart ||
                    this.RequiresRestart != null &&
                    this.RequiresRestart.Equals(other.RequiresRestart)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.IsAllowedByUser != null)
                    hash = hash * 59 + this.IsAllowedByUser.GetHashCode();
                if (this.IsEnabledForPatchline != null)
                    hash = hash * 59 + this.IsEnabledForPatchline.GetHashCode();
                if (this.RequiresRestart != null)
                    hash = hash * 59 + this.RequiresRestart.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
