/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// PatcherProductResource
    /// </summary>
    [DataContract]
    public partial class PatcherProductResource :  IEquatable<PatcherProductResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatcherProductResource" /> class.
        /// </summary>
        /// <param name="Components">Components.</param>
        /// <param name="Id">Id.</param>
        /// <param name="RefreshPeriod">RefreshPeriod.</param>
        public PatcherProductResource(List<PatcherComponentResource> Components = default(List<PatcherComponentResource>), string Id = default(string), int? RefreshPeriod = default(int?))
        {
            this.Components = Components;
            this.Id = Id;
            this.RefreshPeriod = RefreshPeriod;
        }
        
        /// <summary>
        /// Gets or Sets Components
        /// </summary>
        [DataMember(Name="components", EmitDefaultValue=false)]
        public List<PatcherComponentResource> Components { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets RefreshPeriod
        /// </summary>
        [DataMember(Name="refresh_period", EmitDefaultValue=false)]
        public int? RefreshPeriod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PatcherProductResource {\n");
            sb.Append("  Components: ").Append(Components).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RefreshPeriod: ").Append(RefreshPeriod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PatcherProductResource);
        }

        /// <summary>
        /// Returns true if PatcherProductResource instances are equal
        /// </summary>
        /// <param name="other">Instance of PatcherProductResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PatcherProductResource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Components == other.Components ||
                    this.Components != null &&
                    this.Components.SequenceEqual(other.Components)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.RefreshPeriod == other.RefreshPeriod ||
                    this.RefreshPeriod != null &&
                    this.RefreshPeriod.Equals(other.RefreshPeriod)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Components != null)
                    hash = hash * 59 + this.Components.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.RefreshPeriod != null)
                    hash = hash * 59 + this.RefreshPeriod.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
