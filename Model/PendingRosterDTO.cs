/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// PendingRosterDTO
    /// </summary>
    [DataContract]
    public partial class PendingRosterDTO :  IEquatable<PendingRosterDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PendingRosterDTO" /> class.
        /// </summary>
        /// <param name="CaptainId">CaptainId.</param>
        /// <param name="InvitationId">InvitationId.</param>
        /// <param name="InviteFaileds">InviteFaileds.</param>
        /// <param name="Invitees">Invitees.</param>
        /// <param name="Logo">Logo.</param>
        /// <param name="LogoColor">LogoColor.</param>
        /// <param name="Members">Members.</param>
        /// <param name="Name">Name.</param>
        /// <param name="ShortName">ShortName.</param>
        /// <param name="TicketOffers">TicketOffers.</param>
        /// <param name="Tier">Tier.</param>
        /// <param name="TournamentId">TournamentId.</param>
        public PendingRosterDTO(long? CaptainId = default(long?), string InvitationId = default(string), List<FailedInvite> InviteFaileds = default(List<FailedInvite>), List<PendingRosterInviteeDTO> Invitees = default(List<PendingRosterInviteeDTO>), int? Logo = default(int?), int? LogoColor = default(int?), List<PendingRosterMemberDTO> Members = default(List<PendingRosterMemberDTO>), string Name = default(string), string ShortName = default(string), List<TicketOfferDTO> TicketOffers = default(List<TicketOfferDTO>), int? Tier = default(int?), long? TournamentId = default(long?))
        {
            this.CaptainId = CaptainId;
            this.InvitationId = InvitationId;
            this.InviteFaileds = InviteFaileds;
            this.Invitees = Invitees;
            this.Logo = Logo;
            this.LogoColor = LogoColor;
            this.Members = Members;
            this.Name = Name;
            this.ShortName = ShortName;
            this.TicketOffers = TicketOffers;
            this.Tier = Tier;
            this.TournamentId = TournamentId;
        }
        
        /// <summary>
        /// Gets or Sets CaptainId
        /// </summary>
        [DataMember(Name="captainId", EmitDefaultValue=false)]
        public long? CaptainId { get; set; }

        /// <summary>
        /// Gets or Sets InvitationId
        /// </summary>
        [DataMember(Name="invitationId", EmitDefaultValue=false)]
        public string InvitationId { get; set; }

        /// <summary>
        /// Gets or Sets InviteFaileds
        /// </summary>
        [DataMember(Name="inviteFaileds", EmitDefaultValue=false)]
        public List<FailedInvite> InviteFaileds { get; set; }

        /// <summary>
        /// Gets or Sets Invitees
        /// </summary>
        [DataMember(Name="invitees", EmitDefaultValue=false)]
        public List<PendingRosterInviteeDTO> Invitees { get; set; }

        /// <summary>
        /// Gets or Sets Logo
        /// </summary>
        [DataMember(Name="logo", EmitDefaultValue=false)]
        public int? Logo { get; set; }

        /// <summary>
        /// Gets or Sets LogoColor
        /// </summary>
        [DataMember(Name="logoColor", EmitDefaultValue=false)]
        public int? LogoColor { get; set; }

        /// <summary>
        /// Gets or Sets Members
        /// </summary>
        [DataMember(Name="members", EmitDefaultValue=false)]
        public List<PendingRosterMemberDTO> Members { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ShortName
        /// </summary>
        [DataMember(Name="shortName", EmitDefaultValue=false)]
        public string ShortName { get; set; }

        /// <summary>
        /// Gets or Sets TicketOffers
        /// </summary>
        [DataMember(Name="ticketOffers", EmitDefaultValue=false)]
        public List<TicketOfferDTO> TicketOffers { get; set; }

        /// <summary>
        /// Gets or Sets Tier
        /// </summary>
        [DataMember(Name="tier", EmitDefaultValue=false)]
        public int? Tier { get; set; }

        /// <summary>
        /// Gets or Sets TournamentId
        /// </summary>
        [DataMember(Name="tournamentId", EmitDefaultValue=false)]
        public long? TournamentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PendingRosterDTO {\n");
            sb.Append("  CaptainId: ").Append(CaptainId).Append("\n");
            sb.Append("  InvitationId: ").Append(InvitationId).Append("\n");
            sb.Append("  InviteFaileds: ").Append(InviteFaileds).Append("\n");
            sb.Append("  Invitees: ").Append(Invitees).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  LogoColor: ").Append(LogoColor).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  TicketOffers: ").Append(TicketOffers).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  TournamentId: ").Append(TournamentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PendingRosterDTO);
        }

        /// <summary>
        /// Returns true if PendingRosterDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of PendingRosterDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PendingRosterDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CaptainId == other.CaptainId ||
                    this.CaptainId != null &&
                    this.CaptainId.Equals(other.CaptainId)
                ) && 
                (
                    this.InvitationId == other.InvitationId ||
                    this.InvitationId != null &&
                    this.InvitationId.Equals(other.InvitationId)
                ) && 
                (
                    this.InviteFaileds == other.InviteFaileds ||
                    this.InviteFaileds != null &&
                    this.InviteFaileds.SequenceEqual(other.InviteFaileds)
                ) && 
                (
                    this.Invitees == other.Invitees ||
                    this.Invitees != null &&
                    this.Invitees.SequenceEqual(other.Invitees)
                ) && 
                (
                    this.Logo == other.Logo ||
                    this.Logo != null &&
                    this.Logo.Equals(other.Logo)
                ) && 
                (
                    this.LogoColor == other.LogoColor ||
                    this.LogoColor != null &&
                    this.LogoColor.Equals(other.LogoColor)
                ) && 
                (
                    this.Members == other.Members ||
                    this.Members != null &&
                    this.Members.SequenceEqual(other.Members)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.ShortName == other.ShortName ||
                    this.ShortName != null &&
                    this.ShortName.Equals(other.ShortName)
                ) && 
                (
                    this.TicketOffers == other.TicketOffers ||
                    this.TicketOffers != null &&
                    this.TicketOffers.SequenceEqual(other.TicketOffers)
                ) && 
                (
                    this.Tier == other.Tier ||
                    this.Tier != null &&
                    this.Tier.Equals(other.Tier)
                ) && 
                (
                    this.TournamentId == other.TournamentId ||
                    this.TournamentId != null &&
                    this.TournamentId.Equals(other.TournamentId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CaptainId != null)
                    hash = hash * 59 + this.CaptainId.GetHashCode();
                if (this.InvitationId != null)
                    hash = hash * 59 + this.InvitationId.GetHashCode();
                if (this.InviteFaileds != null)
                    hash = hash * 59 + this.InviteFaileds.GetHashCode();
                if (this.Invitees != null)
                    hash = hash * 59 + this.Invitees.GetHashCode();
                if (this.Logo != null)
                    hash = hash * 59 + this.Logo.GetHashCode();
                if (this.LogoColor != null)
                    hash = hash * 59 + this.LogoColor.GetHashCode();
                if (this.Members != null)
                    hash = hash * 59 + this.Members.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.ShortName != null)
                    hash = hash * 59 + this.ShortName.GetHashCode();
                if (this.TicketOffers != null)
                    hash = hash * 59 + this.TicketOffers.GetHashCode();
                if (this.Tier != null)
                    hash = hash * 59 + this.Tier.GetHashCode();
                if (this.TournamentId != null)
                    hash = hash * 59 + this.TournamentId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
