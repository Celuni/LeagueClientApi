/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// PendingRosterInviteeDTO
    /// </summary>
    [DataContract]
    public partial class PendingRosterInviteeDTO :  IEquatable<PendingRosterInviteeDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PendingRosterInviteeDTO" /> class.
        /// </summary>
        /// <param name="InviteTime">InviteTime.</param>
        /// <param name="InviteeId">InviteeId.</param>
        /// <param name="InviteeState">InviteeState.</param>
        /// <param name="Inviter">Inviter.</param>
        public PendingRosterInviteeDTO(long? InviteTime = default(long?), long? InviteeId = default(long?), PendingRosterInviteeState InviteeState = default(PendingRosterInviteeState), long? Inviter = default(long?))
        {
            this.InviteTime = InviteTime;
            this.InviteeId = InviteeId;
            this.InviteeState = InviteeState;
            this.Inviter = Inviter;
        }
        
        /// <summary>
        /// Gets or Sets InviteTime
        /// </summary>
        [DataMember(Name="inviteTime", EmitDefaultValue=false)]
        public long? InviteTime { get; set; }

        /// <summary>
        /// Gets or Sets InviteeId
        /// </summary>
        [DataMember(Name="inviteeId", EmitDefaultValue=false)]
        public long? InviteeId { get; set; }

        /// <summary>
        /// Gets or Sets InviteeState
        /// </summary>
        [DataMember(Name="inviteeState", EmitDefaultValue=false)]
        public PendingRosterInviteeState InviteeState { get; set; }

        /// <summary>
        /// Gets or Sets Inviter
        /// </summary>
        [DataMember(Name="inviter", EmitDefaultValue=false)]
        public long? Inviter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PendingRosterInviteeDTO {\n");
            sb.Append("  InviteTime: ").Append(InviteTime).Append("\n");
            sb.Append("  InviteeId: ").Append(InviteeId).Append("\n");
            sb.Append("  InviteeState: ").Append(InviteeState).Append("\n");
            sb.Append("  Inviter: ").Append(Inviter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PendingRosterInviteeDTO);
        }

        /// <summary>
        /// Returns true if PendingRosterInviteeDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of PendingRosterInviteeDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PendingRosterInviteeDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.InviteTime == other.InviteTime ||
                    this.InviteTime != null &&
                    this.InviteTime.Equals(other.InviteTime)
                ) && 
                (
                    this.InviteeId == other.InviteeId ||
                    this.InviteeId != null &&
                    this.InviteeId.Equals(other.InviteeId)
                ) && 
                (
                    this.InviteeState == other.InviteeState ||
                    this.InviteeState != null &&
                    this.InviteeState.Equals(other.InviteeState)
                ) && 
                (
                    this.Inviter == other.Inviter ||
                    this.Inviter != null &&
                    this.Inviter.Equals(other.Inviter)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.InviteTime != null)
                    hash = hash * 59 + this.InviteTime.GetHashCode();
                if (this.InviteeId != null)
                    hash = hash * 59 + this.InviteeId.GetHashCode();
                if (this.InviteeState != null)
                    hash = hash * 59 + this.InviteeState.GetHashCode();
                if (this.Inviter != null)
                    hash = hash * 59 + this.Inviter.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
