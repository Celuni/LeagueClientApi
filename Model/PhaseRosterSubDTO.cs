/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// PhaseRosterSubDTO
    /// </summary>
    [DataContract]
    public partial class PhaseRosterSubDTO :  IEquatable<PhaseRosterSubDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PhaseRosterSubDTO" /> class.
        /// </summary>
        /// <param name="Bet">Bet.</param>
        /// <param name="Pay">Pay.</param>
        /// <param name="PlayerId">PlayerId.</param>
        /// <param name="Position">Position.</param>
        /// <param name="ReplacedPlayerId">ReplacedPlayerId.</param>
        /// <param name="SubState">SubState.</param>
        public PhaseRosterSubDTO(int? Bet = default(int?), int? Pay = default(int?), long? PlayerId = default(long?), Position Position = default(Position), long? ReplacedPlayerId = default(long?), SubState SubState = default(SubState))
        {
            this.Bet = Bet;
            this.Pay = Pay;
            this.PlayerId = PlayerId;
            this.Position = Position;
            this.ReplacedPlayerId = ReplacedPlayerId;
            this.SubState = SubState;
        }
        
        /// <summary>
        /// Gets or Sets Bet
        /// </summary>
        [DataMember(Name="bet", EmitDefaultValue=false)]
        public int? Bet { get; set; }

        /// <summary>
        /// Gets or Sets Pay
        /// </summary>
        [DataMember(Name="pay", EmitDefaultValue=false)]
        public int? Pay { get; set; }

        /// <summary>
        /// Gets or Sets PlayerId
        /// </summary>
        [DataMember(Name="playerId", EmitDefaultValue=false)]
        public long? PlayerId { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public Position Position { get; set; }

        /// <summary>
        /// Gets or Sets ReplacedPlayerId
        /// </summary>
        [DataMember(Name="replacedPlayerId", EmitDefaultValue=false)]
        public long? ReplacedPlayerId { get; set; }

        /// <summary>
        /// Gets or Sets SubState
        /// </summary>
        [DataMember(Name="subState", EmitDefaultValue=false)]
        public SubState SubState { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PhaseRosterSubDTO {\n");
            sb.Append("  Bet: ").Append(Bet).Append("\n");
            sb.Append("  Pay: ").Append(Pay).Append("\n");
            sb.Append("  PlayerId: ").Append(PlayerId).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  ReplacedPlayerId: ").Append(ReplacedPlayerId).Append("\n");
            sb.Append("  SubState: ").Append(SubState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PhaseRosterSubDTO);
        }

        /// <summary>
        /// Returns true if PhaseRosterSubDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of PhaseRosterSubDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PhaseRosterSubDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Bet == other.Bet ||
                    this.Bet != null &&
                    this.Bet.Equals(other.Bet)
                ) && 
                (
                    this.Pay == other.Pay ||
                    this.Pay != null &&
                    this.Pay.Equals(other.Pay)
                ) && 
                (
                    this.PlayerId == other.PlayerId ||
                    this.PlayerId != null &&
                    this.PlayerId.Equals(other.PlayerId)
                ) && 
                (
                    this.Position == other.Position ||
                    this.Position != null &&
                    this.Position.Equals(other.Position)
                ) && 
                (
                    this.ReplacedPlayerId == other.ReplacedPlayerId ||
                    this.ReplacedPlayerId != null &&
                    this.ReplacedPlayerId.Equals(other.ReplacedPlayerId)
                ) && 
                (
                    this.SubState == other.SubState ||
                    this.SubState != null &&
                    this.SubState.Equals(other.SubState)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Bet != null)
                    hash = hash * 59 + this.Bet.GetHashCode();
                if (this.Pay != null)
                    hash = hash * 59 + this.Pay.GetHashCode();
                if (this.PlayerId != null)
                    hash = hash * 59 + this.PlayerId.GetHashCode();
                if (this.Position != null)
                    hash = hash * 59 + this.Position.GetHashCode();
                if (this.ReplacedPlayerId != null)
                    hash = hash * 59 + this.ReplacedPlayerId.GetHashCode();
                if (this.SubState != null)
                    hash = hash * 59 + this.SubState.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
