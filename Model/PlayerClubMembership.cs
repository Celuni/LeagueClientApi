/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// PlayerClubMembership
    /// </summary>
    [DataContract]
    public partial class PlayerClubMembership :  IEquatable<PlayerClubMembership>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerClubMembership" /> class.
        /// </summary>
        /// <param name="ActiveClubs">ActiveClubs.</param>
        /// <param name="ClubsServerConfig">ClubsServerConfig.</param>
        /// <param name="Info">Info.</param>
        /// <param name="PendingInvites">PendingInvites.</param>
        /// <param name="Preferences">Preferences.</param>
        /// <param name="RemovedClubs">RemovedClubs.</param>
        /// <param name="RevokedInviteClubs">RevokedInviteClubs.</param>
        /// <param name="SecureClubPresenceInfoString">SecureClubPresenceInfoString.</param>
        public PlayerClubMembership(List<PlayerClub> ActiveClubs = default(List<PlayerClub>), ClubsConfig ClubsServerConfig = default(ClubsConfig), ClubPlayer Info = default(ClubPlayer), List<ClubInvite> PendingInvites = default(List<ClubInvite>), ClubPreferences Preferences = default(ClubPreferences), List<Club> RemovedClubs = default(List<Club>), List<Club> RevokedInviteClubs = default(List<Club>), string SecureClubPresenceInfoString = default(string))
        {
            this.ActiveClubs = ActiveClubs;
            this.ClubsServerConfig = ClubsServerConfig;
            this.Info = Info;
            this.PendingInvites = PendingInvites;
            this.Preferences = Preferences;
            this.RemovedClubs = RemovedClubs;
            this.RevokedInviteClubs = RevokedInviteClubs;
            this.SecureClubPresenceInfoString = SecureClubPresenceInfoString;
        }
        
        /// <summary>
        /// Gets or Sets ActiveClubs
        /// </summary>
        [DataMember(Name="activeClubs", EmitDefaultValue=false)]
        public List<PlayerClub> ActiveClubs { get; set; }

        /// <summary>
        /// Gets or Sets ClubsServerConfig
        /// </summary>
        [DataMember(Name="clubsServerConfig", EmitDefaultValue=false)]
        public ClubsConfig ClubsServerConfig { get; set; }

        /// <summary>
        /// Gets or Sets Info
        /// </summary>
        [DataMember(Name="info", EmitDefaultValue=false)]
        public ClubPlayer Info { get; set; }

        /// <summary>
        /// Gets or Sets PendingInvites
        /// </summary>
        [DataMember(Name="pendingInvites", EmitDefaultValue=false)]
        public List<ClubInvite> PendingInvites { get; set; }

        /// <summary>
        /// Gets or Sets Preferences
        /// </summary>
        [DataMember(Name="preferences", EmitDefaultValue=false)]
        public ClubPreferences Preferences { get; set; }

        /// <summary>
        /// Gets or Sets RemovedClubs
        /// </summary>
        [DataMember(Name="removedClubs", EmitDefaultValue=false)]
        public List<Club> RemovedClubs { get; set; }

        /// <summary>
        /// Gets or Sets RevokedInviteClubs
        /// </summary>
        [DataMember(Name="revokedInviteClubs", EmitDefaultValue=false)]
        public List<Club> RevokedInviteClubs { get; set; }

        /// <summary>
        /// Gets or Sets SecureClubPresenceInfoString
        /// </summary>
        [DataMember(Name="secureClubPresenceInfoString", EmitDefaultValue=false)]
        public string SecureClubPresenceInfoString { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlayerClubMembership {\n");
            sb.Append("  ActiveClubs: ").Append(ActiveClubs).Append("\n");
            sb.Append("  ClubsServerConfig: ").Append(ClubsServerConfig).Append("\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("  PendingInvites: ").Append(PendingInvites).Append("\n");
            sb.Append("  Preferences: ").Append(Preferences).Append("\n");
            sb.Append("  RemovedClubs: ").Append(RemovedClubs).Append("\n");
            sb.Append("  RevokedInviteClubs: ").Append(RevokedInviteClubs).Append("\n");
            sb.Append("  SecureClubPresenceInfoString: ").Append(SecureClubPresenceInfoString).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PlayerClubMembership);
        }

        /// <summary>
        /// Returns true if PlayerClubMembership instances are equal
        /// </summary>
        /// <param name="other">Instance of PlayerClubMembership to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayerClubMembership other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ActiveClubs == other.ActiveClubs ||
                    this.ActiveClubs != null &&
                    this.ActiveClubs.SequenceEqual(other.ActiveClubs)
                ) && 
                (
                    this.ClubsServerConfig == other.ClubsServerConfig ||
                    this.ClubsServerConfig != null &&
                    this.ClubsServerConfig.Equals(other.ClubsServerConfig)
                ) && 
                (
                    this.Info == other.Info ||
                    this.Info != null &&
                    this.Info.Equals(other.Info)
                ) && 
                (
                    this.PendingInvites == other.PendingInvites ||
                    this.PendingInvites != null &&
                    this.PendingInvites.SequenceEqual(other.PendingInvites)
                ) && 
                (
                    this.Preferences == other.Preferences ||
                    this.Preferences != null &&
                    this.Preferences.Equals(other.Preferences)
                ) && 
                (
                    this.RemovedClubs == other.RemovedClubs ||
                    this.RemovedClubs != null &&
                    this.RemovedClubs.SequenceEqual(other.RemovedClubs)
                ) && 
                (
                    this.RevokedInviteClubs == other.RevokedInviteClubs ||
                    this.RevokedInviteClubs != null &&
                    this.RevokedInviteClubs.SequenceEqual(other.RevokedInviteClubs)
                ) && 
                (
                    this.SecureClubPresenceInfoString == other.SecureClubPresenceInfoString ||
                    this.SecureClubPresenceInfoString != null &&
                    this.SecureClubPresenceInfoString.Equals(other.SecureClubPresenceInfoString)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ActiveClubs != null)
                    hash = hash * 59 + this.ActiveClubs.GetHashCode();
                if (this.ClubsServerConfig != null)
                    hash = hash * 59 + this.ClubsServerConfig.GetHashCode();
                if (this.Info != null)
                    hash = hash * 59 + this.Info.GetHashCode();
                if (this.PendingInvites != null)
                    hash = hash * 59 + this.PendingInvites.GetHashCode();
                if (this.Preferences != null)
                    hash = hash * 59 + this.Preferences.GetHashCode();
                if (this.RemovedClubs != null)
                    hash = hash * 59 + this.RemovedClubs.GetHashCode();
                if (this.RevokedInviteClubs != null)
                    hash = hash * 59 + this.RevokedInviteClubs.GetHashCode();
                if (this.SecureClubPresenceInfoString != null)
                    hash = hash * 59 + this.SecureClubPresenceInfoString.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
