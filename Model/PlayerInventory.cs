/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// PlayerInventory
    /// </summary>
    [DataContract]
    public partial class PlayerInventory :  IEquatable<PlayerInventory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerInventory" /> class.
        /// </summary>
        /// <param name="Champions">Champions.</param>
        /// <param name="Icons">Icons.</param>
        /// <param name="Skins">Skins.</param>
        /// <param name="WardSkins">WardSkins.</param>
        public PlayerInventory(List<int?> Champions = default(List<int?>), List<int?> Icons = default(List<int?>), List<int?> Skins = default(List<int?>), List<long?> WardSkins = default(List<long?>))
        {
            this.Champions = Champions;
            this.Icons = Icons;
            this.Skins = Skins;
            this.WardSkins = WardSkins;
        }
        
        /// <summary>
        /// Gets or Sets Champions
        /// </summary>
        [DataMember(Name="champions", EmitDefaultValue=false)]
        public List<int?> Champions { get; set; }

        /// <summary>
        /// Gets or Sets Icons
        /// </summary>
        [DataMember(Name="icons", EmitDefaultValue=false)]
        public List<int?> Icons { get; set; }

        /// <summary>
        /// Gets or Sets Skins
        /// </summary>
        [DataMember(Name="skins", EmitDefaultValue=false)]
        public List<int?> Skins { get; set; }

        /// <summary>
        /// Gets or Sets WardSkins
        /// </summary>
        [DataMember(Name="wardSkins", EmitDefaultValue=false)]
        public List<long?> WardSkins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlayerInventory {\n");
            sb.Append("  Champions: ").Append(Champions).Append("\n");
            sb.Append("  Icons: ").Append(Icons).Append("\n");
            sb.Append("  Skins: ").Append(Skins).Append("\n");
            sb.Append("  WardSkins: ").Append(WardSkins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PlayerInventory);
        }

        /// <summary>
        /// Returns true if PlayerInventory instances are equal
        /// </summary>
        /// <param name="other">Instance of PlayerInventory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayerInventory other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Champions == other.Champions ||
                    this.Champions != null &&
                    this.Champions.SequenceEqual(other.Champions)
                ) && 
                (
                    this.Icons == other.Icons ||
                    this.Icons != null &&
                    this.Icons.SequenceEqual(other.Icons)
                ) && 
                (
                    this.Skins == other.Skins ||
                    this.Skins != null &&
                    this.Skins.SequenceEqual(other.Skins)
                ) && 
                (
                    this.WardSkins == other.WardSkins ||
                    this.WardSkins != null &&
                    this.WardSkins.SequenceEqual(other.WardSkins)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Champions != null)
                    hash = hash * 59 + this.Champions.GetHashCode();
                if (this.Icons != null)
                    hash = hash * 59 + this.Icons.GetHashCode();
                if (this.Skins != null)
                    hash = hash * 59 + this.Skins.GetHashCode();
                if (this.WardSkins != null)
                    hash = hash * 59 + this.WardSkins.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
