/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// PlayerLevelUpEvent
    /// </summary>
    [DataContract]
    public partial class PlayerLevelUpEvent :  IEquatable<PlayerLevelUpEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerLevelUpEvent" /> class.
        /// </summary>
        /// <param name="LeveledUp">LeveledUp.</param>
        /// <param name="NewMasterySlotUnlocked">NewMasterySlotUnlocked.</param>
        /// <param name="NewQueues">NewQueues.</param>
        /// <param name="NewRuneSlotUnlocked">NewRuneSlotUnlocked.</param>
        /// <param name="NewSpells">NewSpells.</param>
        /// <param name="NewSummonerLevel">NewSummonerLevel.</param>
        /// <param name="NowHasAccessToLoot">NowHasAccessToLoot.</param>
        /// <param name="NowHasAccessToMastery">NowHasAccessToMastery.</param>
        /// <param name="NowHasAccessToPublicChatRooms">NowHasAccessToPublicChatRooms.</param>
        /// <param name="RpEarned">RpEarned.</param>
        /// <param name="SwitchedToStandardFreeToPlayChampRotation">SwitchedToStandardFreeToPlayChampRotation.</param>
        public PlayerLevelUpEvent(bool? LeveledUp = default(bool?), bool? NewMasterySlotUnlocked = default(bool?), List<int?> NewQueues = default(List<int?>), bool? NewRuneSlotUnlocked = default(bool?), List<long?> NewSpells = default(List<long?>), int? NewSummonerLevel = default(int?), bool? NowHasAccessToLoot = default(bool?), bool? NowHasAccessToMastery = default(bool?), bool? NowHasAccessToPublicChatRooms = default(bool?), int? RpEarned = default(int?), bool? SwitchedToStandardFreeToPlayChampRotation = default(bool?))
        {
            this.LeveledUp = LeveledUp;
            this.NewMasterySlotUnlocked = NewMasterySlotUnlocked;
            this.NewQueues = NewQueues;
            this.NewRuneSlotUnlocked = NewRuneSlotUnlocked;
            this.NewSpells = NewSpells;
            this.NewSummonerLevel = NewSummonerLevel;
            this.NowHasAccessToLoot = NowHasAccessToLoot;
            this.NowHasAccessToMastery = NowHasAccessToMastery;
            this.NowHasAccessToPublicChatRooms = NowHasAccessToPublicChatRooms;
            this.RpEarned = RpEarned;
            this.SwitchedToStandardFreeToPlayChampRotation = SwitchedToStandardFreeToPlayChampRotation;
        }
        
        /// <summary>
        /// Gets or Sets LeveledUp
        /// </summary>
        [DataMember(Name="leveledUp", EmitDefaultValue=false)]
        public bool? LeveledUp { get; set; }

        /// <summary>
        /// Gets or Sets NewMasterySlotUnlocked
        /// </summary>
        [DataMember(Name="newMasterySlotUnlocked", EmitDefaultValue=false)]
        public bool? NewMasterySlotUnlocked { get; set; }

        /// <summary>
        /// Gets or Sets NewQueues
        /// </summary>
        [DataMember(Name="newQueues", EmitDefaultValue=false)]
        public List<int?> NewQueues { get; set; }

        /// <summary>
        /// Gets or Sets NewRuneSlotUnlocked
        /// </summary>
        [DataMember(Name="newRuneSlotUnlocked", EmitDefaultValue=false)]
        public bool? NewRuneSlotUnlocked { get; set; }

        /// <summary>
        /// Gets or Sets NewSpells
        /// </summary>
        [DataMember(Name="newSpells", EmitDefaultValue=false)]
        public List<long?> NewSpells { get; set; }

        /// <summary>
        /// Gets or Sets NewSummonerLevel
        /// </summary>
        [DataMember(Name="newSummonerLevel", EmitDefaultValue=false)]
        public int? NewSummonerLevel { get; set; }

        /// <summary>
        /// Gets or Sets NowHasAccessToLoot
        /// </summary>
        [DataMember(Name="nowHasAccessToLoot", EmitDefaultValue=false)]
        public bool? NowHasAccessToLoot { get; set; }

        /// <summary>
        /// Gets or Sets NowHasAccessToMastery
        /// </summary>
        [DataMember(Name="nowHasAccessToMastery", EmitDefaultValue=false)]
        public bool? NowHasAccessToMastery { get; set; }

        /// <summary>
        /// Gets or Sets NowHasAccessToPublicChatRooms
        /// </summary>
        [DataMember(Name="nowHasAccessToPublicChatRooms", EmitDefaultValue=false)]
        public bool? NowHasAccessToPublicChatRooms { get; set; }

        /// <summary>
        /// Gets or Sets RpEarned
        /// </summary>
        [DataMember(Name="rpEarned", EmitDefaultValue=false)]
        public int? RpEarned { get; set; }

        /// <summary>
        /// Gets or Sets SwitchedToStandardFreeToPlayChampRotation
        /// </summary>
        [DataMember(Name="switchedToStandardFreeToPlayChampRotation", EmitDefaultValue=false)]
        public bool? SwitchedToStandardFreeToPlayChampRotation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlayerLevelUpEvent {\n");
            sb.Append("  LeveledUp: ").Append(LeveledUp).Append("\n");
            sb.Append("  NewMasterySlotUnlocked: ").Append(NewMasterySlotUnlocked).Append("\n");
            sb.Append("  NewQueues: ").Append(NewQueues).Append("\n");
            sb.Append("  NewRuneSlotUnlocked: ").Append(NewRuneSlotUnlocked).Append("\n");
            sb.Append("  NewSpells: ").Append(NewSpells).Append("\n");
            sb.Append("  NewSummonerLevel: ").Append(NewSummonerLevel).Append("\n");
            sb.Append("  NowHasAccessToLoot: ").Append(NowHasAccessToLoot).Append("\n");
            sb.Append("  NowHasAccessToMastery: ").Append(NowHasAccessToMastery).Append("\n");
            sb.Append("  NowHasAccessToPublicChatRooms: ").Append(NowHasAccessToPublicChatRooms).Append("\n");
            sb.Append("  RpEarned: ").Append(RpEarned).Append("\n");
            sb.Append("  SwitchedToStandardFreeToPlayChampRotation: ").Append(SwitchedToStandardFreeToPlayChampRotation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PlayerLevelUpEvent);
        }

        /// <summary>
        /// Returns true if PlayerLevelUpEvent instances are equal
        /// </summary>
        /// <param name="other">Instance of PlayerLevelUpEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayerLevelUpEvent other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.LeveledUp == other.LeveledUp ||
                    this.LeveledUp != null &&
                    this.LeveledUp.Equals(other.LeveledUp)
                ) && 
                (
                    this.NewMasterySlotUnlocked == other.NewMasterySlotUnlocked ||
                    this.NewMasterySlotUnlocked != null &&
                    this.NewMasterySlotUnlocked.Equals(other.NewMasterySlotUnlocked)
                ) && 
                (
                    this.NewQueues == other.NewQueues ||
                    this.NewQueues != null &&
                    this.NewQueues.SequenceEqual(other.NewQueues)
                ) && 
                (
                    this.NewRuneSlotUnlocked == other.NewRuneSlotUnlocked ||
                    this.NewRuneSlotUnlocked != null &&
                    this.NewRuneSlotUnlocked.Equals(other.NewRuneSlotUnlocked)
                ) && 
                (
                    this.NewSpells == other.NewSpells ||
                    this.NewSpells != null &&
                    this.NewSpells.SequenceEqual(other.NewSpells)
                ) && 
                (
                    this.NewSummonerLevel == other.NewSummonerLevel ||
                    this.NewSummonerLevel != null &&
                    this.NewSummonerLevel.Equals(other.NewSummonerLevel)
                ) && 
                (
                    this.NowHasAccessToLoot == other.NowHasAccessToLoot ||
                    this.NowHasAccessToLoot != null &&
                    this.NowHasAccessToLoot.Equals(other.NowHasAccessToLoot)
                ) && 
                (
                    this.NowHasAccessToMastery == other.NowHasAccessToMastery ||
                    this.NowHasAccessToMastery != null &&
                    this.NowHasAccessToMastery.Equals(other.NowHasAccessToMastery)
                ) && 
                (
                    this.NowHasAccessToPublicChatRooms == other.NowHasAccessToPublicChatRooms ||
                    this.NowHasAccessToPublicChatRooms != null &&
                    this.NowHasAccessToPublicChatRooms.Equals(other.NowHasAccessToPublicChatRooms)
                ) && 
                (
                    this.RpEarned == other.RpEarned ||
                    this.RpEarned != null &&
                    this.RpEarned.Equals(other.RpEarned)
                ) && 
                (
                    this.SwitchedToStandardFreeToPlayChampRotation == other.SwitchedToStandardFreeToPlayChampRotation ||
                    this.SwitchedToStandardFreeToPlayChampRotation != null &&
                    this.SwitchedToStandardFreeToPlayChampRotation.Equals(other.SwitchedToStandardFreeToPlayChampRotation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.LeveledUp != null)
                    hash = hash * 59 + this.LeveledUp.GetHashCode();
                if (this.NewMasterySlotUnlocked != null)
                    hash = hash * 59 + this.NewMasterySlotUnlocked.GetHashCode();
                if (this.NewQueues != null)
                    hash = hash * 59 + this.NewQueues.GetHashCode();
                if (this.NewRuneSlotUnlocked != null)
                    hash = hash * 59 + this.NewRuneSlotUnlocked.GetHashCode();
                if (this.NewSpells != null)
                    hash = hash * 59 + this.NewSpells.GetHashCode();
                if (this.NewSummonerLevel != null)
                    hash = hash * 59 + this.NewSummonerLevel.GetHashCode();
                if (this.NowHasAccessToLoot != null)
                    hash = hash * 59 + this.NowHasAccessToLoot.GetHashCode();
                if (this.NowHasAccessToMastery != null)
                    hash = hash * 59 + this.NowHasAccessToMastery.GetHashCode();
                if (this.NowHasAccessToPublicChatRooms != null)
                    hash = hash * 59 + this.NowHasAccessToPublicChatRooms.GetHashCode();
                if (this.RpEarned != null)
                    hash = hash * 59 + this.RpEarned.GetHashCode();
                if (this.SwitchedToStandardFreeToPlayChampRotation != null)
                    hash = hash * 59 + this.SwitchedToStandardFreeToPlayChampRotation.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
