/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// PlayerLootDTO
    /// </summary>
    [DataContract]
    public partial class PlayerLootDTO :  IEquatable<PlayerLootDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerLootDTO" /> class.
        /// </summary>
        /// <param name="Count">Count.</param>
        /// <param name="ExpiryTime">ExpiryTime.</param>
        /// <param name="LootName">LootName.</param>
        /// <param name="RefId">RefId.</param>
        public PlayerLootDTO(int? Count = default(int?), long? ExpiryTime = default(long?), string LootName = default(string), string RefId = default(string))
        {
            this.Count = Count;
            this.ExpiryTime = ExpiryTime;
            this.LootName = LootName;
            this.RefId = RefId;
        }
        
        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int? Count { get; set; }

        /// <summary>
        /// Gets or Sets ExpiryTime
        /// </summary>
        [DataMember(Name="expiryTime", EmitDefaultValue=false)]
        public long? ExpiryTime { get; set; }

        /// <summary>
        /// Gets or Sets LootName
        /// </summary>
        [DataMember(Name="lootName", EmitDefaultValue=false)]
        public string LootName { get; set; }

        /// <summary>
        /// Gets or Sets RefId
        /// </summary>
        [DataMember(Name="refId", EmitDefaultValue=false)]
        public string RefId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlayerLootDTO {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  ExpiryTime: ").Append(ExpiryTime).Append("\n");
            sb.Append("  LootName: ").Append(LootName).Append("\n");
            sb.Append("  RefId: ").Append(RefId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PlayerLootDTO);
        }

        /// <summary>
        /// Returns true if PlayerLootDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of PlayerLootDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayerLootDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Count == other.Count ||
                    this.Count != null &&
                    this.Count.Equals(other.Count)
                ) && 
                (
                    this.ExpiryTime == other.ExpiryTime ||
                    this.ExpiryTime != null &&
                    this.ExpiryTime.Equals(other.ExpiryTime)
                ) && 
                (
                    this.LootName == other.LootName ||
                    this.LootName != null &&
                    this.LootName.Equals(other.LootName)
                ) && 
                (
                    this.RefId == other.RefId ||
                    this.RefId != null &&
                    this.RefId.Equals(other.RefId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Count != null)
                    hash = hash * 59 + this.Count.GetHashCode();
                if (this.ExpiryTime != null)
                    hash = hash * 59 + this.ExpiryTime.GetHashCode();
                if (this.LootName != null)
                    hash = hash * 59 + this.LootName.GetHashCode();
                if (this.RefId != null)
                    hash = hash * 59 + this.RefId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
