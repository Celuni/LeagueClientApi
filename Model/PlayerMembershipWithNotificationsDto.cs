/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// PlayerMembershipWithNotificationsDto
    /// </summary>
    [DataContract]
    public partial class PlayerMembershipWithNotificationsDto :  IEquatable<PlayerMembershipWithNotificationsDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerMembershipWithNotificationsDto" /> class.
        /// </summary>
        /// <param name="MembershipNotifications">MembershipNotifications.</param>
        /// <param name="PlayerMembership">PlayerMembership.</param>
        public PlayerMembershipWithNotificationsDto(List<MembershipNoficationsDto> MembershipNotifications = default(List<MembershipNoficationsDto>), PlayerMembershipDto PlayerMembership = default(PlayerMembershipDto))
        {
            this.MembershipNotifications = MembershipNotifications;
            this.PlayerMembership = PlayerMembership;
        }
        
        /// <summary>
        /// Gets or Sets MembershipNotifications
        /// </summary>
        [DataMember(Name="membershipNotifications", EmitDefaultValue=false)]
        public List<MembershipNoficationsDto> MembershipNotifications { get; set; }

        /// <summary>
        /// Gets or Sets PlayerMembership
        /// </summary>
        [DataMember(Name="playerMembership", EmitDefaultValue=false)]
        public PlayerMembershipDto PlayerMembership { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlayerMembershipWithNotificationsDto {\n");
            sb.Append("  MembershipNotifications: ").Append(MembershipNotifications).Append("\n");
            sb.Append("  PlayerMembership: ").Append(PlayerMembership).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PlayerMembershipWithNotificationsDto);
        }

        /// <summary>
        /// Returns true if PlayerMembershipWithNotificationsDto instances are equal
        /// </summary>
        /// <param name="other">Instance of PlayerMembershipWithNotificationsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayerMembershipWithNotificationsDto other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MembershipNotifications == other.MembershipNotifications ||
                    this.MembershipNotifications != null &&
                    this.MembershipNotifications.SequenceEqual(other.MembershipNotifications)
                ) && 
                (
                    this.PlayerMembership == other.PlayerMembership ||
                    this.PlayerMembership != null &&
                    this.PlayerMembership.Equals(other.PlayerMembership)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MembershipNotifications != null)
                    hash = hash * 59 + this.MembershipNotifications.GetHashCode();
                if (this.PlayerMembership != null)
                    hash = hash * 59 + this.PlayerMembership.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
