/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// PlayerMissionDTO
    /// </summary>
    [DataContract]
    public partial class PlayerMissionDTO :  IEquatable<PlayerMissionDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerMissionDTO" /> class.
        /// </summary>
        /// <param name="BackgroundImageUrl">BackgroundImageUrl.</param>
        /// <param name="CelebrationType">CelebrationType.</param>
        /// <param name="CompletedDate">CompletedDate.</param>
        /// <param name="CooldownTimeMillis">CooldownTimeMillis.</param>
        /// <param name="Description">Description.</param>
        /// <param name="DisplayType">DisplayType.</param>
        /// <param name="EndTime">EndTime.</param>
        /// <param name="ExpiringWarnings">ExpiringWarnings.</param>
        /// <param name="HelperText">HelperText.</param>
        /// <param name="IconImageUrl">IconImageUrl.</param>
        /// <param name="Id">Id.</param>
        /// <param name="InternalName">InternalName.</param>
        /// <param name="IsNew">IsNew.</param>
        /// <param name="LastUpdatedTimestamp">LastUpdatedTimestamp.</param>
        /// <param name="Locale">Locale.</param>
        /// <param name="MissionType">MissionType.</param>
        /// <param name="Objectives">Objectives.</param>
        /// <param name="Requirements">Requirements.</param>
        /// <param name="Rewards">Rewards.</param>
        /// <param name="SeriesName">SeriesName.</param>
        /// <param name="StartTime">StartTime.</param>
        /// <param name="Status">Status.</param>
        /// <param name="Title">Title.</param>
        /// <param name="Viewed">Viewed.</param>
        public PlayerMissionDTO(string BackgroundImageUrl = default(string), string CelebrationType = default(string), long? CompletedDate = default(long?), long? CooldownTimeMillis = default(long?), string Description = default(string), string DisplayType = default(string), long? EndTime = default(long?), List<MissionAlertDTO> ExpiringWarnings = default(List<MissionAlertDTO>), string HelperText = default(string), string IconImageUrl = default(string), string Id = default(string), string InternalName = default(string), bool? IsNew = default(bool?), long? LastUpdatedTimestamp = default(long?), string Locale = default(string), string MissionType = default(string), List<PlayerMissionObjectiveDTO> Objectives = default(List<PlayerMissionObjectiveDTO>), List<MissionRequirementDTO> Requirements = default(List<MissionRequirementDTO>), List<PlayerMissionRewardDTO> Rewards = default(List<PlayerMissionRewardDTO>), string SeriesName = default(string), long? StartTime = default(long?), string Status = default(string), string Title = default(string), bool? Viewed = default(bool?))
        {
            this.BackgroundImageUrl = BackgroundImageUrl;
            this.CelebrationType = CelebrationType;
            this.CompletedDate = CompletedDate;
            this.CooldownTimeMillis = CooldownTimeMillis;
            this.Description = Description;
            this.DisplayType = DisplayType;
            this.EndTime = EndTime;
            this.ExpiringWarnings = ExpiringWarnings;
            this.HelperText = HelperText;
            this.IconImageUrl = IconImageUrl;
            this.Id = Id;
            this.InternalName = InternalName;
            this.IsNew = IsNew;
            this.LastUpdatedTimestamp = LastUpdatedTimestamp;
            this.Locale = Locale;
            this.MissionType = MissionType;
            this.Objectives = Objectives;
            this.Requirements = Requirements;
            this.Rewards = Rewards;
            this.SeriesName = SeriesName;
            this.StartTime = StartTime;
            this.Status = Status;
            this.Title = Title;
            this.Viewed = Viewed;
        }
        
        /// <summary>
        /// Gets or Sets BackgroundImageUrl
        /// </summary>
        [DataMember(Name="backgroundImageUrl", EmitDefaultValue=false)]
        public string BackgroundImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets CelebrationType
        /// </summary>
        [DataMember(Name="celebrationType", EmitDefaultValue=false)]
        public string CelebrationType { get; set; }

        /// <summary>
        /// Gets or Sets CompletedDate
        /// </summary>
        [DataMember(Name="completedDate", EmitDefaultValue=false)]
        public long? CompletedDate { get; set; }

        /// <summary>
        /// Gets or Sets CooldownTimeMillis
        /// </summary>
        [DataMember(Name="cooldownTimeMillis", EmitDefaultValue=false)]
        public long? CooldownTimeMillis { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayType
        /// </summary>
        [DataMember(Name="displayType", EmitDefaultValue=false)]
        public string DisplayType { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public long? EndTime { get; set; }

        /// <summary>
        /// Gets or Sets ExpiringWarnings
        /// </summary>
        [DataMember(Name="expiringWarnings", EmitDefaultValue=false)]
        public List<MissionAlertDTO> ExpiringWarnings { get; set; }

        /// <summary>
        /// Gets or Sets HelperText
        /// </summary>
        [DataMember(Name="helperText", EmitDefaultValue=false)]
        public string HelperText { get; set; }

        /// <summary>
        /// Gets or Sets IconImageUrl
        /// </summary>
        [DataMember(Name="iconImageUrl", EmitDefaultValue=false)]
        public string IconImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets InternalName
        /// </summary>
        [DataMember(Name="internalName", EmitDefaultValue=false)]
        public string InternalName { get; set; }

        /// <summary>
        /// Gets or Sets IsNew
        /// </summary>
        [DataMember(Name="isNew", EmitDefaultValue=false)]
        public bool? IsNew { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdatedTimestamp
        /// </summary>
        [DataMember(Name="lastUpdatedTimestamp", EmitDefaultValue=false)]
        public long? LastUpdatedTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or Sets MissionType
        /// </summary>
        [DataMember(Name="missionType", EmitDefaultValue=false)]
        public string MissionType { get; set; }

        /// <summary>
        /// Gets or Sets Objectives
        /// </summary>
        [DataMember(Name="objectives", EmitDefaultValue=false)]
        public List<PlayerMissionObjectiveDTO> Objectives { get; set; }

        /// <summary>
        /// Gets or Sets Requirements
        /// </summary>
        [DataMember(Name="requirements", EmitDefaultValue=false)]
        public List<MissionRequirementDTO> Requirements { get; set; }

        /// <summary>
        /// Gets or Sets Rewards
        /// </summary>
        [DataMember(Name="rewards", EmitDefaultValue=false)]
        public List<PlayerMissionRewardDTO> Rewards { get; set; }

        /// <summary>
        /// Gets or Sets SeriesName
        /// </summary>
        [DataMember(Name="seriesName", EmitDefaultValue=false)]
        public string SeriesName { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public long? StartTime { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Viewed
        /// </summary>
        [DataMember(Name="viewed", EmitDefaultValue=false)]
        public bool? Viewed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlayerMissionDTO {\n");
            sb.Append("  BackgroundImageUrl: ").Append(BackgroundImageUrl).Append("\n");
            sb.Append("  CelebrationType: ").Append(CelebrationType).Append("\n");
            sb.Append("  CompletedDate: ").Append(CompletedDate).Append("\n");
            sb.Append("  CooldownTimeMillis: ").Append(CooldownTimeMillis).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayType: ").Append(DisplayType).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  ExpiringWarnings: ").Append(ExpiringWarnings).Append("\n");
            sb.Append("  HelperText: ").Append(HelperText).Append("\n");
            sb.Append("  IconImageUrl: ").Append(IconImageUrl).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InternalName: ").Append(InternalName).Append("\n");
            sb.Append("  IsNew: ").Append(IsNew).Append("\n");
            sb.Append("  LastUpdatedTimestamp: ").Append(LastUpdatedTimestamp).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  MissionType: ").Append(MissionType).Append("\n");
            sb.Append("  Objectives: ").Append(Objectives).Append("\n");
            sb.Append("  Requirements: ").Append(Requirements).Append("\n");
            sb.Append("  Rewards: ").Append(Rewards).Append("\n");
            sb.Append("  SeriesName: ").Append(SeriesName).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Viewed: ").Append(Viewed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PlayerMissionDTO);
        }

        /// <summary>
        /// Returns true if PlayerMissionDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of PlayerMissionDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayerMissionDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BackgroundImageUrl == other.BackgroundImageUrl ||
                    this.BackgroundImageUrl != null &&
                    this.BackgroundImageUrl.Equals(other.BackgroundImageUrl)
                ) && 
                (
                    this.CelebrationType == other.CelebrationType ||
                    this.CelebrationType != null &&
                    this.CelebrationType.Equals(other.CelebrationType)
                ) && 
                (
                    this.CompletedDate == other.CompletedDate ||
                    this.CompletedDate != null &&
                    this.CompletedDate.Equals(other.CompletedDate)
                ) && 
                (
                    this.CooldownTimeMillis == other.CooldownTimeMillis ||
                    this.CooldownTimeMillis != null &&
                    this.CooldownTimeMillis.Equals(other.CooldownTimeMillis)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.DisplayType == other.DisplayType ||
                    this.DisplayType != null &&
                    this.DisplayType.Equals(other.DisplayType)
                ) && 
                (
                    this.EndTime == other.EndTime ||
                    this.EndTime != null &&
                    this.EndTime.Equals(other.EndTime)
                ) && 
                (
                    this.ExpiringWarnings == other.ExpiringWarnings ||
                    this.ExpiringWarnings != null &&
                    this.ExpiringWarnings.SequenceEqual(other.ExpiringWarnings)
                ) && 
                (
                    this.HelperText == other.HelperText ||
                    this.HelperText != null &&
                    this.HelperText.Equals(other.HelperText)
                ) && 
                (
                    this.IconImageUrl == other.IconImageUrl ||
                    this.IconImageUrl != null &&
                    this.IconImageUrl.Equals(other.IconImageUrl)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.InternalName == other.InternalName ||
                    this.InternalName != null &&
                    this.InternalName.Equals(other.InternalName)
                ) && 
                (
                    this.IsNew == other.IsNew ||
                    this.IsNew != null &&
                    this.IsNew.Equals(other.IsNew)
                ) && 
                (
                    this.LastUpdatedTimestamp == other.LastUpdatedTimestamp ||
                    this.LastUpdatedTimestamp != null &&
                    this.LastUpdatedTimestamp.Equals(other.LastUpdatedTimestamp)
                ) && 
                (
                    this.Locale == other.Locale ||
                    this.Locale != null &&
                    this.Locale.Equals(other.Locale)
                ) && 
                (
                    this.MissionType == other.MissionType ||
                    this.MissionType != null &&
                    this.MissionType.Equals(other.MissionType)
                ) && 
                (
                    this.Objectives == other.Objectives ||
                    this.Objectives != null &&
                    this.Objectives.SequenceEqual(other.Objectives)
                ) && 
                (
                    this.Requirements == other.Requirements ||
                    this.Requirements != null &&
                    this.Requirements.SequenceEqual(other.Requirements)
                ) && 
                (
                    this.Rewards == other.Rewards ||
                    this.Rewards != null &&
                    this.Rewards.SequenceEqual(other.Rewards)
                ) && 
                (
                    this.SeriesName == other.SeriesName ||
                    this.SeriesName != null &&
                    this.SeriesName.Equals(other.SeriesName)
                ) && 
                (
                    this.StartTime == other.StartTime ||
                    this.StartTime != null &&
                    this.StartTime.Equals(other.StartTime)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.Viewed == other.Viewed ||
                    this.Viewed != null &&
                    this.Viewed.Equals(other.Viewed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BackgroundImageUrl != null)
                    hash = hash * 59 + this.BackgroundImageUrl.GetHashCode();
                if (this.CelebrationType != null)
                    hash = hash * 59 + this.CelebrationType.GetHashCode();
                if (this.CompletedDate != null)
                    hash = hash * 59 + this.CompletedDate.GetHashCode();
                if (this.CooldownTimeMillis != null)
                    hash = hash * 59 + this.CooldownTimeMillis.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.DisplayType != null)
                    hash = hash * 59 + this.DisplayType.GetHashCode();
                if (this.EndTime != null)
                    hash = hash * 59 + this.EndTime.GetHashCode();
                if (this.ExpiringWarnings != null)
                    hash = hash * 59 + this.ExpiringWarnings.GetHashCode();
                if (this.HelperText != null)
                    hash = hash * 59 + this.HelperText.GetHashCode();
                if (this.IconImageUrl != null)
                    hash = hash * 59 + this.IconImageUrl.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.InternalName != null)
                    hash = hash * 59 + this.InternalName.GetHashCode();
                if (this.IsNew != null)
                    hash = hash * 59 + this.IsNew.GetHashCode();
                if (this.LastUpdatedTimestamp != null)
                    hash = hash * 59 + this.LastUpdatedTimestamp.GetHashCode();
                if (this.Locale != null)
                    hash = hash * 59 + this.Locale.GetHashCode();
                if (this.MissionType != null)
                    hash = hash * 59 + this.MissionType.GetHashCode();
                if (this.Objectives != null)
                    hash = hash * 59 + this.Objectives.GetHashCode();
                if (this.Requirements != null)
                    hash = hash * 59 + this.Requirements.GetHashCode();
                if (this.Rewards != null)
                    hash = hash * 59 + this.Rewards.GetHashCode();
                if (this.SeriesName != null)
                    hash = hash * 59 + this.SeriesName.GetHashCode();
                if (this.StartTime != null)
                    hash = hash * 59 + this.StartTime.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.Viewed != null)
                    hash = hash * 59 + this.Viewed.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
