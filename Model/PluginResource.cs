/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// PluginResource
    /// </summary>
    [DataContract]
    public partial class PluginResource :  IEquatable<PluginResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PluginResource" /> class.
        /// </summary>
        /// <param name="App">App.</param>
        /// <param name="AssetBundleNames">AssetBundleNames.</param>
        /// <param name="Dependencies">Dependencies.</param>
        /// <param name="DynLibFileName">DynLibFileName.</param>
        /// <param name="DynLibPath">DynLibPath.</param>
        /// <param name="ExternalUri">ExternalUri.</param>
        /// <param name="Feature">Feature.</param>
        /// <param name="FullName">FullName.</param>
        /// <param name="ImplementedContracts">ImplementedContracts.</param>
        /// <param name="IsDynamicLibraryInited">IsDynamicLibraryInited.</param>
        /// <param name="IsDynamicLibraryLoaded">IsDynamicLibraryLoaded.</param>
        /// <param name="MountedAssetBundles">MountedAssetBundles.</param>
        /// <param name="OrderDynamicLibraryInited">OrderDynamicLibraryInited.</param>
        /// <param name="OrderDynamicLibraryLoaded">OrderDynamicLibraryLoaded.</param>
        /// <param name="OrderWADFileMounted">OrderWADFileMounted.</param>
        /// <param name="PluginInfoApiSemVer">PluginInfoApiSemVer.</param>
        /// <param name="ShortName">ShortName.</param>
        /// <param name="Standalone">Standalone.</param>
        /// <param name="Subtype">Subtype.</param>
        /// <param name="Supertype">Supertype.</param>
        /// <param name="ThreadingModel">ThreadingModel.</param>
        /// <param name="Version">Version.</param>
        public PluginResource(string App = default(string), List<string> AssetBundleNames = default(List<string>), List<PluginResourceContract> Dependencies = default(List<PluginResourceContract>), string DynLibFileName = default(string), string DynLibPath = default(string), string ExternalUri = default(string), string Feature = default(string), string FullName = default(string), List<PluginResourceContract> ImplementedContracts = default(List<PluginResourceContract>), bool? IsDynamicLibraryInited = default(bool?), bool? IsDynamicLibraryLoaded = default(bool?), Dictionary<string, string> MountedAssetBundles = default(Dictionary<string, string>), int? OrderDynamicLibraryInited = default(int?), int? OrderDynamicLibraryLoaded = default(int?), int? OrderWADFileMounted = default(int?), string PluginInfoApiSemVer = default(string), string ShortName = default(string), bool? Standalone = default(bool?), string Subtype = default(string), string Supertype = default(string), string ThreadingModel = default(string), string Version = default(string))
        {
            this.App = App;
            this.AssetBundleNames = AssetBundleNames;
            this.Dependencies = Dependencies;
            this.DynLibFileName = DynLibFileName;
            this.DynLibPath = DynLibPath;
            this.ExternalUri = ExternalUri;
            this.Feature = Feature;
            this.FullName = FullName;
            this.ImplementedContracts = ImplementedContracts;
            this.IsDynamicLibraryInited = IsDynamicLibraryInited;
            this.IsDynamicLibraryLoaded = IsDynamicLibraryLoaded;
            this.MountedAssetBundles = MountedAssetBundles;
            this.OrderDynamicLibraryInited = OrderDynamicLibraryInited;
            this.OrderDynamicLibraryLoaded = OrderDynamicLibraryLoaded;
            this.OrderWADFileMounted = OrderWADFileMounted;
            this.PluginInfoApiSemVer = PluginInfoApiSemVer;
            this.ShortName = ShortName;
            this.Standalone = Standalone;
            this.Subtype = Subtype;
            this.Supertype = Supertype;
            this.ThreadingModel = ThreadingModel;
            this.Version = Version;
        }
        
        /// <summary>
        /// Gets or Sets App
        /// </summary>
        [DataMember(Name="app", EmitDefaultValue=false)]
        public string App { get; set; }

        /// <summary>
        /// Gets or Sets AssetBundleNames
        /// </summary>
        [DataMember(Name="assetBundleNames", EmitDefaultValue=false)]
        public List<string> AssetBundleNames { get; set; }

        /// <summary>
        /// Gets or Sets Dependencies
        /// </summary>
        [DataMember(Name="dependencies", EmitDefaultValue=false)]
        public List<PluginResourceContract> Dependencies { get; set; }

        /// <summary>
        /// Gets or Sets DynLibFileName
        /// </summary>
        [DataMember(Name="dynLibFileName", EmitDefaultValue=false)]
        public string DynLibFileName { get; set; }

        /// <summary>
        /// Gets or Sets DynLibPath
        /// </summary>
        [DataMember(Name="dynLibPath", EmitDefaultValue=false)]
        public string DynLibPath { get; set; }

        /// <summary>
        /// Gets or Sets ExternalUri
        /// </summary>
        [DataMember(Name="externalUri", EmitDefaultValue=false)]
        public string ExternalUri { get; set; }

        /// <summary>
        /// Gets or Sets Feature
        /// </summary>
        [DataMember(Name="feature", EmitDefaultValue=false)]
        public string Feature { get; set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name="fullName", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or Sets ImplementedContracts
        /// </summary>
        [DataMember(Name="implementedContracts", EmitDefaultValue=false)]
        public List<PluginResourceContract> ImplementedContracts { get; set; }

        /// <summary>
        /// Gets or Sets IsDynamicLibraryInited
        /// </summary>
        [DataMember(Name="isDynamicLibraryInited", EmitDefaultValue=false)]
        public bool? IsDynamicLibraryInited { get; set; }

        /// <summary>
        /// Gets or Sets IsDynamicLibraryLoaded
        /// </summary>
        [DataMember(Name="isDynamicLibraryLoaded", EmitDefaultValue=false)]
        public bool? IsDynamicLibraryLoaded { get; set; }

        /// <summary>
        /// Gets or Sets MountedAssetBundles
        /// </summary>
        [DataMember(Name="mountedAssetBundles", EmitDefaultValue=false)]
        public Dictionary<string, string> MountedAssetBundles { get; set; }

        /// <summary>
        /// Gets or Sets OrderDynamicLibraryInited
        /// </summary>
        [DataMember(Name="orderDynamicLibraryInited", EmitDefaultValue=false)]
        public int? OrderDynamicLibraryInited { get; set; }

        /// <summary>
        /// Gets or Sets OrderDynamicLibraryLoaded
        /// </summary>
        [DataMember(Name="orderDynamicLibraryLoaded", EmitDefaultValue=false)]
        public int? OrderDynamicLibraryLoaded { get; set; }

        /// <summary>
        /// Gets or Sets OrderWADFileMounted
        /// </summary>
        [DataMember(Name="orderWADFileMounted", EmitDefaultValue=false)]
        public int? OrderWADFileMounted { get; set; }

        /// <summary>
        /// Gets or Sets PluginInfoApiSemVer
        /// </summary>
        [DataMember(Name="pluginInfoApiSemVer", EmitDefaultValue=false)]
        public string PluginInfoApiSemVer { get; set; }

        /// <summary>
        /// Gets or Sets ShortName
        /// </summary>
        [DataMember(Name="shortName", EmitDefaultValue=false)]
        public string ShortName { get; set; }

        /// <summary>
        /// Gets or Sets Standalone
        /// </summary>
        [DataMember(Name="standalone", EmitDefaultValue=false)]
        public bool? Standalone { get; set; }

        /// <summary>
        /// Gets or Sets Subtype
        /// </summary>
        [DataMember(Name="subtype", EmitDefaultValue=false)]
        public string Subtype { get; set; }

        /// <summary>
        /// Gets or Sets Supertype
        /// </summary>
        [DataMember(Name="supertype", EmitDefaultValue=false)]
        public string Supertype { get; set; }

        /// <summary>
        /// Gets or Sets ThreadingModel
        /// </summary>
        [DataMember(Name="threadingModel", EmitDefaultValue=false)]
        public string ThreadingModel { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PluginResource {\n");
            sb.Append("  App: ").Append(App).Append("\n");
            sb.Append("  AssetBundleNames: ").Append(AssetBundleNames).Append("\n");
            sb.Append("  Dependencies: ").Append(Dependencies).Append("\n");
            sb.Append("  DynLibFileName: ").Append(DynLibFileName).Append("\n");
            sb.Append("  DynLibPath: ").Append(DynLibPath).Append("\n");
            sb.Append("  ExternalUri: ").Append(ExternalUri).Append("\n");
            sb.Append("  Feature: ").Append(Feature).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  ImplementedContracts: ").Append(ImplementedContracts).Append("\n");
            sb.Append("  IsDynamicLibraryInited: ").Append(IsDynamicLibraryInited).Append("\n");
            sb.Append("  IsDynamicLibraryLoaded: ").Append(IsDynamicLibraryLoaded).Append("\n");
            sb.Append("  MountedAssetBundles: ").Append(MountedAssetBundles).Append("\n");
            sb.Append("  OrderDynamicLibraryInited: ").Append(OrderDynamicLibraryInited).Append("\n");
            sb.Append("  OrderDynamicLibraryLoaded: ").Append(OrderDynamicLibraryLoaded).Append("\n");
            sb.Append("  OrderWADFileMounted: ").Append(OrderWADFileMounted).Append("\n");
            sb.Append("  PluginInfoApiSemVer: ").Append(PluginInfoApiSemVer).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  Standalone: ").Append(Standalone).Append("\n");
            sb.Append("  Subtype: ").Append(Subtype).Append("\n");
            sb.Append("  Supertype: ").Append(Supertype).Append("\n");
            sb.Append("  ThreadingModel: ").Append(ThreadingModel).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PluginResource);
        }

        /// <summary>
        /// Returns true if PluginResource instances are equal
        /// </summary>
        /// <param name="other">Instance of PluginResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PluginResource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.App == other.App ||
                    this.App != null &&
                    this.App.Equals(other.App)
                ) && 
                (
                    this.AssetBundleNames == other.AssetBundleNames ||
                    this.AssetBundleNames != null &&
                    this.AssetBundleNames.SequenceEqual(other.AssetBundleNames)
                ) && 
                (
                    this.Dependencies == other.Dependencies ||
                    this.Dependencies != null &&
                    this.Dependencies.SequenceEqual(other.Dependencies)
                ) && 
                (
                    this.DynLibFileName == other.DynLibFileName ||
                    this.DynLibFileName != null &&
                    this.DynLibFileName.Equals(other.DynLibFileName)
                ) && 
                (
                    this.DynLibPath == other.DynLibPath ||
                    this.DynLibPath != null &&
                    this.DynLibPath.Equals(other.DynLibPath)
                ) && 
                (
                    this.ExternalUri == other.ExternalUri ||
                    this.ExternalUri != null &&
                    this.ExternalUri.Equals(other.ExternalUri)
                ) && 
                (
                    this.Feature == other.Feature ||
                    this.Feature != null &&
                    this.Feature.Equals(other.Feature)
                ) && 
                (
                    this.FullName == other.FullName ||
                    this.FullName != null &&
                    this.FullName.Equals(other.FullName)
                ) && 
                (
                    this.ImplementedContracts == other.ImplementedContracts ||
                    this.ImplementedContracts != null &&
                    this.ImplementedContracts.SequenceEqual(other.ImplementedContracts)
                ) && 
                (
                    this.IsDynamicLibraryInited == other.IsDynamicLibraryInited ||
                    this.IsDynamicLibraryInited != null &&
                    this.IsDynamicLibraryInited.Equals(other.IsDynamicLibraryInited)
                ) && 
                (
                    this.IsDynamicLibraryLoaded == other.IsDynamicLibraryLoaded ||
                    this.IsDynamicLibraryLoaded != null &&
                    this.IsDynamicLibraryLoaded.Equals(other.IsDynamicLibraryLoaded)
                ) && 
                (
                    this.MountedAssetBundles == other.MountedAssetBundles ||
                    this.MountedAssetBundles != null &&
                    this.MountedAssetBundles.SequenceEqual(other.MountedAssetBundles)
                ) && 
                (
                    this.OrderDynamicLibraryInited == other.OrderDynamicLibraryInited ||
                    this.OrderDynamicLibraryInited != null &&
                    this.OrderDynamicLibraryInited.Equals(other.OrderDynamicLibraryInited)
                ) && 
                (
                    this.OrderDynamicLibraryLoaded == other.OrderDynamicLibraryLoaded ||
                    this.OrderDynamicLibraryLoaded != null &&
                    this.OrderDynamicLibraryLoaded.Equals(other.OrderDynamicLibraryLoaded)
                ) && 
                (
                    this.OrderWADFileMounted == other.OrderWADFileMounted ||
                    this.OrderWADFileMounted != null &&
                    this.OrderWADFileMounted.Equals(other.OrderWADFileMounted)
                ) && 
                (
                    this.PluginInfoApiSemVer == other.PluginInfoApiSemVer ||
                    this.PluginInfoApiSemVer != null &&
                    this.PluginInfoApiSemVer.Equals(other.PluginInfoApiSemVer)
                ) && 
                (
                    this.ShortName == other.ShortName ||
                    this.ShortName != null &&
                    this.ShortName.Equals(other.ShortName)
                ) && 
                (
                    this.Standalone == other.Standalone ||
                    this.Standalone != null &&
                    this.Standalone.Equals(other.Standalone)
                ) && 
                (
                    this.Subtype == other.Subtype ||
                    this.Subtype != null &&
                    this.Subtype.Equals(other.Subtype)
                ) && 
                (
                    this.Supertype == other.Supertype ||
                    this.Supertype != null &&
                    this.Supertype.Equals(other.Supertype)
                ) && 
                (
                    this.ThreadingModel == other.ThreadingModel ||
                    this.ThreadingModel != null &&
                    this.ThreadingModel.Equals(other.ThreadingModel)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.App != null)
                    hash = hash * 59 + this.App.GetHashCode();
                if (this.AssetBundleNames != null)
                    hash = hash * 59 + this.AssetBundleNames.GetHashCode();
                if (this.Dependencies != null)
                    hash = hash * 59 + this.Dependencies.GetHashCode();
                if (this.DynLibFileName != null)
                    hash = hash * 59 + this.DynLibFileName.GetHashCode();
                if (this.DynLibPath != null)
                    hash = hash * 59 + this.DynLibPath.GetHashCode();
                if (this.ExternalUri != null)
                    hash = hash * 59 + this.ExternalUri.GetHashCode();
                if (this.Feature != null)
                    hash = hash * 59 + this.Feature.GetHashCode();
                if (this.FullName != null)
                    hash = hash * 59 + this.FullName.GetHashCode();
                if (this.ImplementedContracts != null)
                    hash = hash * 59 + this.ImplementedContracts.GetHashCode();
                if (this.IsDynamicLibraryInited != null)
                    hash = hash * 59 + this.IsDynamicLibraryInited.GetHashCode();
                if (this.IsDynamicLibraryLoaded != null)
                    hash = hash * 59 + this.IsDynamicLibraryLoaded.GetHashCode();
                if (this.MountedAssetBundles != null)
                    hash = hash * 59 + this.MountedAssetBundles.GetHashCode();
                if (this.OrderDynamicLibraryInited != null)
                    hash = hash * 59 + this.OrderDynamicLibraryInited.GetHashCode();
                if (this.OrderDynamicLibraryLoaded != null)
                    hash = hash * 59 + this.OrderDynamicLibraryLoaded.GetHashCode();
                if (this.OrderWADFileMounted != null)
                    hash = hash * 59 + this.OrderWADFileMounted.GetHashCode();
                if (this.PluginInfoApiSemVer != null)
                    hash = hash * 59 + this.PluginInfoApiSemVer.GetHashCode();
                if (this.ShortName != null)
                    hash = hash * 59 + this.ShortName.GetHashCode();
                if (this.Standalone != null)
                    hash = hash * 59 + this.Standalone.GetHashCode();
                if (this.Subtype != null)
                    hash = hash * 59 + this.Subtype.GetHashCode();
                if (this.Supertype != null)
                    hash = hash * 59 + this.Supertype.GetHashCode();
                if (this.ThreadingModel != null)
                    hash = hash * 59 + this.ThreadingModel.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
