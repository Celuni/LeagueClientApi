/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// Punishment
    /// </summary>
    [DataContract]
    public partial class Punishment :  IEquatable<Punishment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Punishment" /> class.
        /// </summary>
        /// <param name="PermaBan">PermaBan.</param>
        /// <param name="PlayerFacingMessage">PlayerFacingMessage.</param>
        /// <param name="PunishedForChatLogs">PunishedForChatLogs.</param>
        /// <param name="PunishedForGameIds">PunishedForGameIds.</param>
        /// <param name="PunishedUntilDateMillis">PunishedUntilDateMillis.</param>
        /// <param name="PunishmentLengthGames">PunishmentLengthGames.</param>
        /// <param name="PunishmentLengthMillis">PunishmentLengthMillis.</param>
        /// <param name="PunishmentReason">PunishmentReason.</param>
        /// <param name="PunishmentType">PunishmentType.</param>
        public Punishment(bool? PermaBan = default(bool?), string PlayerFacingMessage = default(string), List<string> PunishedForChatLogs = default(List<string>), List<long?> PunishedForGameIds = default(List<long?>), long? PunishedUntilDateMillis = default(long?), long? PunishmentLengthGames = default(long?), long? PunishmentLengthMillis = default(long?), string PunishmentReason = default(string), string PunishmentType = default(string))
        {
            this.PermaBan = PermaBan;
            this.PlayerFacingMessage = PlayerFacingMessage;
            this.PunishedForChatLogs = PunishedForChatLogs;
            this.PunishedForGameIds = PunishedForGameIds;
            this.PunishedUntilDateMillis = PunishedUntilDateMillis;
            this.PunishmentLengthGames = PunishmentLengthGames;
            this.PunishmentLengthMillis = PunishmentLengthMillis;
            this.PunishmentReason = PunishmentReason;
            this.PunishmentType = PunishmentType;
        }
        
        /// <summary>
        /// Gets or Sets PermaBan
        /// </summary>
        [DataMember(Name="permaBan", EmitDefaultValue=false)]
        public bool? PermaBan { get; set; }

        /// <summary>
        /// Gets or Sets PlayerFacingMessage
        /// </summary>
        [DataMember(Name="playerFacingMessage", EmitDefaultValue=false)]
        public string PlayerFacingMessage { get; set; }

        /// <summary>
        /// Gets or Sets PunishedForChatLogs
        /// </summary>
        [DataMember(Name="punishedForChatLogs", EmitDefaultValue=false)]
        public List<string> PunishedForChatLogs { get; set; }

        /// <summary>
        /// Gets or Sets PunishedForGameIds
        /// </summary>
        [DataMember(Name="punishedForGameIds", EmitDefaultValue=false)]
        public List<long?> PunishedForGameIds { get; set; }

        /// <summary>
        /// Gets or Sets PunishedUntilDateMillis
        /// </summary>
        [DataMember(Name="punishedUntilDateMillis", EmitDefaultValue=false)]
        public long? PunishedUntilDateMillis { get; set; }

        /// <summary>
        /// Gets or Sets PunishmentLengthGames
        /// </summary>
        [DataMember(Name="punishmentLengthGames", EmitDefaultValue=false)]
        public long? PunishmentLengthGames { get; set; }

        /// <summary>
        /// Gets or Sets PunishmentLengthMillis
        /// </summary>
        [DataMember(Name="punishmentLengthMillis", EmitDefaultValue=false)]
        public long? PunishmentLengthMillis { get; set; }

        /// <summary>
        /// Gets or Sets PunishmentReason
        /// </summary>
        [DataMember(Name="punishmentReason", EmitDefaultValue=false)]
        public string PunishmentReason { get; set; }

        /// <summary>
        /// Gets or Sets PunishmentType
        /// </summary>
        [DataMember(Name="punishmentType", EmitDefaultValue=false)]
        public string PunishmentType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Punishment {\n");
            sb.Append("  PermaBan: ").Append(PermaBan).Append("\n");
            sb.Append("  PlayerFacingMessage: ").Append(PlayerFacingMessage).Append("\n");
            sb.Append("  PunishedForChatLogs: ").Append(PunishedForChatLogs).Append("\n");
            sb.Append("  PunishedForGameIds: ").Append(PunishedForGameIds).Append("\n");
            sb.Append("  PunishedUntilDateMillis: ").Append(PunishedUntilDateMillis).Append("\n");
            sb.Append("  PunishmentLengthGames: ").Append(PunishmentLengthGames).Append("\n");
            sb.Append("  PunishmentLengthMillis: ").Append(PunishmentLengthMillis).Append("\n");
            sb.Append("  PunishmentReason: ").Append(PunishmentReason).Append("\n");
            sb.Append("  PunishmentType: ").Append(PunishmentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Punishment);
        }

        /// <summary>
        /// Returns true if Punishment instances are equal
        /// </summary>
        /// <param name="other">Instance of Punishment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Punishment other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PermaBan == other.PermaBan ||
                    this.PermaBan != null &&
                    this.PermaBan.Equals(other.PermaBan)
                ) && 
                (
                    this.PlayerFacingMessage == other.PlayerFacingMessage ||
                    this.PlayerFacingMessage != null &&
                    this.PlayerFacingMessage.Equals(other.PlayerFacingMessage)
                ) && 
                (
                    this.PunishedForChatLogs == other.PunishedForChatLogs ||
                    this.PunishedForChatLogs != null &&
                    this.PunishedForChatLogs.SequenceEqual(other.PunishedForChatLogs)
                ) && 
                (
                    this.PunishedForGameIds == other.PunishedForGameIds ||
                    this.PunishedForGameIds != null &&
                    this.PunishedForGameIds.SequenceEqual(other.PunishedForGameIds)
                ) && 
                (
                    this.PunishedUntilDateMillis == other.PunishedUntilDateMillis ||
                    this.PunishedUntilDateMillis != null &&
                    this.PunishedUntilDateMillis.Equals(other.PunishedUntilDateMillis)
                ) && 
                (
                    this.PunishmentLengthGames == other.PunishmentLengthGames ||
                    this.PunishmentLengthGames != null &&
                    this.PunishmentLengthGames.Equals(other.PunishmentLengthGames)
                ) && 
                (
                    this.PunishmentLengthMillis == other.PunishmentLengthMillis ||
                    this.PunishmentLengthMillis != null &&
                    this.PunishmentLengthMillis.Equals(other.PunishmentLengthMillis)
                ) && 
                (
                    this.PunishmentReason == other.PunishmentReason ||
                    this.PunishmentReason != null &&
                    this.PunishmentReason.Equals(other.PunishmentReason)
                ) && 
                (
                    this.PunishmentType == other.PunishmentType ||
                    this.PunishmentType != null &&
                    this.PunishmentType.Equals(other.PunishmentType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PermaBan != null)
                    hash = hash * 59 + this.PermaBan.GetHashCode();
                if (this.PlayerFacingMessage != null)
                    hash = hash * 59 + this.PlayerFacingMessage.GetHashCode();
                if (this.PunishedForChatLogs != null)
                    hash = hash * 59 + this.PunishedForChatLogs.GetHashCode();
                if (this.PunishedForGameIds != null)
                    hash = hash * 59 + this.PunishedForGameIds.GetHashCode();
                if (this.PunishedUntilDateMillis != null)
                    hash = hash * 59 + this.PunishedUntilDateMillis.GetHashCode();
                if (this.PunishmentLengthGames != null)
                    hash = hash * 59 + this.PunishmentLengthGames.GetHashCode();
                if (this.PunishmentLengthMillis != null)
                    hash = hash * 59 + this.PunishmentLengthMillis.GetHashCode();
                if (this.PunishmentReason != null)
                    hash = hash * 59 + this.PunishmentReason.GetHashCode();
                if (this.PunishmentType != null)
                    hash = hash * 59 + this.PunishmentType.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
