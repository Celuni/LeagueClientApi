/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// QueueEligilibilityGetQueueRestrictionsForQueuesRequestV2
    /// </summary>
    [DataContract]
    public partial class QueueEligilibilityGetQueueRestrictionsForQueuesRequestV2 :  IEquatable<QueueEligilibilityGetQueueRestrictionsForQueuesRequestV2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueueEligilibilityGetQueueRestrictionsForQueuesRequestV2" /> class.
        /// </summary>
        /// <param name="QueueIds">QueueIds.</param>
        /// <param name="QueueRestrictionsToExclude">QueueRestrictionsToExclude.</param>
        /// <param name="SummonerIds">SummonerIds.</param>
        public QueueEligilibilityGetQueueRestrictionsForQueuesRequestV2(List<int?> QueueIds = default(List<int?>), List<string> QueueRestrictionsToExclude = default(List<string>), List<long?> SummonerIds = default(List<long?>))
        {
            this.QueueIds = QueueIds;
            this.QueueRestrictionsToExclude = QueueRestrictionsToExclude;
            this.SummonerIds = SummonerIds;
        }
        
        /// <summary>
        /// Gets or Sets QueueIds
        /// </summary>
        [DataMember(Name="queueIds", EmitDefaultValue=false)]
        public List<int?> QueueIds { get; set; }

        /// <summary>
        /// Gets or Sets QueueRestrictionsToExclude
        /// </summary>
        [DataMember(Name="queueRestrictionsToExclude", EmitDefaultValue=false)]
        public List<string> QueueRestrictionsToExclude { get; set; }

        /// <summary>
        /// Gets or Sets SummonerIds
        /// </summary>
        [DataMember(Name="summonerIds", EmitDefaultValue=false)]
        public List<long?> SummonerIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueueEligilibilityGetQueueRestrictionsForQueuesRequestV2 {\n");
            sb.Append("  QueueIds: ").Append(QueueIds).Append("\n");
            sb.Append("  QueueRestrictionsToExclude: ").Append(QueueRestrictionsToExclude).Append("\n");
            sb.Append("  SummonerIds: ").Append(SummonerIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as QueueEligilibilityGetQueueRestrictionsForQueuesRequestV2);
        }

        /// <summary>
        /// Returns true if QueueEligilibilityGetQueueRestrictionsForQueuesRequestV2 instances are equal
        /// </summary>
        /// <param name="other">Instance of QueueEligilibilityGetQueueRestrictionsForQueuesRequestV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueueEligilibilityGetQueueRestrictionsForQueuesRequestV2 other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.QueueIds == other.QueueIds ||
                    this.QueueIds != null &&
                    this.QueueIds.SequenceEqual(other.QueueIds)
                ) && 
                (
                    this.QueueRestrictionsToExclude == other.QueueRestrictionsToExclude ||
                    this.QueueRestrictionsToExclude != null &&
                    this.QueueRestrictionsToExclude.SequenceEqual(other.QueueRestrictionsToExclude)
                ) && 
                (
                    this.SummonerIds == other.SummonerIds ||
                    this.SummonerIds != null &&
                    this.SummonerIds.SequenceEqual(other.SummonerIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.QueueIds != null)
                    hash = hash * 59 + this.QueueIds.GetHashCode();
                if (this.QueueRestrictionsToExclude != null)
                    hash = hash * 59 + this.QueueRestrictionsToExclude.GetHashCode();
                if (this.SummonerIds != null)
                    hash = hash * 59 + this.SummonerIds.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
