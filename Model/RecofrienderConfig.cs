/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// RecofrienderConfig
    /// </summary>
    [DataContract]
    public partial class RecofrienderConfig :  IEquatable<RecofrienderConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecofrienderConfig" /> class.
        /// </summary>
        /// <param name="ContactDetailsUrlTemplate">ContactDetailsUrlTemplate.</param>
        /// <param name="ContactsUrlTemplate">ContactsUrlTemplate.</param>
        /// <param name="EnableSocial">EnableSocial.</param>
        /// <param name="EnabledNetworks">EnabledNetworks.</param>
        /// <param name="ExternalCallTimeoutSeconds">ExternalCallTimeoutSeconds.</param>
        /// <param name="FaqLink">FaqLink.</param>
        public RecofrienderConfig(string ContactDetailsUrlTemplate = default(string), string ContactsUrlTemplate = default(string), bool? EnableSocial = default(bool?), List<string> EnabledNetworks = default(List<string>), long? ExternalCallTimeoutSeconds = default(long?), string FaqLink = default(string))
        {
            this.ContactDetailsUrlTemplate = ContactDetailsUrlTemplate;
            this.ContactsUrlTemplate = ContactsUrlTemplate;
            this.EnableSocial = EnableSocial;
            this.EnabledNetworks = EnabledNetworks;
            this.ExternalCallTimeoutSeconds = ExternalCallTimeoutSeconds;
            this.FaqLink = FaqLink;
        }
        
        /// <summary>
        /// Gets or Sets ContactDetailsUrlTemplate
        /// </summary>
        [DataMember(Name="ContactDetailsUrlTemplate", EmitDefaultValue=false)]
        public string ContactDetailsUrlTemplate { get; set; }

        /// <summary>
        /// Gets or Sets ContactsUrlTemplate
        /// </summary>
        [DataMember(Name="ContactsUrlTemplate", EmitDefaultValue=false)]
        public string ContactsUrlTemplate { get; set; }

        /// <summary>
        /// Gets or Sets EnableSocial
        /// </summary>
        [DataMember(Name="EnableSocial", EmitDefaultValue=false)]
        public bool? EnableSocial { get; set; }

        /// <summary>
        /// Gets or Sets EnabledNetworks
        /// </summary>
        [DataMember(Name="EnabledNetworks", EmitDefaultValue=false)]
        public List<string> EnabledNetworks { get; set; }

        /// <summary>
        /// Gets or Sets ExternalCallTimeoutSeconds
        /// </summary>
        [DataMember(Name="ExternalCallTimeoutSeconds", EmitDefaultValue=false)]
        public long? ExternalCallTimeoutSeconds { get; set; }

        /// <summary>
        /// Gets or Sets FaqLink
        /// </summary>
        [DataMember(Name="FaqLink", EmitDefaultValue=false)]
        public string FaqLink { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecofrienderConfig {\n");
            sb.Append("  ContactDetailsUrlTemplate: ").Append(ContactDetailsUrlTemplate).Append("\n");
            sb.Append("  ContactsUrlTemplate: ").Append(ContactsUrlTemplate).Append("\n");
            sb.Append("  EnableSocial: ").Append(EnableSocial).Append("\n");
            sb.Append("  EnabledNetworks: ").Append(EnabledNetworks).Append("\n");
            sb.Append("  ExternalCallTimeoutSeconds: ").Append(ExternalCallTimeoutSeconds).Append("\n");
            sb.Append("  FaqLink: ").Append(FaqLink).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RecofrienderConfig);
        }

        /// <summary>
        /// Returns true if RecofrienderConfig instances are equal
        /// </summary>
        /// <param name="other">Instance of RecofrienderConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecofrienderConfig other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ContactDetailsUrlTemplate == other.ContactDetailsUrlTemplate ||
                    this.ContactDetailsUrlTemplate != null &&
                    this.ContactDetailsUrlTemplate.Equals(other.ContactDetailsUrlTemplate)
                ) && 
                (
                    this.ContactsUrlTemplate == other.ContactsUrlTemplate ||
                    this.ContactsUrlTemplate != null &&
                    this.ContactsUrlTemplate.Equals(other.ContactsUrlTemplate)
                ) && 
                (
                    this.EnableSocial == other.EnableSocial ||
                    this.EnableSocial != null &&
                    this.EnableSocial.Equals(other.EnableSocial)
                ) && 
                (
                    this.EnabledNetworks == other.EnabledNetworks ||
                    this.EnabledNetworks != null &&
                    this.EnabledNetworks.SequenceEqual(other.EnabledNetworks)
                ) && 
                (
                    this.ExternalCallTimeoutSeconds == other.ExternalCallTimeoutSeconds ||
                    this.ExternalCallTimeoutSeconds != null &&
                    this.ExternalCallTimeoutSeconds.Equals(other.ExternalCallTimeoutSeconds)
                ) && 
                (
                    this.FaqLink == other.FaqLink ||
                    this.FaqLink != null &&
                    this.FaqLink.Equals(other.FaqLink)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ContactDetailsUrlTemplate != null)
                    hash = hash * 59 + this.ContactDetailsUrlTemplate.GetHashCode();
                if (this.ContactsUrlTemplate != null)
                    hash = hash * 59 + this.ContactsUrlTemplate.GetHashCode();
                if (this.EnableSocial != null)
                    hash = hash * 59 + this.EnableSocial.GetHashCode();
                if (this.EnabledNetworks != null)
                    hash = hash * 59 + this.EnabledNetworks.GetHashCode();
                if (this.ExternalCallTimeoutSeconds != null)
                    hash = hash * 59 + this.ExternalCallTimeoutSeconds.GetHashCode();
                if (this.FaqLink != null)
                    hash = hash * 59 + this.FaqLink.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
