/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// RecofrienderSessionResource
    /// </summary>
    [DataContract]
    public partial class RecofrienderSessionResource :  IEquatable<RecofrienderSessionResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecofrienderSessionResource" /> class.
        /// </summary>
        /// <param name="SessionExpire">SessionExpire.</param>
        /// <param name="SessionState">SessionState.</param>
        public RecofrienderSessionResource(int? SessionExpire = default(int?), string SessionState = default(string))
        {
            this.SessionExpire = SessionExpire;
            this.SessionState = SessionState;
        }
        
        /// <summary>
        /// Gets or Sets SessionExpire
        /// </summary>
        [DataMember(Name="sessionExpire", EmitDefaultValue=false)]
        public int? SessionExpire { get; set; }

        /// <summary>
        /// Gets or Sets SessionState
        /// </summary>
        [DataMember(Name="sessionState", EmitDefaultValue=false)]
        public string SessionState { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecofrienderSessionResource {\n");
            sb.Append("  SessionExpire: ").Append(SessionExpire).Append("\n");
            sb.Append("  SessionState: ").Append(SessionState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RecofrienderSessionResource);
        }

        /// <summary>
        /// Returns true if RecofrienderSessionResource instances are equal
        /// </summary>
        /// <param name="other">Instance of RecofrienderSessionResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecofrienderSessionResource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.SessionExpire == other.SessionExpire ||
                    this.SessionExpire != null &&
                    this.SessionExpire.Equals(other.SessionExpire)
                ) && 
                (
                    this.SessionState == other.SessionState ||
                    this.SessionState != null &&
                    this.SessionState.Equals(other.SessionState)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.SessionExpire != null)
                    hash = hash * 59 + this.SessionExpire.GetHashCode();
                if (this.SessionState != null)
                    hash = hash * 59 + this.SessionState.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
