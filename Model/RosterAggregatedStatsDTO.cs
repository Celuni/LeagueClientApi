/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// RosterAggregatedStatsDTO
    /// </summary>
    [DataContract]
    public partial class RosterAggregatedStatsDTO :  IEquatable<RosterAggregatedStatsDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RosterAggregatedStatsDTO" /> class.
        /// </summary>
        /// <param name="PeriodStats">PeriodStats.</param>
        /// <param name="PlayerStats">PlayerStats.</param>
        public RosterAggregatedStatsDTO(List<RosterPeriodAggregatedStatsDTO> PeriodStats = default(List<RosterPeriodAggregatedStatsDTO>), Dictionary<string, RosterPlayerAggregatedStatsDTO> PlayerStats = default(Dictionary<string, RosterPlayerAggregatedStatsDTO>))
        {
            this.PeriodStats = PeriodStats;
            this.PlayerStats = PlayerStats;
        }
        
        /// <summary>
        /// Gets or Sets PeriodStats
        /// </summary>
        [DataMember(Name="periodStats", EmitDefaultValue=false)]
        public List<RosterPeriodAggregatedStatsDTO> PeriodStats { get; set; }

        /// <summary>
        /// Gets or Sets PlayerStats
        /// </summary>
        [DataMember(Name="playerStats", EmitDefaultValue=false)]
        public Dictionary<string, RosterPlayerAggregatedStatsDTO> PlayerStats { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RosterAggregatedStatsDTO {\n");
            sb.Append("  PeriodStats: ").Append(PeriodStats).Append("\n");
            sb.Append("  PlayerStats: ").Append(PlayerStats).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RosterAggregatedStatsDTO);
        }

        /// <summary>
        /// Returns true if RosterAggregatedStatsDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of RosterAggregatedStatsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RosterAggregatedStatsDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PeriodStats == other.PeriodStats ||
                    this.PeriodStats != null &&
                    this.PeriodStats.SequenceEqual(other.PeriodStats)
                ) && 
                (
                    this.PlayerStats == other.PlayerStats ||
                    this.PlayerStats != null &&
                    this.PlayerStats.SequenceEqual(other.PlayerStats)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PeriodStats != null)
                    hash = hash * 59 + this.PeriodStats.GetHashCode();
                if (this.PlayerStats != null)
                    hash = hash * 59 + this.PlayerStats.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
