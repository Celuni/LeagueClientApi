/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// RosterDynamicStateDTO
    /// </summary>
    [DataContract]
    public partial class RosterDynamicStateDTO :  IEquatable<RosterDynamicStateDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RosterDynamicStateDTO" /> class.
        /// </summary>
        /// <param name="Members">Members.</param>
        /// <param name="PhaseCheckinStates">PhaseCheckinStates.</param>
        /// <param name="PhaseRosterSubs">PhaseRosterSubs.</param>
        /// <param name="RosterId">RosterId.</param>
        /// <param name="TicketOffers">TicketOffers.</param>
        /// <param name="TournamentId">TournamentId.</param>
        /// <param name="Withdraw">Withdraw.</param>
        public RosterDynamicStateDTO(List<BuybackMember> Members = default(List<BuybackMember>), List<long?> PhaseCheckinStates = default(List<long?>), List<PhaseRosterSubDTO> PhaseRosterSubs = default(List<PhaseRosterSubDTO>), long? RosterId = default(long?), List<TicketOfferDTO> TicketOffers = default(List<TicketOfferDTO>), long? TournamentId = default(long?), RosterWithdraw Withdraw = default(RosterWithdraw))
        {
            this.Members = Members;
            this.PhaseCheckinStates = PhaseCheckinStates;
            this.PhaseRosterSubs = PhaseRosterSubs;
            this.RosterId = RosterId;
            this.TicketOffers = TicketOffers;
            this.TournamentId = TournamentId;
            this.Withdraw = Withdraw;
        }
        
        /// <summary>
        /// Gets or Sets Members
        /// </summary>
        [DataMember(Name="members", EmitDefaultValue=false)]
        public List<BuybackMember> Members { get; set; }

        /// <summary>
        /// Gets or Sets PhaseCheckinStates
        /// </summary>
        [DataMember(Name="phaseCheckinStates", EmitDefaultValue=false)]
        public List<long?> PhaseCheckinStates { get; set; }

        /// <summary>
        /// Gets or Sets PhaseRosterSubs
        /// </summary>
        [DataMember(Name="phaseRosterSubs", EmitDefaultValue=false)]
        public List<PhaseRosterSubDTO> PhaseRosterSubs { get; set; }

        /// <summary>
        /// Gets or Sets RosterId
        /// </summary>
        [DataMember(Name="rosterId", EmitDefaultValue=false)]
        public long? RosterId { get; set; }

        /// <summary>
        /// Gets or Sets TicketOffers
        /// </summary>
        [DataMember(Name="ticketOffers", EmitDefaultValue=false)]
        public List<TicketOfferDTO> TicketOffers { get; set; }

        /// <summary>
        /// Gets or Sets TournamentId
        /// </summary>
        [DataMember(Name="tournamentId", EmitDefaultValue=false)]
        public long? TournamentId { get; set; }

        /// <summary>
        /// Gets or Sets Withdraw
        /// </summary>
        [DataMember(Name="withdraw", EmitDefaultValue=false)]
        public RosterWithdraw Withdraw { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RosterDynamicStateDTO {\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  PhaseCheckinStates: ").Append(PhaseCheckinStates).Append("\n");
            sb.Append("  PhaseRosterSubs: ").Append(PhaseRosterSubs).Append("\n");
            sb.Append("  RosterId: ").Append(RosterId).Append("\n");
            sb.Append("  TicketOffers: ").Append(TicketOffers).Append("\n");
            sb.Append("  TournamentId: ").Append(TournamentId).Append("\n");
            sb.Append("  Withdraw: ").Append(Withdraw).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RosterDynamicStateDTO);
        }

        /// <summary>
        /// Returns true if RosterDynamicStateDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of RosterDynamicStateDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RosterDynamicStateDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Members == other.Members ||
                    this.Members != null &&
                    this.Members.SequenceEqual(other.Members)
                ) && 
                (
                    this.PhaseCheckinStates == other.PhaseCheckinStates ||
                    this.PhaseCheckinStates != null &&
                    this.PhaseCheckinStates.SequenceEqual(other.PhaseCheckinStates)
                ) && 
                (
                    this.PhaseRosterSubs == other.PhaseRosterSubs ||
                    this.PhaseRosterSubs != null &&
                    this.PhaseRosterSubs.SequenceEqual(other.PhaseRosterSubs)
                ) && 
                (
                    this.RosterId == other.RosterId ||
                    this.RosterId != null &&
                    this.RosterId.Equals(other.RosterId)
                ) && 
                (
                    this.TicketOffers == other.TicketOffers ||
                    this.TicketOffers != null &&
                    this.TicketOffers.SequenceEqual(other.TicketOffers)
                ) && 
                (
                    this.TournamentId == other.TournamentId ||
                    this.TournamentId != null &&
                    this.TournamentId.Equals(other.TournamentId)
                ) && 
                (
                    this.Withdraw == other.Withdraw ||
                    this.Withdraw != null &&
                    this.Withdraw.Equals(other.Withdraw)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Members != null)
                    hash = hash * 59 + this.Members.GetHashCode();
                if (this.PhaseCheckinStates != null)
                    hash = hash * 59 + this.PhaseCheckinStates.GetHashCode();
                if (this.PhaseRosterSubs != null)
                    hash = hash * 59 + this.PhaseRosterSubs.GetHashCode();
                if (this.RosterId != null)
                    hash = hash * 59 + this.RosterId.GetHashCode();
                if (this.TicketOffers != null)
                    hash = hash * 59 + this.TicketOffers.GetHashCode();
                if (this.TournamentId != null)
                    hash = hash * 59 + this.TournamentId.GetHashCode();
                if (this.Withdraw != null)
                    hash = hash * 59 + this.Withdraw.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
