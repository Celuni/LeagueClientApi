/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// RosterMemberDTO
    /// </summary>
    [DataContract]
    public partial class RosterMemberDTO :  IEquatable<RosterMemberDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RosterMemberDTO" /> class.
        /// </summary>
        /// <param name="CurrentBid">CurrentBid.</param>
        /// <param name="JoinTime">JoinTime.</param>
        /// <param name="PlayerId">PlayerId.</param>
        /// <param name="Position">Position.</param>
        /// <param name="RosterId">RosterId.</param>
        /// <param name="TournamentId">TournamentId.</param>
        public RosterMemberDTO(int? CurrentBid = default(int?), long? JoinTime = default(long?), long? PlayerId = default(long?), Position Position = default(Position), long? RosterId = default(long?), long? TournamentId = default(long?))
        {
            this.CurrentBid = CurrentBid;
            this.JoinTime = JoinTime;
            this.PlayerId = PlayerId;
            this.Position = Position;
            this.RosterId = RosterId;
            this.TournamentId = TournamentId;
        }
        
        /// <summary>
        /// Gets or Sets CurrentBid
        /// </summary>
        [DataMember(Name="currentBid", EmitDefaultValue=false)]
        public int? CurrentBid { get; set; }

        /// <summary>
        /// Gets or Sets JoinTime
        /// </summary>
        [DataMember(Name="joinTime", EmitDefaultValue=false)]
        public long? JoinTime { get; set; }

        /// <summary>
        /// Gets or Sets PlayerId
        /// </summary>
        [DataMember(Name="playerId", EmitDefaultValue=false)]
        public long? PlayerId { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public Position Position { get; set; }

        /// <summary>
        /// Gets or Sets RosterId
        /// </summary>
        [DataMember(Name="rosterId", EmitDefaultValue=false)]
        public long? RosterId { get; set; }

        /// <summary>
        /// Gets or Sets TournamentId
        /// </summary>
        [DataMember(Name="tournamentId", EmitDefaultValue=false)]
        public long? TournamentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RosterMemberDTO {\n");
            sb.Append("  CurrentBid: ").Append(CurrentBid).Append("\n");
            sb.Append("  JoinTime: ").Append(JoinTime).Append("\n");
            sb.Append("  PlayerId: ").Append(PlayerId).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  RosterId: ").Append(RosterId).Append("\n");
            sb.Append("  TournamentId: ").Append(TournamentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RosterMemberDTO);
        }

        /// <summary>
        /// Returns true if RosterMemberDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of RosterMemberDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RosterMemberDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CurrentBid == other.CurrentBid ||
                    this.CurrentBid != null &&
                    this.CurrentBid.Equals(other.CurrentBid)
                ) && 
                (
                    this.JoinTime == other.JoinTime ||
                    this.JoinTime != null &&
                    this.JoinTime.Equals(other.JoinTime)
                ) && 
                (
                    this.PlayerId == other.PlayerId ||
                    this.PlayerId != null &&
                    this.PlayerId.Equals(other.PlayerId)
                ) && 
                (
                    this.Position == other.Position ||
                    this.Position != null &&
                    this.Position.Equals(other.Position)
                ) && 
                (
                    this.RosterId == other.RosterId ||
                    this.RosterId != null &&
                    this.RosterId.Equals(other.RosterId)
                ) && 
                (
                    this.TournamentId == other.TournamentId ||
                    this.TournamentId != null &&
                    this.TournamentId.Equals(other.TournamentId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CurrentBid != null)
                    hash = hash * 59 + this.CurrentBid.GetHashCode();
                if (this.JoinTime != null)
                    hash = hash * 59 + this.JoinTime.GetHashCode();
                if (this.PlayerId != null)
                    hash = hash * 59 + this.PlayerId.GetHashCode();
                if (this.Position != null)
                    hash = hash * 59 + this.Position.GetHashCode();
                if (this.RosterId != null)
                    hash = hash * 59 + this.RosterId.GetHashCode();
                if (this.TournamentId != null)
                    hash = hash * 59 + this.TournamentId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
