/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// RosterStatsDTO
    /// </summary>
    [DataContract]
    public partial class RosterStatsDTO :  IEquatable<RosterStatsDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RosterStatsDTO" /> class.
        /// </summary>
        /// <param name="RosterId">RosterId.</param>
        /// <param name="RosterLogo">RosterLogo.</param>
        /// <param name="RosterLogoColor">RosterLogoColor.</param>
        /// <param name="RosterName">RosterName.</param>
        /// <param name="RosterShortName">RosterShortName.</param>
        /// <param name="Stats">Stats.</param>
        /// <param name="Tier">Tier.</param>
        /// <param name="TournamentNameLocKey">TournamentNameLocKey.</param>
        /// <param name="TournamentPeriods">TournamentPeriods.</param>
        /// <param name="TournamentThemeId">TournamentThemeId.</param>
        public RosterStatsDTO(long? RosterId = default(long?), int? RosterLogo = default(int?), int? RosterLogoColor = default(int?), string RosterName = default(string), string RosterShortName = default(string), RosterAggregatedStatsDTO Stats = default(RosterAggregatedStatsDTO), int? Tier = default(int?), string TournamentNameLocKey = default(string), int? TournamentPeriods = default(int?), int? TournamentThemeId = default(int?))
        {
            this.RosterId = RosterId;
            this.RosterLogo = RosterLogo;
            this.RosterLogoColor = RosterLogoColor;
            this.RosterName = RosterName;
            this.RosterShortName = RosterShortName;
            this.Stats = Stats;
            this.Tier = Tier;
            this.TournamentNameLocKey = TournamentNameLocKey;
            this.TournamentPeriods = TournamentPeriods;
            this.TournamentThemeId = TournamentThemeId;
        }
        
        /// <summary>
        /// Gets or Sets RosterId
        /// </summary>
        [DataMember(Name="rosterId", EmitDefaultValue=false)]
        public long? RosterId { get; set; }

        /// <summary>
        /// Gets or Sets RosterLogo
        /// </summary>
        [DataMember(Name="rosterLogo", EmitDefaultValue=false)]
        public int? RosterLogo { get; set; }

        /// <summary>
        /// Gets or Sets RosterLogoColor
        /// </summary>
        [DataMember(Name="rosterLogoColor", EmitDefaultValue=false)]
        public int? RosterLogoColor { get; set; }

        /// <summary>
        /// Gets or Sets RosterName
        /// </summary>
        [DataMember(Name="rosterName", EmitDefaultValue=false)]
        public string RosterName { get; set; }

        /// <summary>
        /// Gets or Sets RosterShortName
        /// </summary>
        [DataMember(Name="rosterShortName", EmitDefaultValue=false)]
        public string RosterShortName { get; set; }

        /// <summary>
        /// Gets or Sets Stats
        /// </summary>
        [DataMember(Name="stats", EmitDefaultValue=false)]
        public RosterAggregatedStatsDTO Stats { get; set; }

        /// <summary>
        /// Gets or Sets Tier
        /// </summary>
        [DataMember(Name="tier", EmitDefaultValue=false)]
        public int? Tier { get; set; }

        /// <summary>
        /// Gets or Sets TournamentNameLocKey
        /// </summary>
        [DataMember(Name="tournamentNameLocKey", EmitDefaultValue=false)]
        public string TournamentNameLocKey { get; set; }

        /// <summary>
        /// Gets or Sets TournamentPeriods
        /// </summary>
        [DataMember(Name="tournamentPeriods", EmitDefaultValue=false)]
        public int? TournamentPeriods { get; set; }

        /// <summary>
        /// Gets or Sets TournamentThemeId
        /// </summary>
        [DataMember(Name="tournamentThemeId", EmitDefaultValue=false)]
        public int? TournamentThemeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RosterStatsDTO {\n");
            sb.Append("  RosterId: ").Append(RosterId).Append("\n");
            sb.Append("  RosterLogo: ").Append(RosterLogo).Append("\n");
            sb.Append("  RosterLogoColor: ").Append(RosterLogoColor).Append("\n");
            sb.Append("  RosterName: ").Append(RosterName).Append("\n");
            sb.Append("  RosterShortName: ").Append(RosterShortName).Append("\n");
            sb.Append("  Stats: ").Append(Stats).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  TournamentNameLocKey: ").Append(TournamentNameLocKey).Append("\n");
            sb.Append("  TournamentPeriods: ").Append(TournamentPeriods).Append("\n");
            sb.Append("  TournamentThemeId: ").Append(TournamentThemeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RosterStatsDTO);
        }

        /// <summary>
        /// Returns true if RosterStatsDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of RosterStatsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RosterStatsDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.RosterId == other.RosterId ||
                    this.RosterId != null &&
                    this.RosterId.Equals(other.RosterId)
                ) && 
                (
                    this.RosterLogo == other.RosterLogo ||
                    this.RosterLogo != null &&
                    this.RosterLogo.Equals(other.RosterLogo)
                ) && 
                (
                    this.RosterLogoColor == other.RosterLogoColor ||
                    this.RosterLogoColor != null &&
                    this.RosterLogoColor.Equals(other.RosterLogoColor)
                ) && 
                (
                    this.RosterName == other.RosterName ||
                    this.RosterName != null &&
                    this.RosterName.Equals(other.RosterName)
                ) && 
                (
                    this.RosterShortName == other.RosterShortName ||
                    this.RosterShortName != null &&
                    this.RosterShortName.Equals(other.RosterShortName)
                ) && 
                (
                    this.Stats == other.Stats ||
                    this.Stats != null &&
                    this.Stats.Equals(other.Stats)
                ) && 
                (
                    this.Tier == other.Tier ||
                    this.Tier != null &&
                    this.Tier.Equals(other.Tier)
                ) && 
                (
                    this.TournamentNameLocKey == other.TournamentNameLocKey ||
                    this.TournamentNameLocKey != null &&
                    this.TournamentNameLocKey.Equals(other.TournamentNameLocKey)
                ) && 
                (
                    this.TournamentPeriods == other.TournamentPeriods ||
                    this.TournamentPeriods != null &&
                    this.TournamentPeriods.Equals(other.TournamentPeriods)
                ) && 
                (
                    this.TournamentThemeId == other.TournamentThemeId ||
                    this.TournamentThemeId != null &&
                    this.TournamentThemeId.Equals(other.TournamentThemeId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.RosterId != null)
                    hash = hash * 59 + this.RosterId.GetHashCode();
                if (this.RosterLogo != null)
                    hash = hash * 59 + this.RosterLogo.GetHashCode();
                if (this.RosterLogoColor != null)
                    hash = hash * 59 + this.RosterLogoColor.GetHashCode();
                if (this.RosterName != null)
                    hash = hash * 59 + this.RosterName.GetHashCode();
                if (this.RosterShortName != null)
                    hash = hash * 59 + this.RosterShortName.GetHashCode();
                if (this.Stats != null)
                    hash = hash * 59 + this.Stats.GetHashCode();
                if (this.Tier != null)
                    hash = hash * 59 + this.Tier.GetHashCode();
                if (this.TournamentNameLocKey != null)
                    hash = hash * 59 + this.TournamentNameLocKey.GetHashCode();
                if (this.TournamentPeriods != null)
                    hash = hash * 59 + this.TournamentPeriods.GetHashCode();
                if (this.TournamentThemeId != null)
                    hash = hash * 59 + this.TournamentThemeId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
