/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// RsoAuthDeviceId
    /// </summary>
    [DataContract]
    public partial class RsoAuthDeviceId :  IEquatable<RsoAuthDeviceId>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RsoAuthDeviceId" /> class.
        /// </summary>
        /// <param name="CollectorServerName">CollectorServerName.</param>
        /// <param name="FrameUrl">FrameUrl.</param>
        /// <param name="InstallId">InstallId.</param>
        /// <param name="MerchantId">MerchantId.</param>
        /// <param name="SessionId">SessionId.</param>
        public RsoAuthDeviceId(string CollectorServerName = default(string), string FrameUrl = default(string), string InstallId = default(string), string MerchantId = default(string), string SessionId = default(string))
        {
            this.CollectorServerName = CollectorServerName;
            this.FrameUrl = FrameUrl;
            this.InstallId = InstallId;
            this.MerchantId = MerchantId;
            this.SessionId = SessionId;
        }
        
        /// <summary>
        /// Gets or Sets CollectorServerName
        /// </summary>
        [DataMember(Name="collectorServerName", EmitDefaultValue=false)]
        public string CollectorServerName { get; set; }

        /// <summary>
        /// Gets or Sets FrameUrl
        /// </summary>
        [DataMember(Name="frameUrl", EmitDefaultValue=false)]
        public string FrameUrl { get; set; }

        /// <summary>
        /// Gets or Sets InstallId
        /// </summary>
        [DataMember(Name="installId", EmitDefaultValue=false)]
        public string InstallId { get; set; }

        /// <summary>
        /// Gets or Sets MerchantId
        /// </summary>
        [DataMember(Name="merchantId", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Gets or Sets SessionId
        /// </summary>
        [DataMember(Name="sessionId", EmitDefaultValue=false)]
        public string SessionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RsoAuthDeviceId {\n");
            sb.Append("  CollectorServerName: ").Append(CollectorServerName).Append("\n");
            sb.Append("  FrameUrl: ").Append(FrameUrl).Append("\n");
            sb.Append("  InstallId: ").Append(InstallId).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RsoAuthDeviceId);
        }

        /// <summary>
        /// Returns true if RsoAuthDeviceId instances are equal
        /// </summary>
        /// <param name="other">Instance of RsoAuthDeviceId to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RsoAuthDeviceId other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CollectorServerName == other.CollectorServerName ||
                    this.CollectorServerName != null &&
                    this.CollectorServerName.Equals(other.CollectorServerName)
                ) && 
                (
                    this.FrameUrl == other.FrameUrl ||
                    this.FrameUrl != null &&
                    this.FrameUrl.Equals(other.FrameUrl)
                ) && 
                (
                    this.InstallId == other.InstallId ||
                    this.InstallId != null &&
                    this.InstallId.Equals(other.InstallId)
                ) && 
                (
                    this.MerchantId == other.MerchantId ||
                    this.MerchantId != null &&
                    this.MerchantId.Equals(other.MerchantId)
                ) && 
                (
                    this.SessionId == other.SessionId ||
                    this.SessionId != null &&
                    this.SessionId.Equals(other.SessionId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CollectorServerName != null)
                    hash = hash * 59 + this.CollectorServerName.GetHashCode();
                if (this.FrameUrl != null)
                    hash = hash * 59 + this.FrameUrl.GetHashCode();
                if (this.InstallId != null)
                    hash = hash * 59 + this.InstallId.GetHashCode();
                if (this.MerchantId != null)
                    hash = hash * 59 + this.MerchantId.GetHashCode();
                if (this.SessionId != null)
                    hash = hash * 59 + this.SessionId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
