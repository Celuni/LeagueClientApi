/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// SanitizerSanitizerStatus
    /// </summary>
    [DataContract]
    public partial class SanitizerSanitizerStatus :  IEquatable<SanitizerSanitizerStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SanitizerSanitizerStatus" /> class.
        /// </summary>
        /// <param name="AllowedCharsCount">AllowedCharsCount.</param>
        /// <param name="BreakingCharsCount">BreakingCharsCount.</param>
        /// <param name="FilteredWordCountsByLevel">FilteredWordCountsByLevel.</param>
        /// <param name="Locale">Locale.</param>
        /// <param name="ProjectedCharsCount">ProjectedCharsCount.</param>
        /// <param name="Ready">Ready.</param>
        /// <param name="Region">Region.</param>
        public SanitizerSanitizerStatus(int? AllowedCharsCount = default(int?), int? BreakingCharsCount = default(int?), Dictionary<string, int?> FilteredWordCountsByLevel = default(Dictionary<string, int?>), string Locale = default(string), int? ProjectedCharsCount = default(int?), bool? Ready = default(bool?), string Region = default(string))
        {
            this.AllowedCharsCount = AllowedCharsCount;
            this.BreakingCharsCount = BreakingCharsCount;
            this.FilteredWordCountsByLevel = FilteredWordCountsByLevel;
            this.Locale = Locale;
            this.ProjectedCharsCount = ProjectedCharsCount;
            this.Ready = Ready;
            this.Region = Region;
        }
        
        /// <summary>
        /// Gets or Sets AllowedCharsCount
        /// </summary>
        [DataMember(Name="allowedCharsCount", EmitDefaultValue=false)]
        public int? AllowedCharsCount { get; set; }

        /// <summary>
        /// Gets or Sets BreakingCharsCount
        /// </summary>
        [DataMember(Name="breakingCharsCount", EmitDefaultValue=false)]
        public int? BreakingCharsCount { get; set; }

        /// <summary>
        /// Gets or Sets FilteredWordCountsByLevel
        /// </summary>
        [DataMember(Name="filteredWordCountsByLevel", EmitDefaultValue=false)]
        public Dictionary<string, int?> FilteredWordCountsByLevel { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or Sets ProjectedCharsCount
        /// </summary>
        [DataMember(Name="projectedCharsCount", EmitDefaultValue=false)]
        public int? ProjectedCharsCount { get; set; }

        /// <summary>
        /// Gets or Sets Ready
        /// </summary>
        [DataMember(Name="ready", EmitDefaultValue=false)]
        public bool? Ready { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public string Region { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SanitizerSanitizerStatus {\n");
            sb.Append("  AllowedCharsCount: ").Append(AllowedCharsCount).Append("\n");
            sb.Append("  BreakingCharsCount: ").Append(BreakingCharsCount).Append("\n");
            sb.Append("  FilteredWordCountsByLevel: ").Append(FilteredWordCountsByLevel).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  ProjectedCharsCount: ").Append(ProjectedCharsCount).Append("\n");
            sb.Append("  Ready: ").Append(Ready).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SanitizerSanitizerStatus);
        }

        /// <summary>
        /// Returns true if SanitizerSanitizerStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of SanitizerSanitizerStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SanitizerSanitizerStatus other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AllowedCharsCount == other.AllowedCharsCount ||
                    this.AllowedCharsCount != null &&
                    this.AllowedCharsCount.Equals(other.AllowedCharsCount)
                ) && 
                (
                    this.BreakingCharsCount == other.BreakingCharsCount ||
                    this.BreakingCharsCount != null &&
                    this.BreakingCharsCount.Equals(other.BreakingCharsCount)
                ) && 
                (
                    this.FilteredWordCountsByLevel == other.FilteredWordCountsByLevel ||
                    this.FilteredWordCountsByLevel != null &&
                    this.FilteredWordCountsByLevel.SequenceEqual(other.FilteredWordCountsByLevel)
                ) && 
                (
                    this.Locale == other.Locale ||
                    this.Locale != null &&
                    this.Locale.Equals(other.Locale)
                ) && 
                (
                    this.ProjectedCharsCount == other.ProjectedCharsCount ||
                    this.ProjectedCharsCount != null &&
                    this.ProjectedCharsCount.Equals(other.ProjectedCharsCount)
                ) && 
                (
                    this.Ready == other.Ready ||
                    this.Ready != null &&
                    this.Ready.Equals(other.Ready)
                ) && 
                (
                    this.Region == other.Region ||
                    this.Region != null &&
                    this.Region.Equals(other.Region)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AllowedCharsCount != null)
                    hash = hash * 59 + this.AllowedCharsCount.GetHashCode();
                if (this.BreakingCharsCount != null)
                    hash = hash * 59 + this.BreakingCharsCount.GetHashCode();
                if (this.FilteredWordCountsByLevel != null)
                    hash = hash * 59 + this.FilteredWordCountsByLevel.GetHashCode();
                if (this.Locale != null)
                    hash = hash * 59 + this.Locale.GetHashCode();
                if (this.ProjectedCharsCount != null)
                    hash = hash * 59 + this.ProjectedCharsCount.GetHashCode();
                if (this.Ready != null)
                    hash = hash * 59 + this.Ready.GetHashCode();
                if (this.Region != null)
                    hash = hash * 59 + this.Region.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
