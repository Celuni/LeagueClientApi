/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// SummonerLevel
    /// </summary>
    [DataContract]
    public partial class SummonerLevel :  IEquatable<SummonerLevel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SummonerLevel" /> class.
        /// </summary>
        /// <param name="ExpTierMod">ExpTierMod.</param>
        /// <param name="ExpToNextLevel">ExpToNextLevel.</param>
        /// <param name="_SummonerLevel">_SummonerLevel.</param>
        /// <param name="SummonerTier">SummonerTier.</param>
        public SummonerLevel(long? ExpTierMod = default(long?), long? ExpToNextLevel = default(long?), int? _SummonerLevel = default(int?), long? SummonerTier = default(long?))
        {
            this.ExpTierMod = ExpTierMod;
            this.ExpToNextLevel = ExpToNextLevel;
            this._SummonerLevel = _SummonerLevel;
            this.SummonerTier = SummonerTier;
        }
        
        /// <summary>
        /// Gets or Sets ExpTierMod
        /// </summary>
        [DataMember(Name="expTierMod", EmitDefaultValue=false)]
        public long? ExpTierMod { get; set; }

        /// <summary>
        /// Gets or Sets ExpToNextLevel
        /// </summary>
        [DataMember(Name="expToNextLevel", EmitDefaultValue=false)]
        public long? ExpToNextLevel { get; set; }

        /// <summary>
        /// Gets or Sets _SummonerLevel
        /// </summary>
        [DataMember(Name="summonerLevel", EmitDefaultValue=false)]
        public int? _SummonerLevel { get; set; }

        /// <summary>
        /// Gets or Sets SummonerTier
        /// </summary>
        [DataMember(Name="summonerTier", EmitDefaultValue=false)]
        public long? SummonerTier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SummonerLevel {\n");
            sb.Append("  ExpTierMod: ").Append(ExpTierMod).Append("\n");
            sb.Append("  ExpToNextLevel: ").Append(ExpToNextLevel).Append("\n");
            sb.Append("  _SummonerLevel: ").Append(_SummonerLevel).Append("\n");
            sb.Append("  SummonerTier: ").Append(SummonerTier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SummonerLevel);
        }

        /// <summary>
        /// Returns true if SummonerLevel instances are equal
        /// </summary>
        /// <param name="other">Instance of SummonerLevel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SummonerLevel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ExpTierMod == other.ExpTierMod ||
                    this.ExpTierMod != null &&
                    this.ExpTierMod.Equals(other.ExpTierMod)
                ) && 
                (
                    this.ExpToNextLevel == other.ExpToNextLevel ||
                    this.ExpToNextLevel != null &&
                    this.ExpToNextLevel.Equals(other.ExpToNextLevel)
                ) && 
                (
                    this._SummonerLevel == other._SummonerLevel ||
                    this._SummonerLevel != null &&
                    this._SummonerLevel.Equals(other._SummonerLevel)
                ) && 
                (
                    this.SummonerTier == other.SummonerTier ||
                    this.SummonerTier != null &&
                    this.SummonerTier.Equals(other.SummonerTier)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ExpTierMod != null)
                    hash = hash * 59 + this.ExpTierMod.GetHashCode();
                if (this.ExpToNextLevel != null)
                    hash = hash * 59 + this.ExpToNextLevel.GetHashCode();
                if (this._SummonerLevel != null)
                    hash = hash * 59 + this._SummonerLevel.GetHashCode();
                if (this.SummonerTier != null)
                    hash = hash * 59 + this.SummonerTier.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
