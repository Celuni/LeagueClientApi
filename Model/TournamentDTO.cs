/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// TournamentDTO
    /// </summary>
    [DataContract]
    public partial class TournamentDTO :  IEquatable<TournamentDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TournamentDTO" /> class.
        /// </summary>
        /// <param name="BuyInOptions">BuyInOptions.</param>
        /// <param name="EntryFee">EntryFee.</param>
        /// <param name="Id">Id.</param>
        /// <param name="MaxSub">MaxSub.</param>
        /// <param name="NameLocKey">NameLocKey.</param>
        /// <param name="Phases">Phases.</param>
        /// <param name="QueueId">QueueId.</param>
        /// <param name="RewardConfig">RewardConfig.</param>
        /// <param name="RosterCreateDeadline">RosterCreateDeadline.</param>
        /// <param name="RosterDisbandDeadline">RosterDisbandDeadline.</param>
        /// <param name="RosterSize">RosterSize.</param>
        /// <param name="ScheduleEndTime">ScheduleEndTime.</param>
        /// <param name="ScheduleTime">ScheduleTime.</param>
        /// <param name="ScoutingTimeMs">ScoutingTimeMs.</param>
        /// <param name="ThemeId">ThemeId.</param>
        public TournamentDTO(List<int?> BuyInOptions = default(List<int?>), int? EntryFee = default(int?), long? Id = default(long?), int? MaxSub = default(int?), string NameLocKey = default(string), List<TournamentPhaseDTO> Phases = default(List<TournamentPhaseDTO>), int? QueueId = default(int?), List<ClashRewardConfigClient> RewardConfig = default(List<ClashRewardConfigClient>), long? RosterCreateDeadline = default(long?), long? RosterDisbandDeadline = default(long?), int? RosterSize = default(int?), long? ScheduleEndTime = default(long?), long? ScheduleTime = default(long?), long? ScoutingTimeMs = default(long?), int? ThemeId = default(int?))
        {
            this.BuyInOptions = BuyInOptions;
            this.EntryFee = EntryFee;
            this.Id = Id;
            this.MaxSub = MaxSub;
            this.NameLocKey = NameLocKey;
            this.Phases = Phases;
            this.QueueId = QueueId;
            this.RewardConfig = RewardConfig;
            this.RosterCreateDeadline = RosterCreateDeadline;
            this.RosterDisbandDeadline = RosterDisbandDeadline;
            this.RosterSize = RosterSize;
            this.ScheduleEndTime = ScheduleEndTime;
            this.ScheduleTime = ScheduleTime;
            this.ScoutingTimeMs = ScoutingTimeMs;
            this.ThemeId = ThemeId;
        }
        
        /// <summary>
        /// Gets or Sets BuyInOptions
        /// </summary>
        [DataMember(Name="buyInOptions", EmitDefaultValue=false)]
        public List<int?> BuyInOptions { get; set; }

        /// <summary>
        /// Gets or Sets EntryFee
        /// </summary>
        [DataMember(Name="entryFee", EmitDefaultValue=false)]
        public int? EntryFee { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets MaxSub
        /// </summary>
        [DataMember(Name="maxSub", EmitDefaultValue=false)]
        public int? MaxSub { get; set; }

        /// <summary>
        /// Gets or Sets NameLocKey
        /// </summary>
        [DataMember(Name="nameLocKey", EmitDefaultValue=false)]
        public string NameLocKey { get; set; }

        /// <summary>
        /// Gets or Sets Phases
        /// </summary>
        [DataMember(Name="phases", EmitDefaultValue=false)]
        public List<TournamentPhaseDTO> Phases { get; set; }

        /// <summary>
        /// Gets or Sets QueueId
        /// </summary>
        [DataMember(Name="queueId", EmitDefaultValue=false)]
        public int? QueueId { get; set; }

        /// <summary>
        /// Gets or Sets RewardConfig
        /// </summary>
        [DataMember(Name="rewardConfig", EmitDefaultValue=false)]
        public List<ClashRewardConfigClient> RewardConfig { get; set; }

        /// <summary>
        /// Gets or Sets RosterCreateDeadline
        /// </summary>
        [DataMember(Name="rosterCreateDeadline", EmitDefaultValue=false)]
        public long? RosterCreateDeadline { get; set; }

        /// <summary>
        /// Gets or Sets RosterDisbandDeadline
        /// </summary>
        [DataMember(Name="rosterDisbandDeadline", EmitDefaultValue=false)]
        public long? RosterDisbandDeadline { get; set; }

        /// <summary>
        /// Gets or Sets RosterSize
        /// </summary>
        [DataMember(Name="rosterSize", EmitDefaultValue=false)]
        public int? RosterSize { get; set; }

        /// <summary>
        /// Gets or Sets ScheduleEndTime
        /// </summary>
        [DataMember(Name="scheduleEndTime", EmitDefaultValue=false)]
        public long? ScheduleEndTime { get; set; }

        /// <summary>
        /// Gets or Sets ScheduleTime
        /// </summary>
        [DataMember(Name="scheduleTime", EmitDefaultValue=false)]
        public long? ScheduleTime { get; set; }

        /// <summary>
        /// Gets or Sets ScoutingTimeMs
        /// </summary>
        [DataMember(Name="scoutingTimeMs", EmitDefaultValue=false)]
        public long? ScoutingTimeMs { get; set; }

        /// <summary>
        /// Gets or Sets ThemeId
        /// </summary>
        [DataMember(Name="themeId", EmitDefaultValue=false)]
        public int? ThemeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TournamentDTO {\n");
            sb.Append("  BuyInOptions: ").Append(BuyInOptions).Append("\n");
            sb.Append("  EntryFee: ").Append(EntryFee).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MaxSub: ").Append(MaxSub).Append("\n");
            sb.Append("  NameLocKey: ").Append(NameLocKey).Append("\n");
            sb.Append("  Phases: ").Append(Phases).Append("\n");
            sb.Append("  QueueId: ").Append(QueueId).Append("\n");
            sb.Append("  RewardConfig: ").Append(RewardConfig).Append("\n");
            sb.Append("  RosterCreateDeadline: ").Append(RosterCreateDeadline).Append("\n");
            sb.Append("  RosterDisbandDeadline: ").Append(RosterDisbandDeadline).Append("\n");
            sb.Append("  RosterSize: ").Append(RosterSize).Append("\n");
            sb.Append("  ScheduleEndTime: ").Append(ScheduleEndTime).Append("\n");
            sb.Append("  ScheduleTime: ").Append(ScheduleTime).Append("\n");
            sb.Append("  ScoutingTimeMs: ").Append(ScoutingTimeMs).Append("\n");
            sb.Append("  ThemeId: ").Append(ThemeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TournamentDTO);
        }

        /// <summary>
        /// Returns true if TournamentDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of TournamentDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TournamentDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BuyInOptions == other.BuyInOptions ||
                    this.BuyInOptions != null &&
                    this.BuyInOptions.SequenceEqual(other.BuyInOptions)
                ) && 
                (
                    this.EntryFee == other.EntryFee ||
                    this.EntryFee != null &&
                    this.EntryFee.Equals(other.EntryFee)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.MaxSub == other.MaxSub ||
                    this.MaxSub != null &&
                    this.MaxSub.Equals(other.MaxSub)
                ) && 
                (
                    this.NameLocKey == other.NameLocKey ||
                    this.NameLocKey != null &&
                    this.NameLocKey.Equals(other.NameLocKey)
                ) && 
                (
                    this.Phases == other.Phases ||
                    this.Phases != null &&
                    this.Phases.SequenceEqual(other.Phases)
                ) && 
                (
                    this.QueueId == other.QueueId ||
                    this.QueueId != null &&
                    this.QueueId.Equals(other.QueueId)
                ) && 
                (
                    this.RewardConfig == other.RewardConfig ||
                    this.RewardConfig != null &&
                    this.RewardConfig.SequenceEqual(other.RewardConfig)
                ) && 
                (
                    this.RosterCreateDeadline == other.RosterCreateDeadline ||
                    this.RosterCreateDeadline != null &&
                    this.RosterCreateDeadline.Equals(other.RosterCreateDeadline)
                ) && 
                (
                    this.RosterDisbandDeadline == other.RosterDisbandDeadline ||
                    this.RosterDisbandDeadline != null &&
                    this.RosterDisbandDeadline.Equals(other.RosterDisbandDeadline)
                ) && 
                (
                    this.RosterSize == other.RosterSize ||
                    this.RosterSize != null &&
                    this.RosterSize.Equals(other.RosterSize)
                ) && 
                (
                    this.ScheduleEndTime == other.ScheduleEndTime ||
                    this.ScheduleEndTime != null &&
                    this.ScheduleEndTime.Equals(other.ScheduleEndTime)
                ) && 
                (
                    this.ScheduleTime == other.ScheduleTime ||
                    this.ScheduleTime != null &&
                    this.ScheduleTime.Equals(other.ScheduleTime)
                ) && 
                (
                    this.ScoutingTimeMs == other.ScoutingTimeMs ||
                    this.ScoutingTimeMs != null &&
                    this.ScoutingTimeMs.Equals(other.ScoutingTimeMs)
                ) && 
                (
                    this.ThemeId == other.ThemeId ||
                    this.ThemeId != null &&
                    this.ThemeId.Equals(other.ThemeId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BuyInOptions != null)
                    hash = hash * 59 + this.BuyInOptions.GetHashCode();
                if (this.EntryFee != null)
                    hash = hash * 59 + this.EntryFee.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.MaxSub != null)
                    hash = hash * 59 + this.MaxSub.GetHashCode();
                if (this.NameLocKey != null)
                    hash = hash * 59 + this.NameLocKey.GetHashCode();
                if (this.Phases != null)
                    hash = hash * 59 + this.Phases.GetHashCode();
                if (this.QueueId != null)
                    hash = hash * 59 + this.QueueId.GetHashCode();
                if (this.RewardConfig != null)
                    hash = hash * 59 + this.RewardConfig.GetHashCode();
                if (this.RosterCreateDeadline != null)
                    hash = hash * 59 + this.RosterCreateDeadline.GetHashCode();
                if (this.RosterDisbandDeadline != null)
                    hash = hash * 59 + this.RosterDisbandDeadline.GetHashCode();
                if (this.RosterSize != null)
                    hash = hash * 59 + this.RosterSize.GetHashCode();
                if (this.ScheduleEndTime != null)
                    hash = hash * 59 + this.ScheduleEndTime.GetHashCode();
                if (this.ScheduleTime != null)
                    hash = hash * 59 + this.ScheduleTime.GetHashCode();
                if (this.ScoutingTimeMs != null)
                    hash = hash * 59 + this.ScoutingTimeMs.GetHashCode();
                if (this.ThemeId != null)
                    hash = hash * 59 + this.ThemeId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
