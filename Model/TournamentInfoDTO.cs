/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// TournamentInfoDTO
    /// </summary>
    [DataContract]
    public partial class TournamentInfoDTO :  IEquatable<TournamentInfoDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TournamentInfoDTO" /> class.
        /// </summary>
        /// <param name="InviteePendingRosters">InviteePendingRosters.</param>
        /// <param name="PendingRoster">PendingRoster.</param>
        /// <param name="Roster">Roster.</param>
        /// <param name="ThemeVp">ThemeVp.</param>
        /// <param name="Tournament">Tournament.</param>
        public TournamentInfoDTO(List<PendingRosterDTO> InviteePendingRosters = default(List<PendingRosterDTO>), PendingRosterDTO PendingRoster = default(PendingRosterDTO), RosterDTO Roster = default(RosterDTO), int? ThemeVp = default(int?), TournamentDTO Tournament = default(TournamentDTO))
        {
            this.InviteePendingRosters = InviteePendingRosters;
            this.PendingRoster = PendingRoster;
            this.Roster = Roster;
            this.ThemeVp = ThemeVp;
            this.Tournament = Tournament;
        }
        
        /// <summary>
        /// Gets or Sets InviteePendingRosters
        /// </summary>
        [DataMember(Name="inviteePendingRosters", EmitDefaultValue=false)]
        public List<PendingRosterDTO> InviteePendingRosters { get; set; }

        /// <summary>
        /// Gets or Sets PendingRoster
        /// </summary>
        [DataMember(Name="pendingRoster", EmitDefaultValue=false)]
        public PendingRosterDTO PendingRoster { get; set; }

        /// <summary>
        /// Gets or Sets Roster
        /// </summary>
        [DataMember(Name="roster", EmitDefaultValue=false)]
        public RosterDTO Roster { get; set; }

        /// <summary>
        /// Gets or Sets ThemeVp
        /// </summary>
        [DataMember(Name="themeVp", EmitDefaultValue=false)]
        public int? ThemeVp { get; set; }

        /// <summary>
        /// Gets or Sets Tournament
        /// </summary>
        [DataMember(Name="tournament", EmitDefaultValue=false)]
        public TournamentDTO Tournament { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TournamentInfoDTO {\n");
            sb.Append("  InviteePendingRosters: ").Append(InviteePendingRosters).Append("\n");
            sb.Append("  PendingRoster: ").Append(PendingRoster).Append("\n");
            sb.Append("  Roster: ").Append(Roster).Append("\n");
            sb.Append("  ThemeVp: ").Append(ThemeVp).Append("\n");
            sb.Append("  Tournament: ").Append(Tournament).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TournamentInfoDTO);
        }

        /// <summary>
        /// Returns true if TournamentInfoDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of TournamentInfoDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TournamentInfoDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.InviteePendingRosters == other.InviteePendingRosters ||
                    this.InviteePendingRosters != null &&
                    this.InviteePendingRosters.SequenceEqual(other.InviteePendingRosters)
                ) && 
                (
                    this.PendingRoster == other.PendingRoster ||
                    this.PendingRoster != null &&
                    this.PendingRoster.Equals(other.PendingRoster)
                ) && 
                (
                    this.Roster == other.Roster ||
                    this.Roster != null &&
                    this.Roster.Equals(other.Roster)
                ) && 
                (
                    this.ThemeVp == other.ThemeVp ||
                    this.ThemeVp != null &&
                    this.ThemeVp.Equals(other.ThemeVp)
                ) && 
                (
                    this.Tournament == other.Tournament ||
                    this.Tournament != null &&
                    this.Tournament.Equals(other.Tournament)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.InviteePendingRosters != null)
                    hash = hash * 59 + this.InviteePendingRosters.GetHashCode();
                if (this.PendingRoster != null)
                    hash = hash * 59 + this.PendingRoster.GetHashCode();
                if (this.Roster != null)
                    hash = hash * 59 + this.Roster.GetHashCode();
                if (this.ThemeVp != null)
                    hash = hash * 59 + this.ThemeVp.GetHashCode();
                if (this.Tournament != null)
                    hash = hash * 59 + this.Tournament.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
