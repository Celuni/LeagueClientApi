/* 
 * LeagueClient
 *
 * 7.23.209.3517
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace LeagueClientApi.Model
{
    /// <summary>
    /// TournamentInfoMinimalDTO
    /// </summary>
    [DataContract]
    public partial class TournamentInfoMinimalDTO :  IEquatable<TournamentInfoMinimalDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TournamentInfoMinimalDTO" /> class.
        /// </summary>
        /// <param name="Time">Time.</param>
        /// <param name="TournamentInfo">TournamentInfo.</param>
        public TournamentInfoMinimalDTO(long? Time = default(long?), List<TournamentInfoDTO> TournamentInfo = default(List<TournamentInfoDTO>))
        {
            this.Time = Time;
            this.TournamentInfo = TournamentInfo;
        }
        
        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public long? Time { get; set; }

        /// <summary>
        /// Gets or Sets TournamentInfo
        /// </summary>
        [DataMember(Name="tournamentInfo", EmitDefaultValue=false)]
        public List<TournamentInfoDTO> TournamentInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TournamentInfoMinimalDTO {\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  TournamentInfo: ").Append(TournamentInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TournamentInfoMinimalDTO);
        }

        /// <summary>
        /// Returns true if TournamentInfoMinimalDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of TournamentInfoMinimalDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TournamentInfoMinimalDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Time == other.Time ||
                    this.Time != null &&
                    this.Time.Equals(other.Time)
                ) && 
                (
                    this.TournamentInfo == other.TournamentInfo ||
                    this.TournamentInfo != null &&
                    this.TournamentInfo.SequenceEqual(other.TournamentInfo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Time != null)
                    hash = hash * 59 + this.Time.GetHashCode();
                if (this.TournamentInfo != null)
                    hash = hash * 59 + this.TournamentInfo.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
